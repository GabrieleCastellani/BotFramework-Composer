diff --git a/Composer/cypress/integration/Breadcrumb.spec.ts b/Composer/cypress/integration/Breadcrumb.spec.ts
index 9f7d37337..e0a0ff7eb 100644
--- a/Composer/cypress/integration/Breadcrumb.spec.ts
+++ b/Composer/cypress/integration/Breadcrumb.spec.ts
@@ -8,7 +8,7 @@ context('breadcrumb', () => {
 
     // Return to Main.dialog
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestTodoSample').last().click();
+      cy.findByText('__TestTodoSample').click();
     });
   });
 
@@ -29,7 +29,7 @@ context('breadcrumb', () => {
 
     // Return to Main.dialog
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestTodoSample').last().click();
+      cy.findByText('__TestTodoSample').click();
     });
 
     hasBreadcrumbItems(cy, ['__TestTodoSample']);
diff --git a/Composer/cypress/integration/CreateNewBot.spec.ts b/Composer/cypress/integration/CreateNewBot.spec.ts
index 60822b370..1b9210fbb 100644
--- a/Composer/cypress/integration/CreateNewBot.spec.ts
+++ b/Composer/cypress/integration/CreateNewBot.spec.ts
@@ -15,7 +15,7 @@ context('Creating a new bot', () => {
     cy.findByTestId('NextStepButton').click();
     cy.enterTextAndSubmit('NewDialogName', '__TestNewProject', 'SubmitNewBotBtn');
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestNewProject').should('exist');
+      cy.findByText('__TestNewProject').should('exist');
     });
   });
 
@@ -25,7 +25,7 @@ context('Creating a new bot', () => {
     cy.findByTestId('NextStepButton').click();
     cy.enterTextAndSubmit('NewDialogName', '__TestNewProject2', 'SubmitNewBotBtn');
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestNewProject2').should('exist');
+      cy.findByText('__TestNewProject2').should('exist');
       cy.findByText('addtodo').should('exist');
       cy.findByText('cleartodos').should('exist');
       cy.findByText('deletetodo').should('exist');
diff --git a/Composer/cypress/integration/LGPage.spec.ts b/Composer/cypress/integration/LGPage.spec.ts
index 9df234117..7f935451e 100644
--- a/Composer/cypress/integration/LGPage.spec.ts
+++ b/Composer/cypress/integration/LGPage.spec.ts
@@ -11,6 +11,7 @@ context('LG Page', () => {
     cy.findByTestId('LeftNav-CommandBarButtonBot Responses').click();
     // left nav tree
     cy.contains('TodoSample');
+    cy.contains('All');
 
     cy.findByTestId('showcode').as('switchButton');
 
@@ -28,7 +29,7 @@ context('LG Page', () => {
 
     // nav to Main dialog
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestTodoSample').last().click();
+      cy.findByText('__TestTodoSample').click();
     });
   });
 });
diff --git a/Composer/cypress/integration/LUPage.spec.ts b/Composer/cypress/integration/LUPage.spec.ts
index 780a8d935..05704f40a 100644
--- a/Composer/cypress/integration/LUPage.spec.ts
+++ b/Composer/cypress/integration/LUPage.spec.ts
@@ -11,6 +11,7 @@ context('LU Page', () => {
     cy.findByTestId('LeftNav-CommandBarButtonUser Input').click();
     // left nav tree
     cy.contains('__TestToDoBotWithLuisSample');
+    cy.contains('All');
 
     cy.findByTestId('showcode').should('not.exist');
 
@@ -22,11 +23,17 @@ context('LU Page', () => {
 
     // nav to ToDoBotWithLuisSample.main dialog
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestToDoBotWithLuisSample').last().click('left');
+      cy.findByText('__TestToDoBotWithLuisSample').click('left');
     });
     cy.findByTestId('showcode').as('switchButton');
     // goto edit-mode
     cy.get('@switchButton').click();
     cy.findByTestId('LUPage').get('.monaco-editor').should('exist');
+
+    // back to all table view
+    cy.findByTestId('ProjectTree').within(() => {
+      cy.findByText('All').click();
+    });
+    cy.findByTestId('LUPage').findByTestId('table-view').should('exist');
   });
 });
diff --git a/Composer/cypress/integration/LeftNavBar.spec.ts b/Composer/cypress/integration/LeftNavBar.spec.ts
index 54c6edbcd..087e6376b 100644
--- a/Composer/cypress/integration/LeftNavBar.spec.ts
+++ b/Composer/cypress/integration/LeftNavBar.spec.ts
@@ -14,7 +14,7 @@ context('Left Nav Bar', () => {
     cy.url().should('include', 'language-generation');
     cy.findByTestId('LeftNav-CommandBarButtonUser Input').click();
     cy.url().should('include', 'language-understanding');
-    cy.findByTestId('LeftNav-CommandBarButtonComposer Settings').click();
+    cy.findByTestId('LeftNav-CommandBarButtonSettings').click();
     cy.url().should('include', 'setting');
   });
 });
diff --git a/Composer/cypress/integration/LuisDeploy.spec.ts b/Composer/cypress/integration/LuisDeploy.spec.ts
index 845219419..ade1d8a44 100644
--- a/Composer/cypress/integration/LuisDeploy.spec.ts
+++ b/Composer/cypress/integration/LuisDeploy.spec.ts
@@ -6,35 +6,40 @@ context('Luis Deploy', () => {
     cy.server();
     cy.route('POST', '/api/publish/*/publish/default', { endpointURL: 'anything', status: 202 });
     cy.route('POST', '/api/projects/*/settings', 'OK');
-    cy.route('GET', '/api/publish/*/status/default', { endpointURL: 'anything', status: 404 });
+    cy.route('GET', '/api/publish/*/status/default', { endpointURL: 'anything', status: 200 });
     cy.visit('/home');
     cy.createBot('ToDoBotWithLuisSample');
   });
 
   it('can deploy luis success', () => {
-    cy.visitPage('Project Settings');
-    cy.findAllByTestId('rootLUISKey').type('12345678', { delay: 200 });
-    cy.findAllByTestId('rootLUISRegion').type('westus', { delay: 200 });
-    cy.visitPage('User Input');
+    cy.findByTestId('LeftNav-CommandBarButtonUser Input').click();
     cy.url().should('contain', 'language-understanding/all');
-    cy.visitPage('Design');
     cy.route({
       method: 'POST',
       url: 'api/projects/*/build',
-      status: 400,
-      response: 'fixture:luPublish/failure',
+      status: 200,
+      response: 'fixture:luPublish/success',
     });
-    cy.findByText(/^Start all bots/).click();
-    cy.findByTitle('Open start bots panel').click();
-    cy.findByText('See Details').click();
+    cy.findByText(/^(Start|Restart) Bot$/).click();
+
+    // clear its settings before
+    cy.enterTextAndSubmit('ProjectNameInput', 'MyProject');
+    cy.enterTextAndSubmit('EnvironmentInput', 'composer');
+    cy.enterTextAndSubmit('AuthoringKeyInput', '0d4991873f334685a9686d1b48e0ff48');
+    // wait for the debounce interval of sync settings
+    cy.findByText('OK').click();
+    cy.findByText('Restart Bot').should('exist');
+    cy.findByText('Test in Emulator').should('exist');
 
     cy.route({
       method: 'POST',
       url: 'api/projects/*/build',
-      status: 200,
-      response: 'fixture:luPublish/success',
+      status: 400,
+      response: 'fixture:luPublish/error',
     });
+    cy.findByText('Restart Bot').click();
     cy.findByText('Try again').click();
-    cy.findByText(/^Stop all bots/).click();
+    cy.findByTestId('AuthoringKeyInput').type('no-id');
+    cy.findByText('OK').click();
   });
 });
diff --git a/Composer/cypress/integration/NewDialog.spec.ts b/Composer/cypress/integration/NewDialog.spec.ts
index 9c399e4e0..1396672d0 100644
--- a/Composer/cypress/integration/NewDialog.spec.ts
+++ b/Composer/cypress/integration/NewDialog.spec.ts
@@ -9,10 +9,8 @@ context('Creating a new Dialog', () => {
   });
 
   it('can create a new dialog from project tree', () => {
-    cy.findByTestId('BotHeader-__TestTodoSample').within(() => {
-      cy.findByTestId('dialogMoreButton').click({ force: true });
-    });
-    cy.findAllByText('Add a dialog').click();
+    cy.findByTestId('AddFlyout').click();
+    cy.findByTestId('FlyoutNewDialog').click();
     cy.findByTestId('NewDialogName').type('{selectall}TestNewDialog2{enter}');
     cy.findByTestId('ProjectTree').within(() => {
       cy.findByText('TestNewDialog2').should('exist');
diff --git a/Composer/cypress/integration/NotificationPage.spec.ts b/Composer/cypress/integration/NotificationPage.spec.ts
index 8a20821b2..07c1090f1 100644
--- a/Composer/cypress/integration/NotificationPage.spec.ts
+++ b/Composer/cypress/integration/NotificationPage.spec.ts
@@ -7,39 +7,33 @@ context('Notification Page', () => {
   });
 
   it('can show lg syntax error ', () => {
-    cy.visitPage('Design');
     cy.visitPage('Bot Responses');
 
-    cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestToDoBotWithLuisSample').last().click();
-    });
-
     cy.findByTestId('showcode').click();
     cy.get('textarea').type('#', { delay: 200 });
 
-    cy.findByTestId('LeftNav-CommandBarButtonDiagnostics').click();
+    cy.findByTestId('LeftNav-CommandBarButtonNotifications').click();
 
-    cy.findByTestId('diagnostics-table-view').within(() => {
-      cy.findAllByText('__TestToDoBotWithLuisSample.en-us.lg').should('exist').first().click();
+    cy.findByTestId('notifications-table-view').within(() => {
+      cy.findAllByText('common.en-us.lg').should('exist').first().click();
     });
 
     cy.findAllByText('Bot Responses').should('exist');
   });
 
   it('can show lu syntax error ', () => {
-    cy.visitPage('Design');
     cy.visitPage('User Input');
 
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestToDoBotWithLuisSample').last().click();
+      cy.findByText('__TestToDoBotWithLuisSample').click();
     });
 
     cy.findByTestId('showcode').click();
-    cy.get('textarea').type('t*', { delay: 200 });
+    cy.get('textarea').type('t', { delay: 200 });
 
-    cy.findByTestId('LeftNav-CommandBarButtonDiagnostics').click();
+    cy.findByTestId('LeftNav-CommandBarButtonNotifications').click();
 
-    cy.findByTestId('diagnostics-table-view').within(() => {
+    cy.findByTestId('notifications-table-view').within(() => {
       cy.findAllByText('__TestToDoBotWithLuisSample.en-us.lu').should('exist').first().dblclick();
     });
 
diff --git a/Composer/cypress/integration/Onboarding.spec.ts b/Composer/cypress/integration/Onboarding.spec.ts
index ddc1b1bd0..dc8e41e23 100644
--- a/Composer/cypress/integration/Onboarding.spec.ts
+++ b/Composer/cypress/integration/Onboarding.spec.ts
@@ -7,7 +7,7 @@ context('Onboarding', () => {
     cy.createBot('TodoSample', 'Onboarding');
     cy.visitPage('Design');
     //enable onboarding setting
-    cy.visitPage('Composer Settings');
+    cy.visitPage('Settings');
     cy.findByTestId('ProjectTree').within(() => {
       cy.findByText('Application Settings').click();
     });
diff --git a/Composer/cypress/integration/Publish.spec.ts b/Composer/cypress/integration/Publish.spec.ts
index 9166d7e4a..37f2081ff 100644
--- a/Composer/cypress/integration/Publish.spec.ts
+++ b/Composer/cypress/integration/Publish.spec.ts
@@ -44,20 +44,32 @@ context('Publish Page', () => {
   it('can add profile and publish in publish page', () => {
     // click left nav button
     cy.findByTestId('LeftNav-CommandBarButtonPublish').click();
-    cy.findByText('__TestEchoBot');
+    // publish page
+    cy.contains('Publish Profiles');
+    // target list exist
+    cy.contains('All profiles');
+    cy.findByTestId('Publish').findByTestId('target-list').should('exist');
 
-    cy.contains('Bot');
+    // status list exist
+    cy.contains('Time');
     cy.contains('Date');
-    cy.visitPage('Project Settings');
-    cy.findByText('Add new publish profile').click();
+    cy.findByTestId('Publish').findByTestId('publish-status-list').should('exist');
+
+    // add profile
+    cy.findByText('Add new profile').click();
     cy.findByText('Add a publish profile').should('exist');
-    cy.findAllByPlaceholderText('My Publish Profile').first().type('testProfile');
+    cy.findByText('Name').type('testProfile');
     cy.findByText('Choose One').click();
     cy.findByText('azure publish').click();
+    // show instruction
+    cy.findByText('plugin instruction').should('exist');
     // save profile
     cy.findByText('Save').click();
-
-    cy.findByTestId('LeftNav-CommandBarButtonPublish').click();
-    cy.findByText('testProfile');
+    // new profile should exist in target list
+    cy.findByTestId('Publish')
+      .findByTestId('target-list')
+      .within(() => {
+        cy.findByText('testProfile').should('exist');
+      });
   });
 });
diff --git a/Composer/cypress/integration/RemoveDialog.spec.ts b/Composer/cypress/integration/RemoveDialog.spec.ts
index 6e419dc6a..fd6a610d8 100644
--- a/Composer/cypress/integration/RemoveDialog.spec.ts
+++ b/Composer/cypress/integration/RemoveDialog.spec.ts
@@ -14,7 +14,9 @@ context('RemoveDialog', () => {
       });
     });
 
-    cy.findByText('Remove this dialog').click();
+    cy.get('.ms-ContextualMenu-linkContent > .ms-ContextualMenu-itemText').within(() => {
+      cy.findByText('Remove this dialog').click();
+    });
 
     cy.findByText('Yes').click();
 
diff --git a/Composer/cypress/integration/SaveAs.spec.ts b/Composer/cypress/integration/SaveAs.spec.ts
index cc5948ace..c7e2a63b5 100644
--- a/Composer/cypress/integration/SaveAs.spec.ts
+++ b/Composer/cypress/integration/SaveAs.spec.ts
@@ -14,7 +14,7 @@ context('Saving As', () => {
     cy.findByText('Save as').click();
     cy.enterTextAndSubmit('NewDialogName', '__TestSaveAs', 'SubmitNewBotBtn');
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestSaveAs').should('exist');
+      cy.findByText('__TestSaveAs').should('exist');
     });
   });
 });
diff --git a/Composer/cypress/integration/ToDoBot.spec.ts b/Composer/cypress/integration/ToDoBot.spec.ts
index 8af24257c..4625c9042 100644
--- a/Composer/cypress/integration/ToDoBot.spec.ts
+++ b/Composer/cypress/integration/ToDoBot.spec.ts
@@ -11,10 +11,10 @@ context('ToDo Bot', () => {
 
   it('can open the main dialog', () => {
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestTodoSample').last().click();
+      cy.findByText('__TestTodoSample').click();
     });
     cy.withinEditor('PropertyEditor', () => {
-      cy.findAllByDisplayValue('__TestTodoSample').should('exist');
+      cy.findByDisplayValue('__TestTodoSample').should('exist');
     });
   });
 
diff --git a/Composer/cypress/integration/TriggerCreation.spec.ts b/Composer/cypress/integration/TriggerCreation.spec.ts
index ea2111f95..288f70e84 100644
--- a/Composer/cypress/integration/TriggerCreation.spec.ts
+++ b/Composer/cypress/integration/TriggerCreation.spec.ts
@@ -9,15 +9,12 @@ context('Creating a new trigger', () => {
 
   it('can create different kinds of triggers ', () => {
     cy.visitPage('Design');
-    cy.findByTestId('DialogHeader-__TestEmptyBot').click();
     cy.findByTestId('recognizerTypeDropdown').click();
     cy.findByText('Regular expression recognizer').click();
 
     //onintent trigger
-    cy.findByTestId('DialogHeader-__TestEmptyBot').within(() => {
-      cy.findByTestId('dialogMoreButton').click({ force: true });
-    });
-    cy.findAllByText('Add a trigger').click();
+    cy.findByTestId('AddFlyout').click();
+    cy.findByTestId('FlyoutNewTrigger').click();
     cy.findByTestId('triggerTypeDropDown').click();
     cy.get('[title="Intent recognized"]').click();
     cy.findByTestId('TriggerName').type('myTrigger1');
@@ -26,10 +23,8 @@ context('Creating a new trigger', () => {
     cy.findAllByText('myTrigger1').should('exist');
 
     //on Dialog Event trigger
-    cy.findByTestId('DialogHeader-__TestEmptyBot').within(() => {
-      cy.findByTestId('dialogMoreButton').click({ force: true });
-    });
-    cy.findAllByText('Add a trigger').click();
+    cy.findByTestId('AddFlyout').click();
+    cy.findByTestId('FlyoutNewTrigger').click();
     cy.findByTestId('triggerTypeDropDown').click();
     cy.get('[title="Dialog events"]').click();
     cy.findByTestId('eventTypeDropDown').click();
@@ -38,10 +33,8 @@ context('Creating a new trigger', () => {
     cy.findAllByText('Begin dialog event').should('exist');
 
     // custom event
-    cy.findByTestId('DialogHeader-__TestEmptyBot').within(() => {
-      cy.findByTestId('dialogMoreButton').click({ force: true });
-    });
-    cy.findAllByText('Add a trigger').click();
+    cy.findByTestId('AddFlyout').click();
+    cy.findByTestId('FlyoutNewTrigger').click();
     cy.findByTestId('triggerTypeDropDown').click();
     cy.get('[title="Custom events"]').click();
     cy.findByTestId('CustomEventName').type('myCustomEvent');
@@ -49,10 +42,8 @@ context('Creating a new trigger', () => {
     cy.findAllByText('myCustomEvent').should('exist');
 
     //on activity trigger
-    cy.findByTestId('DialogHeader-__TestEmptyBot').within(() => {
-      cy.findByTestId('dialogMoreButton').click({ force: true });
-    });
-    cy.findAllByText('Add a trigger').click();
+    cy.findByTestId('AddFlyout').click();
+    cy.findByTestId('FlyoutNewTrigger').click();
     cy.findByTestId('triggerTypeDropDown').click();
     cy.get('[title="Activities"]').click();
     cy.findByTestId('activityTypeDropDown').click();
diff --git a/Composer/cypress/integration/VisualDesigner.spec.ts b/Composer/cypress/integration/VisualDesigner.spec.ts
index 6c4492433..470c42de9 100644
--- a/Composer/cypress/integration/VisualDesigner.spec.ts
+++ b/Composer/cypress/integration/VisualDesigner.spec.ts
@@ -7,7 +7,7 @@ context('Visual Designer', () => {
     cy.createBot('TodoSample');
     // Return to Main.dialog
     cy.findByTestId('ProjectTree').within(() => {
-      cy.findAllByText('__TestTodoSample').last().click();
+      cy.findByText('__TestTodoSample').click();
     });
   });
 
diff --git a/Composer/package.json b/Composer/package.json
index 755b0ce2e..dd67498e9 100644
--- a/Composer/package.json
+++ b/Composer/package.json
@@ -70,7 +70,7 @@
     "l10n:extractJson": "node scripts/l10n-extractJson.js",
     "l10n:transform": "node scripts/l10n-transform.js",
     "l10n:babel": "babel --config-file ./babel.l10n.config.js --extensions \"ts,.tsx,.jsx,.js\" --out-dir l10ntemp ./packages",
-    "l10n": "yarn l10n:babel && yarn l10n:extract && yarn l10n:transform packages/server/src/locales/en-US.json && yarn l10n:extractJson packages/server/schemas"
+    "l10n": "yarn l10n:babel && yarn l10n:extract && yarn l10n:transform packages/server/src/locales/en-US.json && yarn l10n:extractJson packages/server/schemas && rimraf l10ntemp"
   },
   "husky": {
     "hooks": {
diff --git a/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/renderers/EdgeMenu.test.tsx b/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/renderers/EdgeMenu.test.tsx
index 83e51fce1..3c73a3334 100644
--- a/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/renderers/EdgeMenu.test.tsx
+++ b/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/renderers/EdgeMenu.test.tsx
@@ -3,7 +3,7 @@
 
 import React from 'react';
 import { render } from '@botframework-composer/test-utils';
-import { DialogGroup, SDKKinds } from '@bfc/shared';
+import { DialogGroup } from '@bfc/shared';
 
 import { EdgeMenu } from '../../../src/adaptive-flow-editor/renderers/EdgeMenu';
 import { createActionMenu } from '../../../src/adaptive-flow-editor/renderers/EdgeMenu/createSchemaMenu';
@@ -16,42 +16,17 @@ describe('<EdgeMenu>', () => {
 });
 
 describe('createActionMenu()', () => {
-  fit('Should disable an action kind if its included in forceDisabledActions', () => {
-    const menuItems = createActionMenu(
-      () => null,
-      { isSelfHosted: false, enablePaste: true },
-      [
-        {
-          kind: SDKKinds.BeginSkill,
-          reason: 'Cannot call a skill from another skill',
-        },
-      ],
-      {
-        [SDKKinds.BeginDialog]: {
-          label: 'Begin skill',
-          submenu: [SDKKinds.BeginSkill],
-        },
-      }
-    );
-    const sdkBeginSkill = menuItems.find((item) => item.key === SDKKinds.BeginSkill);
-
-    expect(sdkBeginSkill).toBeDefined();
-    if (sdkBeginSkill) {
-      expect(sdkBeginSkill.disabled).toBeTruthy();
-    }
-  });
-
   it('options.enablePaste should control Paste button state.', () => {
-    const menuItems1 = createActionMenu(() => null, { isSelfHosted: false, enablePaste: true }, []);
+    const menuItems1 = createActionMenu(() => null, { isSelfHosted: false, enablePaste: true });
     expect(menuItems1.findIndex((x) => x.key === 'Paste')).toEqual(0);
     expect(menuItems1[0].disabled).toBeFalsy();
 
-    const menuItems2 = createActionMenu(() => null, { isSelfHosted: false, enablePaste: false }, []);
+    const menuItems2 = createActionMenu(() => null, { isSelfHosted: false, enablePaste: false });
     expect(menuItems2[0].disabled).toBeTruthy();
   });
 
   it('should return builtin $kinds.', () => {
-    const menuItemsHosted = createActionMenu(() => null, { isSelfHosted: true, enablePaste: true }, []);
+    const menuItemsHosted = createActionMenu(() => null, { isSelfHosted: true, enablePaste: true });
     expect(menuItemsHosted.findIndex((x) => x.key === DialogGroup.RESPONSE)).toBeTruthy();
   });
 
@@ -59,7 +34,6 @@ describe('createActionMenu()', () => {
     const menuItemsWithoutCustomActions = createActionMenu(
       () => null,
       { isSelfHosted: false, enablePaste: false },
-      [],
       {},
       []
     );
@@ -72,7 +46,6 @@ describe('createActionMenu()', () => {
     const withCustomActions = createActionMenu(
       () => null,
       { isSelfHosted: false, enablePaste: false },
-      [],
       {},
       customActions
     );
diff --git a/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/stubs/ShellApiStub.ts b/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/stubs/ShellApiStub.ts
index 9620c153c..5d96545a2 100644
--- a/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/stubs/ShellApiStub.ts
+++ b/Composer/packages/adaptive-flow/__tests__/adaptive-flow-editor/stubs/ShellApiStub.ts
@@ -12,6 +12,8 @@ export const ShellApiStub: ShellApi = {
   saveDialog: fn,
   saveData: fnPromise,
   navTo: fn,
+  onOpenDialog: fnPromise,
+  createQnATrigger: fn,
   onFocusSteps: fn,
   onFocusEvent: fn,
   onSelect: fn,
diff --git a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/AdaptiveFlowEditor.tsx b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/AdaptiveFlowEditor.tsx
index a52d914eb..3aaadb355 100644
--- a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/AdaptiveFlowEditor.tsx
+++ b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/AdaptiveFlowEditor.tsx
@@ -153,7 +153,7 @@ const VisualDesigner: React.FC<VisualDesignerProps> = ({ onFocus, onBlur, schema
             data-testid="visualdesigner-container"
           >
             <SelectionContext.Provider value={selectionContext}>
-              <MarqueeSelection isDraggingConstrainedToRoot selection={selection} styles={marqueeStyles}>
+              <MarqueeSelection selection={selection} styles={marqueeStyles}>
                 <ZoomZone flowZoomRate={flowZoomRate} focusedId={focusedId} updateFlowZoomRate={updateFlowZoomRate}>
                   <div
                     className="flow-editor-container"
diff --git a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/hooks/useEditorEventApi.ts b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/hooks/useEditorEventApi.ts
index 69a070283..9e501804e 100644
--- a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/hooks/useEditorEventApi.ts
+++ b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/hooks/useEditorEventApi.ts
@@ -48,10 +48,10 @@ export const useEditorEventApi = (
   const { selectedIds, setSelectedIds, selectableElements } = selectionContext;
 
   const {
+    onOpenDialog,
     onFocusSteps,
     onFocusEvent,
     onCopy: onClipboardChange,
-    navTo,
     saveData: onChange,
     undo,
     redo,
@@ -158,7 +158,7 @@ export const useEditorEventApi = (
         break;
       case NodeEventTypes.OpenDialog:
         handler = ({ callee }) => {
-          navTo(callee);
+          onOpenDialog(callee);
           announce(ScreenReaderMessage.DialogOpened);
         };
         break;
diff --git a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/EdgeMenu.tsx b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/EdgeMenu.tsx
index e75b18649..4480a5434 100644
--- a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/EdgeMenu.tsx
+++ b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/EdgeMenu.tsx
@@ -7,7 +7,7 @@ import { useContext, useState } from 'react';
 import formatMessage from 'format-message';
 import { DefinitionSummary } from '@bfc/shared';
 import { TooltipHost, DirectionalHint } from 'office-ui-fabric-react/lib/Tooltip';
-import { useMenuConfig } from '@bfc/extension-client';
+import { useMenuConfig, MenuUISchema } from '@bfc/extension-client';
 
 // TODO: leak of visual-sdk domain (EdgeAddButtonSize)
 import { EdgeAddButtonSize } from '../../../adaptive-flow-renderer/constants/ElementSizes';
@@ -51,7 +51,7 @@ export const EdgeMenu: React.FC<EdgeMenuProps> = ({ id, onClick }) => {
     setMenuSelected(menuSelected);
   };
 
-  const { menuSchema, forceDisabledActions } = useMenuConfig();
+  const menuSchema: MenuUISchema = useMenuConfig();
   const menuItems = createActionMenu(
     (item) => {
       if (!item) return;
@@ -61,7 +61,6 @@ export const EdgeMenu: React.FC<EdgeMenuProps> = ({ id, onClick }) => {
       isSelfHosted: selfHosted,
       enablePaste: Array.isArray(clipboardActions) && !!clipboardActions.length,
     },
-    forceDisabledActions,
     menuSchema,
     // Custom Action 'oneOf' arrays from schema file
     customSchemas.map((x) => x.oneOf).filter((oneOf) => Array.isArray(oneOf) && oneOf.length) as DefinitionSummary[][]
diff --git a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/createSchemaMenu.tsx b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/createSchemaMenu.tsx
index c208999d3..1215fad99 100644
--- a/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/createSchemaMenu.tsx
+++ b/Composer/packages/adaptive-flow/src/adaptive-flow-editor/renderers/EdgeMenu/createSchemaMenu.tsx
@@ -7,30 +7,16 @@ import {
   IContextualMenuItem,
   ContextualMenuItemType,
 } from 'office-ui-fabric-react/lib/components/ContextualMenu/ContextualMenu.types';
-import { NeutralColors } from '@uifabric/fluent-theme';
-import { SDKKinds, DefinitionSummary, DisabledMenuActions } from '@bfc/shared';
+import { SDKKinds, DefinitionSummary } from '@bfc/shared';
 import { FontIcon } from 'office-ui-fabric-react/lib/Icon';
 import formatMessage from 'format-message';
 import { MenuUISchema, MenuOptions } from '@bfc/extension-client';
 import set from 'lodash/set';
-import { ITooltipHostStyles, TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
 
 import { MenuEventTypes } from '../../constants/MenuTypes';
 
 import { menuOrderMap } from './defaultMenuOrder';
 
-const toolTipHostStyles: Partial<ITooltipHostStyles> = {
-  root: {
-    display: 'flex',
-    justifyContent: 'flex-start',
-    alignItems: 'center',
-    padding: '0px 7px',
-    height: '38px',
-    background: NeutralColors.gray30,
-    opacity: 0.3,
-  },
-};
-
 type ActionMenuItemClickHandler = (item?: IContextualMenuItem) => any;
 type ActionKindFilter = ($kind: SDKKinds) => boolean;
 
@@ -39,7 +25,6 @@ type MenuTree = { [key: string]: SDKKinds | MenuTree };
 const createBaseActionMenu = (
   menuSchema: MenuUISchema,
   onClick: ActionMenuItemClickHandler,
-  forceDisabledActions: DisabledMenuActions[],
   filter?: ActionKindFilter
 ): IContextualMenuItem[] => {
   const menuTree: MenuTree = Object.entries(menuSchema).reduce((result, [$kind, options]) => {
@@ -77,7 +62,7 @@ const createBaseActionMenu = (
           return order1 - order2;
         })
         .map((sublabelName) => buildMenuItemFromMenuTree(sublabelName, labelData[sublabelName]));
-      return createSubMenu(labelName, onClick, subMenuItems, forceDisabledActions);
+      return createSubMenu(labelName, onClick, subMenuItems);
     }
   };
 
@@ -189,41 +174,13 @@ interface ActionMenuOptions {
 const createSubMenu = (
   label: string,
   onClick: ActionMenuItemClickHandler,
-  subItems: IContextualMenuItem[],
-  forceDisabledActions: DisabledMenuActions[]
+  subItems: IContextualMenuItem[]
 ): IContextualMenuItem => {
-  const subMenuItems = subItems.map((subMenuItem: IContextualMenuItem) => {
-    let additionalProps: Partial<IContextualMenuItem> = {};
-    const disabledAction = forceDisabledActions.find((action) => action.kind === subMenuItem.key);
-    if (disabledAction) {
-      additionalProps = {
-        title: disabledAction.reason,
-        disabled: true,
-        onRender: (item) => {
-          const tooltipId = `tooltip-${disabledAction.kind}`;
-          return (
-            <TooltipHost
-              calloutProps={{ gapSpace: 0 }}
-              content={disabledAction.reason}
-              id={tooltipId}
-              styles={toolTipHostStyles}
-            >
-              {item.name}
-            </TooltipHost>
-          );
-        },
-      };
-    }
-    return {
-      ...subMenuItem,
-      ...additionalProps,
-    };
-  });
   return {
     key: label,
     text: label,
     subMenuProps: {
-      items: subMenuItems,
+      items: subItems,
       onItemClick: (e, itemData) => onClick(itemData),
     },
   };
@@ -232,7 +189,6 @@ const createSubMenu = (
 export const createActionMenu = (
   onClick: ActionMenuItemClickHandler,
   options: ActionMenuOptions,
-  forceDisabledActions: DisabledMenuActions[],
   menuSchema?: MenuUISchema,
   customActionGroups?: DefinitionSummary[][]
 ) => {
@@ -243,7 +199,6 @@ export const createActionMenu = (
   const baseMenuItems = createBaseActionMenu(
     menuOptions,
     onClick,
-    forceDisabledActions,
     options.isSelfHosted ? ($kind: SDKKinds) => $kind !== SDKKinds.LogAction : undefined
   );
   resultItems.push(...baseMenuItems);
@@ -262,7 +217,7 @@ export const createActionMenu = (
         submenuWithDuplicatedName.subMenuProps?.items.push(...customActionItems);
       } else {
         // Otherwise create a new submenu named as 'Custom Actions'.
-        resultItems.push(createSubMenu(customActionGroupName, onClick, customActionItems, []));
+        resultItems.push(createSubMenu(customActionGroupName, onClick, customActionItems));
       }
     }
   }
diff --git a/Composer/packages/adaptive-form/src/components/AdaptiveForm.tsx b/Composer/packages/adaptive-form/src/components/AdaptiveForm.tsx
index 5812bc2d4..c30f3c43c 100644
--- a/Composer/packages/adaptive-form/src/components/AdaptiveForm.tsx
+++ b/Composer/packages/adaptive-form/src/components/AdaptiveForm.tsx
@@ -7,7 +7,6 @@ import React from 'react';
 import { FormErrors, JSONSchema7, UIOptions } from '@bfc/extension-client';
 import ErrorBoundary from 'react-error-boundary';
 import formatMessage from 'format-message';
-import { FontSizes } from '@uifabric/fluent-theme';
 
 import AdaptiveFormContext from '../AdaptiveFormContext';
 
@@ -16,6 +15,12 @@ import FormTitle from './FormTitle';
 import ErrorInfo from './ErrorInfo';
 import { LoadingTimeout } from './LoadingTimeout';
 
+const styles = {
+  errorLoading: css`
+    padding: 18px;
+  `,
+};
+
 export interface AdaptiveFormProps {
   errors?: string | FormErrors | string[] | FormErrors[];
   schema?: JSONSchema7;
@@ -27,56 +32,43 @@ export interface AdaptiveFormProps {
   onChange: (value: any) => void;
 }
 
-const schemaLoadErrorStyle = css`
-  display: flex;
-  align-items: center;
-  justify-content: center;
-  height: 100%;
-  font-size: ${FontSizes.size14};
-`;
-
 export const AdaptiveForm: React.FC<AdaptiveFormProps> = function AdaptiveForm(props) {
   const { errors, focusedTab, formData, schema, uiOptions, onChange, onFocusedTab } = props;
 
-  if (!formData && !schema) {
+  if (!formData || !schema) {
     return (
-      <div css={schemaLoadErrorStyle}>
-        <LoadingTimeout timeout={2000}>
-          <p>
-            {formatMessage('{type} could not be loaded', {
-              type: formData ? formatMessage('Schema') : formatMessage('Dialog data'),
-            })}
-          </p>
-        </LoadingTimeout>
-      </div>
+      <LoadingTimeout timeout={2000}>
+        <div css={styles.errorLoading}>
+          {formatMessage('{type} could not be loaded', {
+            type: formData ? formatMessage('Schema') : formatMessage('Dialog data'),
+          })}
+        </div>
+      </LoadingTimeout>
     );
   }
 
-  if (schema) {
-    return (
-      <ErrorBoundary FallbackComponent={ErrorInfo}>
-        <AdaptiveFormContext.Provider value={{ focusedTab, onFocusedTab, baseSchema: schema }}>
-          <FormTitle
-            formData={formData}
-            id={formData.$designer?.id || 'unknown'}
-            schema={schema}
-            uiOptions={uiOptions}
-            onChange={(newData) => onChange({ ...formData, ...newData })}
-          />
-          <SchemaField
-            definitions={schema?.definitions}
-            depth={-1}
-            id={formData.$designer?.id ? `root[${formData.$designer?.id}]` : 'root'}
-            name="root"
-            rawErrors={errors}
-            schema={schema}
-            uiOptions={uiOptions}
-            value={formData}
-            onChange={onChange}
-          />
-        </AdaptiveFormContext.Provider>
-      </ErrorBoundary>
-    );
-  }
-  return null;
+  return (
+    <ErrorBoundary FallbackComponent={ErrorInfo}>
+      <AdaptiveFormContext.Provider value={{ focusedTab, onFocusedTab, baseSchema: schema }}>
+        <FormTitle
+          formData={formData}
+          id={formData.$designer?.id || 'unknown'}
+          schema={schema}
+          uiOptions={uiOptions}
+          onChange={(newData) => onChange({ ...formData, ...newData })}
+        />
+        <SchemaField
+          definitions={schema?.definitions}
+          depth={-1}
+          id={formData.$designer?.id ? `root[${formData.$designer?.id}]` : 'root'}
+          name="root"
+          rawErrors={errors}
+          schema={schema}
+          uiOptions={uiOptions}
+          value={formData}
+          onChange={onChange}
+        />
+      </AdaptiveFormContext.Provider>
+    </ErrorBoundary>
+  );
 };
diff --git a/Composer/packages/client/__tests__/components/BotRuntimeController/emulatorOpenButton.test.tsx b/Composer/packages/client/__tests__/components/BotRuntimeController/emulatorOpenButton.test.tsx
deleted file mode 100644
index e33e17736..000000000
--- a/Composer/packages/client/__tests__/components/BotRuntimeController/emulatorOpenButton.test.tsx
+++ /dev/null
@@ -1,64 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-import { fireEvent, act } from '@botframework-composer/test-utils';
-
-import { OpenEmulatorButton } from '../../../src/components/BotRuntimeController/OpenEmulatorButton';
-import { botEndpointsState, botStatusState, settingsState } from '../../../src/recoilModel';
-import { BotStatus } from '../../../src/constants';
-import { renderWithRecoil } from '../../testUtils';
-
-const mockCallEmulator = jest.fn();
-
-jest.mock('../../../src/utils/navigation', () => {
-  return {
-    openInEmulator: mockCallEmulator,
-  };
-});
-
-jest.mock('office-ui-fabric-react/lib/Button', () => ({
-  ActionButton: ({ onClick, children }) => (
-    <button data-testid="button" onClick={onClick}>
-      {children}
-    </button>
-  ),
-  IconButton: ({ onClick, children }) => (
-    <button data-testid="iconButton" onClick={onClick}>
-      {children}
-    </button>
-  ),
-}));
-
-jest.mock('office-ui-fabric-react/lib/Tooltip', () => ({
-  TooltipHost: ({ children }) => <div>{children}</div>,
-}));
-
-const projectId = '123.abc';
-
-const initialState = ({ currentStatus = BotStatus.connected } = {}) => ({ set }) => {
-  set(botStatusState(projectId), currentStatus);
-  set(botEndpointsState, { [projectId]: 'http://open-in-emulator/api/messages' });
-  set(settingsState(projectId), {});
-};
-
-describe('<OpenEmulatorButton />', () => {
-  it('should show the button to open emulator', async () => {
-    mockCallEmulator.mockImplementationOnce((url) => {
-      expect(url).toBeDefined();
-    });
-    const { findByTestId } = renderWithRecoil(<OpenEmulatorButton projectId={projectId} />, initialState());
-    const button = await findByTestId('button');
-    act(() => {
-      fireEvent.click(button);
-    });
-  });
-
-  it('should not show the button if the status is not `BotStatus.connected`', () => {
-    const { container } = renderWithRecoil(
-      <OpenEmulatorButton projectId={projectId} />,
-      initialState({ currentStatus: BotStatus.pending })
-    );
-    expect(container).not.toHaveTextContent('Test in Emulator');
-  });
-});
diff --git a/Composer/packages/client/__tests__/components/CreationFlow/index.test.tsx b/Composer/packages/client/__tests__/components/CreationFlow/index.test.tsx
index e1b4d8e32..8117a3475 100644
--- a/Composer/packages/client/__tests__/components/CreationFlow/index.test.tsx
+++ b/Composer/packages/client/__tests__/components/CreationFlow/index.test.tsx
@@ -87,6 +87,7 @@ describe('<CreationFlow/>', () => {
       description: '',
       location: expectedLocation,
       name: 'EchoBot-1',
+      qnaKbUrls: undefined,
       schemaUrl: '',
       templateId: 'EchoBot',
     });
diff --git a/Composer/packages/client/__tests__/components/TestController/emulatorOpenButton.test.tsx b/Composer/packages/client/__tests__/components/TestController/emulatorOpenButton.test.tsx
new file mode 100644
index 000000000..9526e17d5
--- /dev/null
+++ b/Composer/packages/client/__tests__/components/TestController/emulatorOpenButton.test.tsx
@@ -0,0 +1,56 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import * as React from 'react';
+import { render, fireEvent } from '@botframework-composer/test-utils';
+
+import { EmulatorOpenButton } from '../../../src/components/TestController/emulatorOpenButton';
+import { BotStatus } from '../../../src/constants';
+
+describe('<EmulatorOpenButton />', () => {
+  it('should show the button to open emulator', () => {
+    const onClick = jest.fn(() => {});
+    const { container, getByText } = render(
+      <EmulatorOpenButton
+        botEndpoint={'http://localhost:3979/api/messages'}
+        botStatus={BotStatus.connected}
+        hidden={false}
+        onClick={onClick}
+      />
+    );
+
+    expect(container).toHaveTextContent('Test in Emulator');
+
+    const button = getByText('Test in Emulator');
+    fireEvent.click(button);
+    expect(onClick).toBeCalledTimes(1);
+  });
+
+  it('should hidden the button if set hidden', () => {
+    const onClick = jest.fn(() => {});
+    const { container } = render(
+      <EmulatorOpenButton
+        hidden
+        botEndpoint={'http://localhost:3979/api/messages'}
+        botStatus={BotStatus.connected}
+        onClick={onClick}
+      />
+    );
+
+    expect(container).not.toHaveTextContent('Test in Emulator');
+  });
+
+  it('should show the button if the bot status is not connected', () => {
+    const onClick = jest.fn(() => {});
+    const { container } = render(
+      <EmulatorOpenButton
+        botEndpoint={'http://localhost:3979/api/messages'}
+        botStatus={BotStatus.publishing}
+        hidden={false}
+        onClick={onClick}
+      />
+    );
+
+    expect(container).not.toHaveTextContent('Test in Emulator');
+  });
+});
diff --git a/Composer/packages/client/__tests__/components/BotRuntimeController/errorCallout.test.tsx b/Composer/packages/client/__tests__/components/TestController/errorCallout.test.tsx
similarity index 91%
rename from Composer/packages/client/__tests__/components/BotRuntimeController/errorCallout.test.tsx
rename to Composer/packages/client/__tests__/components/TestController/errorCallout.test.tsx
index 1d6e33c6a..a2a7411c3 100644
--- a/Composer/packages/client/__tests__/components/BotRuntimeController/errorCallout.test.tsx
+++ b/Composer/packages/client/__tests__/components/TestController/errorCallout.test.tsx
@@ -4,7 +4,7 @@
 import * as React from 'react';
 import { render, fireEvent, getByText } from '@botframework-composer/test-utils';
 
-import { ErrorCallout } from '../../../src/components/BotRuntimeController/errorCallout';
+import { ErrorCallout } from '../../../src/components/TestController/errorCallout';
 
 describe('<ErrorCallout />', () => {
   it('should render the <ErrorCallout />', () => {
diff --git a/Composer/packages/client/__tests__/components/BotRuntimeController/errorInfo.test.tsx b/Composer/packages/client/__tests__/components/TestController/errorInfo.test.tsx
similarity index 87%
rename from Composer/packages/client/__tests__/components/BotRuntimeController/errorInfo.test.tsx
rename to Composer/packages/client/__tests__/components/TestController/errorInfo.test.tsx
index 63fe4b8c6..e6b70e9b3 100644
--- a/Composer/packages/client/__tests__/components/BotRuntimeController/errorInfo.test.tsx
+++ b/Composer/packages/client/__tests__/components/TestController/errorInfo.test.tsx
@@ -4,7 +4,7 @@
 import * as React from 'react';
 import { render, fireEvent } from '@botframework-composer/test-utils';
 
-import { ErrorInfo } from '../../../src/components/BotRuntimeController/errorInfo';
+import { ErrorInfo } from '../../../src/components/TestController/errorInfo';
 
 describe('<ErrorInfo />', () => {
   it('should render <ErrorInfo />', () => {
diff --git a/Composer/packages/client/__tests__/components/BotRuntimeController/loading.test.tsx b/Composer/packages/client/__tests__/components/TestController/loading.test.tsx
similarity index 88%
rename from Composer/packages/client/__tests__/components/BotRuntimeController/loading.test.tsx
rename to Composer/packages/client/__tests__/components/TestController/loading.test.tsx
index d21a08f44..005befb54 100644
--- a/Composer/packages/client/__tests__/components/BotRuntimeController/loading.test.tsx
+++ b/Composer/packages/client/__tests__/components/TestController/loading.test.tsx
@@ -4,7 +4,7 @@
 import * as React from 'react';
 import { render } from '@botframework-composer/test-utils';
 
-import { Loading } from '../../../src/components/BotRuntimeController/loading';
+import { Loading } from '../../../src/components/TestController/loading';
 import { BotStatus } from '../../../src/constants';
 
 describe('<Loading />', () => {
diff --git a/Composer/packages/client/__tests__/components/BotRuntimeController/publish-luis-modal.test.tsx b/Composer/packages/client/__tests__/components/TestController/publish-luis-modal.test.tsx
similarity index 93%
rename from Composer/packages/client/__tests__/components/BotRuntimeController/publish-luis-modal.test.tsx
rename to Composer/packages/client/__tests__/components/TestController/publish-luis-modal.test.tsx
index a14e54be3..dc4b18d62 100644
--- a/Composer/packages/client/__tests__/components/BotRuntimeController/publish-luis-modal.test.tsx
+++ b/Composer/packages/client/__tests__/components/TestController/publish-luis-modal.test.tsx
@@ -3,7 +3,7 @@
 import * as React from 'react';
 import { fireEvent } from '@botframework-composer/test-utils';
 
-import { PublishDialog } from '../../../src/components/BotRuntimeController/publishDialog';
+import { PublishDialog } from '../../../src/components/TestController/publishDialog';
 import { botDisplayNameState, settingsState, dispatcherState, currentProjectIdState } from '../../../src/recoilModel';
 import { renderWithRecoil } from '../../testUtils';
 jest.useFakeTimers();
diff --git a/Composer/packages/client/__tests__/components/createDialogModal.test.tsx b/Composer/packages/client/__tests__/components/createDialogModal.test.tsx
index c2c5fef15..1c5d5110c 100644
--- a/Composer/packages/client/__tests__/components/createDialogModal.test.tsx
+++ b/Composer/packages/client/__tests__/components/createDialogModal.test.tsx
@@ -17,7 +17,7 @@ describe('<CreateDialogModal/>', () => {
     return renderWithRecoil(
       <CreateDialogModal isOpen projectId={projectId} onDismiss={onDismissMock} onSubmit={onSubmitMock} />,
       ({ set }) => {
-        set(showCreateDialogModalState, true);
+        set(showCreateDialogModalState(projectId), true);
       }
     );
   }
diff --git a/Composer/packages/client/__tests__/components/design.test.tsx b/Composer/packages/client/__tests__/components/design.test.tsx
index e1c259473..f439076d5 100644
--- a/Composer/packages/client/__tests__/components/design.test.tsx
+++ b/Composer/packages/client/__tests__/components/design.test.tsx
@@ -42,11 +42,7 @@ describe('<ProjectTree/>', () => {
     const handleDeleteTrigger = jest.fn(() => {});
 
     const { findByTestId } = renderWithRecoil(
-      <ProjectTree
-        onBotDeleteDialog={handleDeleteDialog}
-        onDialogDeleteTrigger={handleDeleteTrigger}
-        onSelect={handleSelect}
-      />,
+      <ProjectTree onDeleteDialog={handleDeleteDialog} onDeleteTrigger={handleDeleteTrigger} onSelect={handleSelect} />,
       initRecoilState
     );
     const node = await findByTestId('EchoBot-1_Greeting');
diff --git a/Composer/packages/client/__tests__/components/header.test.tsx b/Composer/packages/client/__tests__/components/header.test.tsx
index c06ea8c6c..ee3c79446 100644
--- a/Composer/packages/client/__tests__/components/header.test.tsx
+++ b/Composer/packages/client/__tests__/components/header.test.tsx
@@ -5,40 +5,11 @@ import * as React from 'react';
 
 import { renderWithRecoil } from '../testUtils';
 import { Header } from '../../src/components/Header';
-import { useLocation } from '../../src/utils/hooks';
-
-jest.mock('../../src/utils/hooks');
 
 describe('<Header />', () => {
   it('should render the header', () => {
-    (useLocation as jest.Mock).mockImplementation(() => {
-      return { location: { pathname: 'http://server/home' } };
-    });
     const { container } = renderWithRecoil(<Header />);
-    expect(container).toHaveTextContent('Bot Framework Composer');
-  });
-
-  it('should not show the start bots widget in Home page', async () => {
-    (useLocation as jest.Mock).mockImplementation(() => {
-      return { location: { pathname: 'http://server/home' } };
-    });
-    const { queryByText } = renderWithRecoil(<Header />);
-    expect(queryByText('Start all bots')).toBeNull();
-  });
-
-  it('should show the start bots widget on design page', async () => {
-    (useLocation as jest.Mock).mockImplementation(() => {
-      return { location: { pathname: 'http://server/bot/1234/dialogs' } };
-    });
-    const result = renderWithRecoil(<Header />);
-    expect(result.queryByText('Start all bots')).not.toBeNull();
-  });
 
-  it('should show the start bots widget on settings page', async () => {
-    (useLocation as jest.Mock).mockImplementation(() => {
-      return { location: { pathname: 'http://server/bot/1234/settings' } };
-    });
-    const result = renderWithRecoil(<Header />);
-    expect(result.queryByText('Start all bots')).not.toBeNull();
+    expect(container).toHaveTextContent('Bot Framework Composer');
   });
 });
diff --git a/Composer/packages/client/__tests__/pages/notifications/diagnosticFilter.test.tsx b/Composer/packages/client/__tests__/components/notificationHeader.test.jsx
similarity index 53%
rename from Composer/packages/client/__tests__/pages/notifications/diagnosticFilter.test.tsx
rename to Composer/packages/client/__tests__/components/notificationHeader.test.jsx
index 54061f30e..61bbce9e1 100644
--- a/Composer/packages/client/__tests__/pages/notifications/diagnosticFilter.test.tsx
+++ b/Composer/packages/client/__tests__/components/notificationHeader.test.jsx
@@ -4,15 +4,16 @@
 import * as React from 'react';
 import { fireEvent, render } from '@botframework-composer/test-utils';
 
-import { DiagnosticFilter } from '../../../src/pages/diagnostics/DiagnosticFilter';
+import { NotificationHeader } from '../../src/pages/notifications/NotificationHeader';
 
-describe('<NotificationFilter/>', () => {
-  it('should render the DiagnosticFilter', () => {
+describe('<NotificationHeader/>', () => {
+  it('should render the NotificationHeader', () => {
     const mockOnChange = jest.fn(() => null);
-    const { container } = render(<DiagnosticFilter onChange={mockOnChange} />);
+    const { container } = render(<NotificationHeader onChange={mockOnChange} />);
 
+    expect(container).toHaveTextContent('Notifications');
     expect(container).toHaveTextContent('All');
-    const dropdown: any = container.querySelector('[data-testid="notifications-dropdown"]');
+    const dropdown = container.querySelector('[data-testid="notifications-dropdown"]');
     fireEvent.click(dropdown);
     const test = document.querySelector('.ms-Dropdown-callout');
     expect(test).toHaveTextContent('Error');
diff --git a/Composer/packages/client/__tests__/components/notificationList.test.jsx b/Composer/packages/client/__tests__/components/notificationList.test.jsx
new file mode 100644
index 000000000..cacac42a4
--- /dev/null
+++ b/Composer/packages/client/__tests__/components/notificationList.test.jsx
@@ -0,0 +1,44 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import * as React from 'react';
+import { render } from '@botframework-composer/test-utils';
+import formatMessage from 'format-message';
+
+import { NotificationList } from '../../src/pages/notifications/NotificationList';
+
+describe('<NotificationList/>', () => {
+  const items = [
+    {
+      id: 'Main.dialog',
+      severity: formatMessage('Error'),
+      type: 'dialog',
+      location: formatMessage('test1'),
+      message: formatMessage('error1'),
+      diagnostic: '',
+    },
+    {
+      id: 'Main.lu',
+      severity: formatMessage('Warning'),
+      type: 'lu',
+      location: formatMessage('test2'),
+      message: formatMessage('error2'),
+      diagnostic: '',
+    },
+    {
+      id: 'common.lg',
+      severity: formatMessage('Error'),
+      type: 'lg',
+      location: formatMessage('test3'),
+      message: formatMessage('error3'),
+      diagnostic: '',
+    },
+  ];
+  it('should render the NotificationList', () => {
+    const { container } = render(<NotificationList items={items} />);
+
+    expect(container).toHaveTextContent('test1');
+    expect(container).toHaveTextContent('test2');
+    expect(container).toHaveTextContent('test3');
+  });
+});
diff --git a/Composer/packages/client/__tests__/components/projecttree.test.tsx b/Composer/packages/client/__tests__/components/projecttree.test.tsx
index 98a4d2525..1185e61d9 100644
--- a/Composer/packages/client/__tests__/components/projecttree.test.tsx
+++ b/Composer/packages/client/__tests__/components/projecttree.test.tsx
@@ -42,13 +42,19 @@ const initRecoilStateMulti = ({ set }) => {
 
 describe('<ProjectTree/>', () => {
   it('should render the projecttree', async () => {
-    const { findByText } = renderWithRecoil(<ProjectTree onSelect={() => {}} />, initRecoilState);
+    const { findByText } = renderWithRecoil(
+      <ProjectTree onDeleteDialog={() => {}} onDeleteTrigger={() => {}} onSelect={() => {}} />,
+      initRecoilState
+    );
 
     await findByText('EchoBot-1');
   });
 
   it('should render the projecttree with multiple bots', async () => {
-    const { findAllByText, findByText } = renderWithRecoil(<ProjectTree onSelect={() => {}} />, initRecoilStateMulti);
+    const { findAllByText, findByText } = renderWithRecoil(
+      <ProjectTree onDeleteDialog={() => {}} onDeleteTrigger={() => {}} onSelect={() => {}} />,
+      initRecoilStateMulti
+    );
 
     await findAllByText('EchoBot-1');
     await findByText('EchoBot-1b');
@@ -56,10 +62,30 @@ describe('<ProjectTree/>', () => {
 
   it('should handle project tree item click', async () => {
     const mockFileSelect = jest.fn(() => null);
-    const component = renderWithRecoil(<ProjectTree onSelect={mockFileSelect} />, initRecoilState);
+    const component = renderWithRecoil(
+      <ProjectTree onDeleteDialog={() => {}} onDeleteTrigger={() => {}} onSelect={mockFileSelect} />,
+      initRecoilState
+    );
 
     const node = await component.findByTestId('EchoBot-1_Greeting');
     fireEvent.click(node);
     expect(mockFileSelect).toHaveBeenCalledTimes(1);
   });
+
+  it('fires the onSelectAll event', async () => {
+    const mockOnSelected = jest.fn();
+    const { findByText } = renderWithRecoil(
+      <ProjectTree
+        onDeleteDialog={() => {}}
+        onDeleteTrigger={() => {}}
+        onSelect={() => {}}
+        onSelectAllLink={mockOnSelected}
+      />,
+      initRecoilState
+    );
+
+    const node = await findByText('All');
+    fireEvent.click(node);
+    expect(mockOnSelected).toHaveBeenCalledTimes(1);
+  });
 });
diff --git a/Composer/packages/client/__tests__/components/skill.test.tsx b/Composer/packages/client/__tests__/components/skill.test.tsx
index 6855a4d25..cc3d93559 100644
--- a/Composer/packages/client/__tests__/components/skill.test.tsx
+++ b/Composer/packages/client/__tests__/components/skill.test.tsx
@@ -2,16 +2,44 @@
 // Licensed under the MIT License.
 
 import * as React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
+import { act, fireEvent, getByLabelText, getByTestId, getByText } from '@botframework-composer/test-utils';
+import { Skill } from '@bfc/shared';
 
-import httpClient from '../../src/utils/httpUtil';
+import httpClient from '../../src//utils/httpUtil';
+import SkillList from '../../src/pages/skills/skill-list';
 import { renderWithRecoil } from '../testUtils';
-import CreateSkillModal, { validateEndpoint, validateManifestUrl } from '../../src/components/CreateSkillModal';
-import { currentProjectIdState, settingsState } from '../../src/recoilModel';
+import CreateSkillModal, {
+  validateEndpoint,
+  validateManifestUrl,
+  validateName,
+} from '../../src/components/CreateSkillModal';
+import { currentProjectIdState, settingsState, skillsState } from '../../src/recoilModel';
+import Skills from '../../src/pages/skills';
 
 jest.mock('../../src//utils/httpUtil');
 
-jest.mock('../../src/components/Modal/dialogStyle', () => ({}));
+const skills: Skill[] = [
+  {
+    id: 'email-skill',
+    content: {},
+    manifestUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/manifest/manifest-1.0.json',
+    name: 'Email-Skill',
+    description: 'The Email skill provides email related capabilities and supports Office and Google calendars.',
+    endpointUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/api/messages',
+    msAppId: '79432da8-0f7e-4a16-8c23-ddbba30ae85d',
+    endpoints: [],
+  },
+  {
+    id: 'point-of-interest-skill',
+    content: {},
+    manifestUrl: 'https://hualxielearn2-snskill.azurewebsites.net/manifest/manifest-1.0.json',
+    name: 'Point Of Interest Skill',
+    description: 'The Point of Interest skill provides PoI search capabilities leveraging Azure Maps and Foursquare.',
+    endpointUrl: 'https://hualxielearn2-snskill.azurewebsites.net/api/messages',
+    msAppId: 'e2852590-ea71-4a69-9e44-e74b5b6cbe89',
+    endpoints: [],
+  },
+];
 
 let recoilInitState;
 const projectId = '123a.234';
@@ -20,26 +48,51 @@ describe('Skill page', () => {
   beforeEach(() => {
     recoilInitState = ({ set }) => {
       set(currentProjectIdState, projectId);
-
-      set(settingsState(projectId), {
-        luis: {
-          name: '',
-          authoringKey: '12345',
-          authoringEndpoint: 'testAuthoringEndpoint',
-          endpointKey: '12345',
-          endpoint: 'testEndpoint',
-          authoringRegion: 'westus',
-          defaultLanguage: 'en-us',
-          environment: 'composer',
-        },
-        qna: {
-          subscriptionKey: '12345',
-          qnaRegion: 'westus',
-          endpointKey: '',
-        },
-      });
+      set(skillsState(projectId), skills),
+        set(settingsState(projectId), {
+          luis: {
+            name: '',
+            authoringKey: '12345',
+            authoringEndpoint: 'testAuthoringEndpoint',
+            endpointKey: '12345',
+            endpoint: 'testEndpoint',
+            authoringRegion: 'westus',
+            defaultLanguage: 'en-us',
+            environment: 'composer',
+          },
+          qna: {
+            subscriptionKey: '12345',
+            qnaRegion: 'westus',
+            endpointKey: '',
+          },
+        });
     };
   });
+
+  it('can add a new skill', async () => {
+    const { baseElement } = renderWithRecoil(<Skills />, recoilInitState);
+
+    const button = getByText(baseElement, 'Connect to a new skill');
+    act(() => {
+      fireEvent.click(button);
+    });
+
+    const manifestUrl = getByLabelText(baseElement, 'Manifest url');
+    expect(manifestUrl).toBeTruthy();
+
+    const cancel = getByTestId(baseElement, 'SkillFormCancel');
+    act(() => {
+      fireEvent.click(cancel);
+    });
+  });
+});
+
+describe('<SkillList />', () => {
+  it('should render the SkillList', () => {
+    const { container } = renderWithRecoil(<SkillList projectId={projectId} />, recoilInitState);
+    expect(container).toHaveTextContent('Email-Skill');
+    expect(container).toHaveTextContent('Point Of Interest Skill');
+  });
 });
 
 describe('<SkillForm />', () => {
@@ -57,14 +110,10 @@ describe('<SkillForm />', () => {
 
     const urlInput = getByLabelText('Manifest url');
     act(() => {
-      fireEvent.change(urlInput, {
-        target: { value: 'https://onenote-dev.azurewebsites.net/manifests/OneNoteSync-2-1-preview-1-manifest.json' },
-      });
+      fireEvent.change(urlInput, { target: { value: skills[0].manifestUrl } });
     });
 
-    expect(urlInput.getAttribute('value')).toBe(
-      'https://onenote-dev.azurewebsites.net/manifests/OneNoteSync-2-1-preview-1-manifest.json'
-    );
+    expect(urlInput.getAttribute('value')).toBe(skills[0].manifestUrl);
 
     const submitButton = getByText('Confirm');
     act(() => {
@@ -95,6 +144,7 @@ describe('<SkillForm />', () => {
         formData,
         formDataErrors,
         projectId,
+        skills,
         setFormDataErrors,
         setValidationState,
         setSkillManifest,
@@ -110,6 +160,29 @@ describe('<SkillForm />', () => {
   });
 
   describe('validateManifestUrl', () => {
+    it('should set an error for duplicate skill manifest url', () => {
+      const formData = {
+        manifestUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/MANIFEST/MANIFEST-1.0.json',
+      };
+
+      validateManifestUrl({
+        formData,
+        formDataErrors,
+        projectId,
+        skills,
+        setFormDataErrors,
+        setValidationState,
+        setSkillManifest,
+        validationState,
+      });
+
+      expect(setFormDataErrors).toBeCalledWith(
+        expect.objectContaining({ manifestUrl: 'Duplicate skill manifest Url' })
+      );
+      expect(setSkillManifest).not.toBeCalled();
+      expect(setValidationState).not.toBeCalled();
+    });
+
     it('should set an error for a missing manifest url', () => {
       const formData = {};
 
@@ -117,6 +190,7 @@ describe('<SkillForm />', () => {
         formData,
         formDataErrors,
         projectId,
+        skills,
         setFormDataErrors,
         setValidationState,
         setSkillManifest,
@@ -136,6 +210,7 @@ describe('<SkillForm />', () => {
         formData,
         formDataErrors,
         projectId,
+        skills,
         setFormDataErrors,
         setValidationState,
         setSkillManifest,
@@ -173,6 +248,7 @@ describe('<SkillForm />', () => {
         formData,
         formDataErrors,
         projectId,
+        skills,
         setFormDataErrors,
         setValidationState,
         setSkillManifest,
@@ -202,6 +278,40 @@ describe('<SkillForm />', () => {
     });
   });
 
+  describe('validateName', () => {
+    it('should set error for invalid name', () => {
+      const formData = { name: 'Email Skill' };
+
+      validateName({
+        formData,
+        formDataErrors,
+        skills,
+        setFormDataErrors,
+        setValidationState,
+        validationState,
+      });
+
+      expect(setFormDataErrors).toBeCalledWith(
+        expect.objectContaining({ name: 'Name cannot include special characters or spaces' })
+      );
+    });
+
+    it('should set error for duplicate name', () => {
+      const formData = { name: 'email-skill' };
+
+      validateName({
+        formData,
+        formDataErrors,
+        skills,
+        setFormDataErrors,
+        setValidationState,
+        validationState,
+      });
+
+      expect(setFormDataErrors).toBeCalledWith(expect.objectContaining({ name: 'Duplicate skill name' }));
+    });
+  });
+
   describe('validateEndpoint', () => {
     it('should set an error for missing msAppId', () => {
       const formData = { endpointUrl: 'https://skill/api/messages' };
diff --git a/Composer/packages/client/__tests__/navItem.test.tsx b/Composer/packages/client/__tests__/navItem.test.tsx
index 0622938b1..85b561298 100644
--- a/Composer/packages/client/__tests__/navItem.test.tsx
+++ b/Composer/packages/client/__tests__/navItem.test.tsx
@@ -10,7 +10,7 @@ import { renderWithRecoil } from './testUtils';
 describe('<Header />', () => {
   it('should render a nav item', async () => {
     const { findByText } = renderWithRecoil(
-      <NavItem showTooltip disabled={false} iconName={''} labelName={'some nav item'} to={'/'} />
+      <NavItem exact showTooltip disabled={false} iconName={''} labelName={'some nav item'} to={'/'} />
     );
 
     await findByText(/some nav item/);
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/AppIdAndPassword.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/AppIdAndPassword.test.tsx
deleted file mode 100644
index 62d5d4a0b..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/AppIdAndPassword.test.tsx
+++ /dev/null
@@ -1,73 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { AppIdAndPassword } from '../../../src/pages/botProject/AppIdAndPassword';
-import { renderWithRecoilAndCustomDispatchers } from '../../testUtils';
-import { dispatcherState } from '../../../src/recoilModel';
-import { settingsState, currentProjectIdState } from '../../../src/recoilModel';
-
-const state = {
-  projectId: 'test',
-  settings: {
-    defaultLanguage: 'en-us',
-    languages: ['en-us', 'fr-fr'],
-  },
-};
-
-describe('App Id and Password', () => {
-  it('should submit settings', async () => {
-    const setSettingsMock = jest.fn();
-    const initRecoilState = ({ set }) => {
-      set(currentProjectIdState, state.projectId);
-      set(settingsState(state.projectId), state.settings);
-      set(dispatcherState, {
-        setSettings: setSettingsMock,
-      });
-    };
-    const { getByTestId } = renderWithRecoilAndCustomDispatchers(
-      <AppIdAndPassword projectId={state.projectId} />,
-      initRecoilState
-    );
-    const textField1 = getByTestId('MicrosoftAppId');
-    await act(async () => {
-      await fireEvent.change(textField1, {
-        target: { value: 'myMicrosoftAppId' },
-      });
-      await fireEvent.blur(textField1);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      defaultLanguage: 'en-us',
-      languages: ['en-us', 'fr-fr'],
-      luis: {
-        authoringKey: '',
-        authoringRegion: '',
-      },
-      qna: {
-        subscriptionKey: '',
-      },
-      MicrosoftAppId: 'myMicrosoftAppId',
-    });
-    const textField2 = getByTestId('MicrosoftPassword');
-    await act(async () => {
-      await fireEvent.change(textField2, {
-        target: { value: 'myMicrosoftPassword' },
-      });
-      await fireEvent.blur(textField2);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      defaultLanguage: 'en-us',
-      languages: ['en-us', 'fr-fr'],
-      luis: {
-        authoringKey: '',
-        authoringRegion: '',
-      },
-      qna: {
-        subscriptionKey: '',
-      },
-      MicrosoftAppPassword: 'myMicrosoftPassword',
-    });
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/BotLanguage.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/BotLanguage.test.tsx
deleted file mode 100644
index 646af0eee..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/BotLanguage.test.tsx
+++ /dev/null
@@ -1,51 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { act, fireEvent, within } from '@botframework-composer/test-utils';
-
-import { BotLanguage } from '../../../src/pages/botProject/BotLanguage';
-import { renderWithRecoilAndCustomDispatchers } from '../../testUtils';
-import { dispatcherState } from '../../../src/recoilModel';
-import { settingsState, currentProjectIdState } from '../../../src/recoilModel';
-
-const state = {
-  projectId: 'test',
-  settings: {
-    defaultLanguage: 'en-us',
-    languages: ['en-us', 'fr-fr'],
-  },
-};
-
-describe('Bot Language', () => {
-  it('should submit settings', () => {
-    const setSettingsMock = jest.fn();
-    const setLocaleMock = jest.fn();
-    const deleteLanguages = jest.fn();
-    const initRecoilState = ({ set }) => {
-      set(currentProjectIdState, state.projectId);
-      set(settingsState(state.projectId), state.settings);
-      set(dispatcherState, {
-        setSettings: setSettingsMock,
-        setLocale: setLocaleMock,
-        deleteLanguages: deleteLanguages,
-      });
-    };
-    const { getByTestId } = renderWithRecoilAndCustomDispatchers(
-      <BotLanguage projectId={state.projectId} />,
-      initRecoilState
-    );
-    const defaultLanguageContainer = getByTestId('defaultLanguage');
-    expect(within(defaultLanguageContainer).getByText('English (United States)')).toBeInTheDocument();
-    const setDefaultLanguage = getByTestId('setDefaultLanguage');
-    act(() => {
-      fireEvent.click(setDefaultLanguage);
-    });
-    expect(setLocaleMock).toBeCalledWith('fr-fr', 'test');
-    const remove = getByTestId('remove');
-    act(() => {
-      fireEvent.click(remove);
-    });
-    expect(deleteLanguages).toBeCalledWith({ languages: ['fr-fr'], projectId: 'test' });
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/DeleteBotButton.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/DeleteBotButton.test.tsx
deleted file mode 100644
index 9f38e3479..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/DeleteBotButton.test.tsx
+++ /dev/null
@@ -1,24 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-/* eslint-disable react-hooks/rules-of-hooks */
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { DeleteBotButton } from '../../../src/pages/botProject/DeleteBotButton';
-import { renderWithRecoil } from '../../testUtils';
-
-const state = {
-  projectId: 'test',
-};
-
-describe('Delete Bot Button', () => {
-  it('should render Delete Bot Button', () => {
-    const { getByText } = renderWithRecoil(<DeleteBotButton projectId={state.projectId} />);
-    const deleteButton = getByText('Delete');
-    act(() => {
-      fireEvent.click(deleteButton);
-    });
-    expect(getByText('Delete Bot')).toBeInTheDocument();
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/PublishTarget.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/PublishTarget.test.tsx
deleted file mode 100644
index aab833bf0..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/PublishTarget.test.tsx
+++ /dev/null
@@ -1,37 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-/* eslint-disable react-hooks/rules-of-hooks */
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { PublishTargets } from '../../../src/pages/botProject/PublishTargets';
-import { renderWithRecoilAndCustomDispatchers } from '../../testUtils';
-import { dispatcherState, publishTypesState } from '../../../src/recoilModel';
-const state = {
-  projectId: 'test',
-  publishTypes: [{ name: 'azureFunctionsPublish', description: 'Publish bot to Azure Functions (Preview)' }],
-};
-describe('Publish Target', () => {
-  const setPublishTargetsMock = jest.fn();
-  const initRecoilState = ({ set }) => {
-    set(dispatcherState, {
-      setPublishTargets: setPublishTargetsMock,
-      getPublishTargetTypes: () => {},
-    });
-    set(publishTypesState(state.projectId), [
-      { name: 'azureFunctionsPublish', description: 'Publish bot to Azure Functions (Preview)' },
-    ]);
-  };
-  it('should add new publish profile', () => {
-    const { getByTestId, getByText } = renderWithRecoilAndCustomDispatchers(
-      <PublishTargets projectId={state.projectId} />,
-      initRecoilState
-    );
-    const addNewPublishProfile = getByTestId('addNewPublishProfile');
-    act(() => {
-      fireEvent.click(addNewPublishProfile);
-    });
-    expect(getByText('Add a publish profile')).toBeInTheDocument();
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/RootBotExternalService.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/RootBotExternalService.test.tsx
deleted file mode 100644
index 6ce85e179..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/RootBotExternalService.test.tsx
+++ /dev/null
@@ -1,128 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { RootBotExternalService } from '../../../src/pages/botProject/RootBotExternalService';
-import { renderWithRecoilAndCustomDispatchers } from '../../testUtils';
-import { dispatcherState } from '../../../src/recoilModel';
-import {
-  settingsState,
-  currentProjectIdState,
-  projectMetaDataState,
-  botProjectIdsState,
-  dialogState,
-  luFilesState,
-} from '../../../src/recoilModel';
-
-const state = {
-  dialogs: [
-    {
-      content: {
-        recognizer: '',
-      },
-      id: 'dialog1',
-    },
-    {
-      content: {
-        recognizer: '',
-      },
-      id: 'dialog2',
-    },
-  ],
-  qnaFiles: [
-    {
-      content: '',
-      empty: true,
-      id: 'dialog1.en-us',
-    },
-  ],
-  luFiles: [
-    {
-      content: '',
-      empty: true,
-      id: 'dialog1.en-us',
-    },
-  ],
-  projectId: 'test',
-  settings: {},
-  projectMetaDataState: {
-    isRootBot: true,
-    isRemote: false,
-  },
-  botProjectIdsState: ['test'],
-};
-
-describe('Root Bot External Service', () => {
-  it('should submit settings', async () => {
-    const setSettingsMock = jest.fn();
-    const setQnASettingsMock = jest.fn();
-    const initRecoilState = ({ set }) => {
-      set(currentProjectIdState, state.projectId);
-      set(dialogState({ projectId: state.projectId, dialogId: state.dialogs[0].id }), state.dialogs[0]);
-      set(dialogState({ projectId: state.projectId, dialogId: state.dialogs[1].id }), state.dialogs[1]);
-      set(botProjectIdsState, state.botProjectIdsState);
-      set(luFilesState(state.projectId), state.luFiles);
-      set(projectMetaDataState(state.projectId), state.projectMetaDataState);
-      set(settingsState(state.projectId), state.settings);
-      set(dispatcherState, {
-        setSettings: setSettingsMock,
-        setQnASettings: setQnASettingsMock,
-      });
-    };
-    const { getByTestId } = renderWithRecoilAndCustomDispatchers(
-      <RootBotExternalService projectId={state.projectId} />,
-      initRecoilState
-    );
-    const textField1 = getByTestId('rootLUISKey');
-    await act(async () => {
-      await fireEvent.change(textField1, {
-        target: { value: 'myRootLUISKey' },
-      });
-      await fireEvent.blur(textField1);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      luis: {
-        authoringKey: 'myRootLUISKey',
-        authoringRegion: '',
-      },
-      qna: {
-        subscriptionKey: '',
-      },
-    });
-    const textField2 = getByTestId('rootLUISRegion');
-    await act(async () => {
-      await fireEvent.change(textField2, {
-        target: { value: 'myRootLUISRegion' },
-      });
-      await fireEvent.blur(textField2);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      luis: {
-        authoringKey: '',
-        authoringRegion: 'myRootLUISRegion',
-      },
-      qna: {
-        subscriptionKey: '',
-      },
-    });
-    const textField3 = getByTestId('QnASubscriptionKey');
-    await act(async () => {
-      await fireEvent.change(textField3, {
-        target: { value: 'myQnASubscriptionKey' },
-      });
-      await fireEvent.blur(textField3);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      luis: {
-        authoringKey: '',
-        authoringRegion: '',
-      },
-      qna: {
-        subscriptionKey: 'myQnASubscriptionKey',
-      },
-    });
-    expect(setQnASettingsMock).toBeCalledWith('test', 'myQnASubscriptionKey');
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/botProjectsSettings/SkillHostEndPoint.test.tsx b/Composer/packages/client/__tests__/pages/botProjectsSettings/SkillHostEndPoint.test.tsx
deleted file mode 100644
index c58b8b54f..000000000
--- a/Composer/packages/client/__tests__/pages/botProjectsSettings/SkillHostEndPoint.test.tsx
+++ /dev/null
@@ -1,54 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { SkillHostEndPoint } from '../../../src/pages/botProject/SkillHostEndPoint';
-import { renderWithRecoilAndCustomDispatchers } from '../../testUtils';
-import { dispatcherState } from '../../../src/recoilModel';
-import { settingsState, currentProjectIdState } from '../../../src/recoilModel';
-
-const state = {
-  projectId: 'test',
-  settings: {
-    defaultLanguage: 'en-us',
-    languages: ['en-us', 'fr-fr'],
-  },
-};
-
-describe('SkillHostEndPoint', () => {
-  it('should submit settings', async () => {
-    const setSettingsMock = jest.fn();
-    const initRecoilState = ({ set }) => {
-      set(currentProjectIdState, state.projectId);
-      set(settingsState(state.projectId), state.settings);
-      set(dispatcherState, {
-        setSettings: setSettingsMock,
-      });
-    };
-    const { getByTestId } = renderWithRecoilAndCustomDispatchers(
-      <SkillHostEndPoint projectId={state.projectId} />,
-      initRecoilState
-    );
-    const textField = getByTestId('SkillHostEndPointTextField');
-    await act(async () => {
-      await fireEvent.change(textField, {
-        target: { value: 'mySkillHostEndPoint' },
-      });
-      await fireEvent.blur(textField);
-    });
-    expect(setSettingsMock).toBeCalledWith('test', {
-      defaultLanguage: 'en-us',
-      languages: ['en-us', 'fr-fr'],
-      skillHostEndpoint: 'mySkillHostEndPoint',
-      luis: {
-        authoringKey: '',
-        authoringRegion: '',
-      },
-      qna: {
-        subscriptionKey: '',
-      },
-    });
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/design/Design.test.tsx b/Composer/packages/client/__tests__/pages/design/Design.test.tsx
index d3b12856a..a26cbeacc 100644
--- a/Composer/packages/client/__tests__/pages/design/Design.test.tsx
+++ b/Composer/packages/client/__tests__/pages/design/Design.test.tsx
@@ -10,14 +10,14 @@ import {
   schemasState,
   projectMetaDataState,
   botProjectFileState,
-  botDisplayNameState,
 } from '../../../src/recoilModel';
 import { undoFunctionState } from '../../../src/recoilModel/undo/history';
 import mockProjectResponse from '../../../src/recoilModel/dispatchers/__tests__/mocks/mockProjectResponse.json';
 import DesignPage from '../../../src/pages/design/DesignPage';
-import { SAMPLE_DIALOG } from '../../mocks/sampleDialog';
+import { SAMPLE_DIALOG, SAMPLE_DIALOG_2 } from '../../mocks/sampleDialog';
 
 const projectId = '12345.6789';
+const skillId = '56789.1234';
 const dialogId = SAMPLE_DIALOG.id;
 
 const initRecoilState = ({ set }) => {
@@ -28,12 +28,38 @@ const initRecoilState = ({ set }) => {
   set(projectMetaDataState(projectId), { isRootBot: true });
   set(botProjectFileState(projectId), { foo: 'bar' });
   set(undoFunctionState(projectId), { canUndo: () => false, canRedo: () => false });
-  set(botDisplayNameState(projectId), 'Root-Bot');
 };
 
-describe('Design page', () => {
+const initRecoilStateMulti = ({ set }) => {
+  set(currentProjectIdState, projectId);
+  set(botProjectIdsState, [projectId, skillId]);
+  set(dialogsSelectorFamily(projectId), [SAMPLE_DIALOG]);
+  set(dialogsSelectorFamily(skillId), [SAMPLE_DIALOG, SAMPLE_DIALOG_2]);
+  set(schemasState(projectId), mockProjectResponse.schemas);
+  set(schemasState(skillId), mockProjectResponse.schemas);
+  set(projectMetaDataState(projectId), { isRootBot: true });
+  set(botProjectFileState(projectId), { foo: 'bar' });
+  set(undoFunctionState(projectId), { canUndo: () => false, canRedo: () => false });
+  set(undoFunctionState(skillId), { canUndo: () => false, canRedo: () => false });
+};
+
+describe('publish page', () => {
   it('should render the design page (no skill)', () => {
-    const { container } = renderWithRecoil(<DesignPage dialogId={dialogId} projectId={projectId} />, initRecoilState);
-    expect(container).toBeDefined();
+    const { getAllByText, getByText } = renderWithRecoil(
+      <DesignPage dialogId={dialogId} projectId={projectId} />,
+      initRecoilState
+    );
+    getAllByText(SAMPLE_DIALOG.displayName);
+    getByText('Start Bot');
+  });
+
+  it('should render the design page (with skill)', () => {
+    const { getAllByText, getByText } = renderWithRecoil(
+      <DesignPage dialogId={dialogId} projectId={projectId} skillId={skillId} />,
+      initRecoilStateMulti
+    );
+    getAllByText(SAMPLE_DIALOG.displayName);
+    getAllByText(SAMPLE_DIALOG_2.displayName);
+    getByText('Start Bot');
   });
 });
diff --git a/Composer/packages/client/__tests__/pages/knowledge-base/QnAPage.test.tsx b/Composer/packages/client/__tests__/pages/knowledge-base/QnAPage.test.tsx
index 98edc46d0..a9b1a4000 100644
--- a/Composer/packages/client/__tests__/pages/knowledge-base/QnAPage.test.tsx
+++ b/Composer/packages/client/__tests__/pages/knowledge-base/QnAPage.test.tsx
@@ -27,7 +27,6 @@ answer
 
 const state = {
   projectId: 'test',
-  skillId: '',
   dialogs: [
     { id: '1', content: '', skills: [] },
     { id: '2', content: '', skills: [] },
@@ -70,7 +69,7 @@ const initRecoilState = ({ set }) => {
 describe('QnA page all up view', () => {
   it('should render QnA page table view', () => {
     const { getByTestId, getByText } = renderWithRecoil(
-      <TableView dialogId={'a'} projectId={state.projectId} skillId={state.skillId} />,
+      <TableView dialogId={'a'} projectId={state.projectId} />,
       initRecoilState
     );
     getByTestId('table-view');
@@ -78,10 +77,7 @@ describe('QnA page all up view', () => {
   });
 
   it('should render QnA page code editor', () => {
-    renderWithRecoil(
-      <CodeEditor dialogId={'a'} projectId={state.projectId} skillId={state.skillId} />,
-      initRecoilState
-    );
+    renderWithRecoil(<CodeEditor dialogId={'a'} projectId={state.projectId} />, initRecoilState);
   });
 
   it('should render QnA page', () => {
diff --git a/Composer/packages/client/__tests__/pages/notifications/diagnostics.test.tsx b/Composer/packages/client/__tests__/pages/notifications/diagnostics.test.tsx
deleted file mode 100644
index ffe2d9e7b..000000000
--- a/Composer/packages/client/__tests__/pages/notifications/diagnostics.test.tsx
+++ /dev/null
@@ -1,170 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-import { Range, Position } from '@bfc/shared';
-import { fireEvent } from '@botframework-composer/test-utils';
-
-import {
-  botDiagnosticsState,
-  botProjectIdsState,
-  currentProjectIdState,
-  dialogIdsState,
-  dialogState,
-  formDialogSchemaIdsState,
-  jsonSchemaFilesState,
-  lgFilesState,
-  luFilesState,
-  qnaFilesState,
-  schemasState,
-  settingsState,
-} from '../../../src/recoilModel';
-import mockProjectResponse from '../../../src/recoilModel/dispatchers/__tests__/mocks/mockProjectResponse.json';
-import Diagnostics from '../../../src/pages/diagnostics/Diagnostics';
-import { renderWithRecoil } from '../../testUtils/renderWithRecoil';
-
-const state = {
-  projectId: 'testproj',
-  dialogs: [
-    {
-      id: 'test',
-      content: { recognizer: {} },
-      luFile: 'test',
-      referredLuIntents: [],
-      skills: [`=settings.skill['Email-Skill'].endpointUrl`],
-      diagnostics: [
-        {
-          message: 'dialog expression error',
-          severity: 0,
-          source: 'test',
-        },
-      ],
-    },
-  ],
-  qnaFiles: [
-    {
-      content: `# ? tell a joke`,
-      id: 'test.en-us',
-      diagnostics: [
-        {
-          message: 'qna syntax error',
-          severity: 0,
-          source: 'test.en-us',
-          range: {
-            end: { character: 2, line: 7 },
-            start: { character: 0, line: 7 },
-          },
-        },
-      ],
-    },
-  ],
-  luFiles: [
-    {
-      content: 'test',
-      id: 'test.en-us',
-      intents: [
-        {
-          Body: '- test12345 ss',
-          Entities: [],
-          Name: 'test',
-          range: new Range(new Position(4, 0), new Position(7, 14)),
-        },
-      ],
-      diagnostics: [
-        {
-          message: 'lu syntax error',
-          severity: 0,
-          source: 'test.en-us',
-          range: {
-            end: { character: 2, line: 7 },
-            start: { character: 0, line: 7 },
-          },
-        },
-      ],
-    },
-  ],
-  lgFiles: [
-    {
-      content: 'test',
-      id: 'test.en-us',
-      templates: [
-        {
-          body: '- ${add(1,2)}',
-          name: 'bar',
-          range: new Range(new Position(0, 0), new Position(2, 14)),
-        },
-      ],
-      diagnostics: [
-        {
-          message: 'lg syntax error',
-          severity: 1,
-          source: 'test.en-us',
-          range: {
-            end: { character: 2, line: 13 },
-            start: { character: 0, line: 13 },
-          },
-        },
-      ],
-    },
-  ],
-  jsonSchemaFiles: [
-    {
-      id: 'schema1.json',
-      content: 'test',
-    },
-  ],
-  diagnostics: [
-    {
-      message: 'server error',
-      severity: 0,
-      source: 'server',
-    },
-  ],
-  settings: {
-    skill: {
-      'Email-Skill': {
-        manifestUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/manifest/manifest-1.0.json',
-        endpointUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/api/messages',
-        name: 'Email-Skill',
-      },
-    },
-  },
-  formDialogSchemas: [{ id: '1', content: '{}' }],
-};
-const mockNavigationTo = jest.fn();
-jest.mock('../../../src/utils/navigation', () => ({
-  navigateTo: (...args) => mockNavigationTo(...args),
-}));
-describe('<Diagnostics/>', () => {
-  const initRecoilState = ({ set }) => {
-    set(currentProjectIdState, state.projectId);
-    set(botProjectIdsState, [state.projectId]);
-    set(dialogIdsState(state.projectId), ['test']);
-    set(dialogState({ projectId: state.projectId, dialogId: 'test' }), state.dialogs[0]);
-    set(luFilesState(state.projectId), state.luFiles);
-    set(lgFilesState(state.projectId), state.lgFiles);
-    set(qnaFilesState(state.projectId), state.qnaFiles);
-    set(jsonSchemaFilesState(state.projectId), state.jsonSchemaFiles);
-    set(botDiagnosticsState(state.projectId), state.diagnostics);
-    set(settingsState(state.projectId), state.settings);
-    set(schemasState(state.projectId), mockProjectResponse.schemas);
-    set(
-      formDialogSchemaIdsState(state.projectId),
-      state.formDialogSchemas.map((fds) => fds.id)
-    );
-  };
-
-  it('should render the Diagnostics', () => {
-    const { container, getByText } = renderWithRecoil(
-      <Diagnostics projectId={state.projectId} skillId={state.projectId} />,
-      initRecoilState
-    );
-    expect(container).toHaveTextContent('Diagnostics');
-    fireEvent.doubleClick(getByText(/test.en-us.lg/));
-    expect(mockNavigationTo).toBeCalledWith('/bot/testproj/language-generation/test/edit#L=13');
-    fireEvent.doubleClick(getByText(/test.en-us.lu/));
-    expect(mockNavigationTo).nthCalledWith(2, '/bot/testproj/language-understanding/test/edit#L=7');
-    fireEvent.doubleClick(getByText(/test.en-us.qna/));
-    expect(mockNavigationTo).nthCalledWith(3, '/bot/testproj/knowledge-base/test/edit#L=7');
-  });
-});
diff --git a/Composer/packages/client/__tests__/pages/notifications/diagnosticList.test.tsx b/Composer/packages/client/__tests__/pages/notifications/useNotifications.test.tsx
similarity index 56%
rename from Composer/packages/client/__tests__/pages/notifications/diagnosticList.test.tsx
rename to Composer/packages/client/__tests__/pages/notifications/useNotifications.test.tsx
index 109dd25c9..d6d060c28 100644
--- a/Composer/packages/client/__tests__/pages/notifications/diagnosticList.test.tsx
+++ b/Composer/packages/client/__tests__/pages/notifications/useNotifications.test.tsx
@@ -2,21 +2,22 @@
 // Licensed under the MIT License.
 
 import * as React from 'react';
+import { RecoilRoot } from 'recoil';
+import { renderHook } from '@botframework-composer/test-utils/lib/hooks';
 import { Range, Position } from '@bfc/shared';
 
-import { renderWithRecoil } from '../../testUtils';
-import { DiagnosticList } from '../../../src/pages/diagnostics/DiagnosticList';
+import useNotifications from '../../../src/pages/notifications/useNotifications';
 import {
+  dialogsSelectorFamily,
+  luFilesState,
+  lgFilesState,
+  settingsState,
+  schemasState,
+  currentProjectIdState,
   botDiagnosticsState,
+  jsonSchemaFilesState,
   botProjectIdsState,
-  currentProjectIdState,
-  dialogIdsState,
   formDialogSchemaIdsState,
-  jsonSchemaFilesState,
-  lgFilesState,
-  luFilesState,
-  schemasState,
-  settingsState,
 } from '../../../src/recoilModel';
 import mockProjectResponse from '../../../src/recoilModel/dispatchers/__tests__/mocks/mockProjectResponse.json';
 
@@ -105,29 +106,50 @@ const state = {
   formDialogSchemas: [{ id: '1', content: '{}' }],
 };
 
-describe('<DiagnosticList/>', () => {
-  const initRecoilState = ({ set }) => {
-    set(currentProjectIdState, state.projectId);
-    set(botProjectIdsState, [state.projectId]);
-    set(dialogIdsState(state.projectId), []);
-    set(luFilesState(state.projectId), state.luFiles);
-    set(lgFilesState(state.projectId), state.lgFiles);
-    set(jsonSchemaFilesState(state.projectId), state.jsonSchemaFiles);
-    set(botDiagnosticsState(state.projectId), state.diagnostics);
-    set(settingsState(state.projectId), state.settings);
-    set(schemasState(state.projectId), mockProjectResponse.schemas);
-    set(
-      formDialogSchemaIdsState(state.projectId),
-      state.formDialogSchemas.map((fds) => fds.id)
-    );
-  };
+const initRecoilState = ({ set }) => {
+  set(currentProjectIdState, state.projectId);
+  set(botProjectIdsState, [state.projectId]);
+  set(dialogsSelectorFamily(state.projectId), state.dialogs);
+  set(luFilesState(state.projectId), state.luFiles);
+  set(lgFilesState(state.projectId), state.lgFiles);
+  set(jsonSchemaFilesState(state.projectId), state.jsonSchemaFiles);
+  set(botDiagnosticsState(state.projectId), state.diagnostics);
+  set(settingsState(state.projectId), state.settings);
+  set(schemasState(state.projectId), mockProjectResponse.schemas);
+  set(
+    formDialogSchemaIdsState(state.projectId),
+    state.formDialogSchemas.map((fds) => fds.id)
+  );
+};
+
+describe('useNotification hooks', () => {
+  let renderedResult;
+  beforeEach(() => {
+    const wrapper = (props: { children?: React.ReactNode }) => {
+      const { children } = props;
+      return <RecoilRoot initializeState={initRecoilState}>{children}</RecoilRoot>;
+    };
+
+    const { result } = renderHook(() => useNotifications(state.projectId), {
+      wrapper,
+    });
+    renderedResult = result;
+  });
+
+  it('should return notifications', () => {
+    expect(renderedResult.current.length).toBe(4);
+  });
+
+  it('should return filtered notifications', () => {
+    const wrapper = (props: { children?: React.ReactNode }) => {
+      const { children } = props;
+      return <RecoilRoot initializeState={initRecoilState}>{children}</RecoilRoot>;
+    };
+
+    const { result } = renderHook(() => useNotifications(state.projectId, 'Error'), {
+      wrapper,
+    });
 
-  it('should render the DiagnosticList', () => {
-    const { container } = renderWithRecoil(
-      <DiagnosticList showType="" skillId={state.projectId} onItemClick={jest.fn} />,
-      initRecoilState
-    );
-    expect(container).toHaveTextContent('server');
-    expect(container).toHaveTextContent('test.en-us.lg');
+    expect(result.current.length).toBe(2);
   });
 });
diff --git a/Composer/packages/client/__tests__/pages/publish/Publish.test.tsx b/Composer/packages/client/__tests__/pages/publish/Publish.test.tsx
index de0ca063f..38a25ad4e 100644
--- a/Composer/packages/client/__tests__/pages/publish/Publish.test.tsx
+++ b/Composer/packages/client/__tests__/pages/publish/Publish.test.tsx
@@ -9,16 +9,16 @@ import {
   publishTypesState,
   publishHistoryState,
   currentProjectIdState,
-  botProjectIdsState,
 } from '../../../src/recoilModel';
+import { CreatePublishTarget } from '../../../src/pages/publish/createPublishTarget';
+import { PublishStatusList } from '../../../src/pages/publish/publishStatusList';
+import { TargetList } from '../../../src/pages/publish/targetList';
 import Publish from '../../../src/pages/publish/Publish';
-import { PublishDialog } from '../../../src/pages/publish/PublishDialog';
-import { BotStatusList } from '../../../src/pages/publish/BotStatusList';
+import { PublishDialog } from '../../../src/pages/publish/publishDialog';
 
-const projectIds = ['rootTest', 'skillTest'];
-const rootState = {
-  projectId: 'rootTest',
-  botName: 'rootTest',
+const state = {
+  projectId: 'test',
+  botName: 'test',
   settings: {
     defaultLanguage: 'en-us',
     languages: ['en-us', 'fr-fr'],
@@ -52,118 +52,69 @@ const rootState = {
   ],
   publishHistory: {},
 };
-const skillState = {
-  projectId: 'skillTest',
-  botName: 'skillTest',
-  settings: {
-    defaultLanguage: 'en-us',
-    languages: ['en-us', 'fr-fr'],
-    publishTargets: [
-      {
-        name: 'profile2',
-        type: 'azurewebapp',
-        configuration: '{}',
-      },
-    ],
-  },
-  publishTypes: [
-    {
-      name: 'azurePublish',
-      description: 'azure publish',
-      instructions: 'plugin instruction',
-      extensionId: 'azurePublish',
-      schema: {
-        default: {
-          test: 'test',
-        },
-      },
-      features: {
-        history: true,
-        publish: true,
-        status: true,
-        rollback: true,
-        pull: true,
-      },
-    },
-  ],
-  publishHistory: {},
-};
+
 const initRecoilState = ({ set }) => {
-  set(currentProjectIdState, rootState.projectId);
-  set(botProjectIdsState, projectIds);
-  set(botDisplayNameState(rootState.projectId), rootState.botName);
-  set(publishTypesState(rootState.projectId), rootState.publishTypes);
-  set(publishHistoryState(rootState.projectId), rootState.publishHistory);
-  set(settingsState(rootState.projectId), rootState.settings);
-  set(botDisplayNameState(skillState.projectId), skillState.botName);
-  set(publishTypesState(skillState.projectId), skillState.publishTypes);
-  set(publishHistoryState(skillState.projectId), skillState.publishHistory);
-  set(settingsState(skillState.projectId), skillState.settings);
+  set(currentProjectIdState, state.projectId);
+  set(botDisplayNameState(state.projectId), state.botName);
+  set(publishTypesState(state.projectId), state.publishTypes);
+  set(publishHistoryState(state.projectId), state.publishHistory);
+  set(settingsState(state.projectId), state.settings);
 };
 
 describe('publish page', () => {
   it('should render status list in publish page', () => {
     const { getByText } = renderWithRecoil(
-      <BotStatusList
-        botPublishHistoryList={[]}
-        botPublishTypesList={[]}
-        changePublishTarget={jest.fn()}
-        items={[]}
-        projectId={rootState.projectId}
-        updateItems={jest.fn()}
-        updatePublishHistory={jest.fn()}
-        updateSelectedBots={jest.fn()}
-        onLogClick={jest.fn()}
-        onRollbackClick={jest.fn()}
-      />,
+      <PublishStatusList groups={[]} items={[]} updateItems={jest.fn()} onItemClick={jest.fn()} />,
       initRecoilState
     );
-    getByText('Bot');
+    getByText('Time');
     getByText('Date');
     getByText('Status');
   });
 
+  it('should render target list in publish page', () => {
+    const { getByText } = renderWithRecoil(
+      <TargetList
+        list={state.settings.publishTargets}
+        selectedTarget={'all'}
+        onDelete={jest.fn()}
+        onEdit={jest.fn()}
+        onSelect={jest.fn()}
+      />,
+      initRecoilState
+    );
+    getByText('profile1');
+  });
+
+  it('should render create profile dialog in publish page', () => {
+    const { getByText } = renderWithRecoil(
+      <CreatePublishTarget
+        closeDialog={jest.fn()}
+        current={null}
+        targets={state.settings.publishTargets}
+        types={state.publishTypes}
+        updateSettings={jest.fn()}
+      />,
+      initRecoilState
+    );
+    getByText('Name');
+    getByText('Publish Destination Type');
+    getByText('Publish Configuration');
+  });
+
   it('should render publish dialog when click publish', () => {
-    const selectedBots = [
-      {
-        id: 'rootTest',
-        name: 'rootTest',
-        publishTarget: 'profile1',
-        publishTargets: [
-          {
-            name: 'profile1',
-            type: 'azurewebapp',
-            configuration: '{}',
-          },
-        ],
-      },
-      {
-        id: 'skillTest',
-        name: 'skillTest',
-        publishTarget: 'profile2',
-        publishTargets: [
-          {
-            name: 'profile2',
-            type: 'azurewebapp',
-            configuration: '{}',
-          },
-        ],
-      },
-    ];
     const { getByText } = renderWithRecoil(
-      <PublishDialog items={selectedBots} onDismiss={jest.fn()} onSubmit={jest.fn()} />,
+      <PublishDialog target={state.settings.publishTargets[0]} onDismiss={jest.fn()} onSubmit={jest.fn()} />,
       initRecoilState
     );
     getByText('Publish');
     getByText('You are about to publish your bot to the profile below. Do you want to proceed?');
-    getByText('Bot');
-    getByText('Publish target');
-    getByText('Comments');
+    getByText('profile1');
   });
 
-  it('should include publish button and pull button in publish page', () => {
+  it('should include add button and publish button in publish page', () => {
     const { getByText } = renderWithRecoil(<Publish />, initRecoilState);
-    getByText('Publish selected bots');
-    getByText('Pull from selected profile');
+    getByText('Add new profile');
+    getByText('Publish to selected profile');
   });
 });
diff --git a/Composer/packages/client/__tests__/shell/triggerApi.test.tsx b/Composer/packages/client/__tests__/shell/triggerApi.test.tsx
index 4557f5df7..6ccd943fc 100644
--- a/Composer/packages/client/__tests__/shell/triggerApi.test.tsx
+++ b/Composer/packages/client/__tests__/shell/triggerApi.test.tsx
@@ -45,9 +45,12 @@ const state = {
 };
 
 describe('use triggerApi hooks', () => {
-  let createTriggerMock, result;
+  let selectToMock, updateDialogMock, createLgTemplatesMock, createLuIntentMock, result;
   beforeEach(() => {
-    createTriggerMock = jest.fn();
+    selectToMock = jest.fn();
+    updateDialogMock = jest.fn();
+    createLgTemplatesMock = jest.fn();
+    createLuIntentMock = jest.fn();
 
     const initRecoilState = ({ set }) => {
       set(currentProjectIdState, state.projectId);
@@ -58,7 +61,10 @@ describe('use triggerApi hooks', () => {
       set(schemasState(state.projectId), state.schemas);
       set(dispatcherState, (current: Dispatcher) => ({
         ...current,
-        createTrigger: createTriggerMock,
+        selectTo: selectToMock,
+        updateDialog: updateDialogMock,
+        createLgTemplates: createLgTemplatesMock,
+        createLuIntent: createLuIntentMock,
       }));
     };
 
@@ -83,7 +89,9 @@ describe('use triggerApi hooks', () => {
       triggerPhrases: '',
     };
     await result.current.createTrigger(dialogId, formData);
-    const arg = [state.projectId, dialogId, formData, true];
-    expect(createTriggerMock).toBeCalledWith(...arg);
+    expect(createLgTemplatesMock).toBeCalledTimes(1);
+    expect(updateDialogMock).toBeCalledTimes(1);
+    expect(createLgTemplatesMock).toBeCalledTimes(1);
+    expect(updateDialogMock).toBeCalledTimes(1);
   });
 });
diff --git a/Composer/packages/client/__tests__/testUtils/renderWithRecoil.tsx b/Composer/packages/client/__tests__/testUtils/renderWithRecoil.tsx
index 6d02164a2..9010ca7e8 100644
--- a/Composer/packages/client/__tests__/testUtils/renderWithRecoil.tsx
+++ b/Composer/packages/client/__tests__/testUtils/renderWithRecoil.tsx
@@ -16,13 +16,6 @@ export function renderWithRecoil(subject, initRecoilState: (mutableSnapshot: Mut
   );
 }
 
-export function renderWithRecoilAndCustomDispatchers(
-  subject,
-  initRecoilState: (mutableSnapshot: MutableSnapshot) => void = noop
-) {
-  return render(<RecoilRoot initializeState={initRecoilState}>{subject}</RecoilRoot>);
-}
-
 export function wrapWithRecoil(subject, initRecoilState: (mutableSnapshot: MutableSnapshot) => void = noop) {
   return (
     <RecoilRoot initializeState={initRecoilState}>
diff --git a/Composer/packages/client/src/components/AppComponents/RightPanel.tsx b/Composer/packages/client/src/components/AppComponents/RightPanel.tsx
index a3f48584b..bcf2bf306 100644
--- a/Composer/packages/client/src/components/AppComponents/RightPanel.tsx
+++ b/Composer/packages/client/src/components/AppComponents/RightPanel.tsx
@@ -5,13 +5,21 @@
 import { jsx, css } from '@emotion/core';
 import { useRecoilValue } from 'recoil';
 import { forwardRef } from 'react';
+// import formatMessage from 'format-message';
 
 import { RequireAuth } from '../RequireAuth';
 import { ErrorBoundary } from '../ErrorBoundary';
 import { Conversation } from '../Conversation';
+//import { ProjectTree } from '../ProjectTree/ProjectTree';
+//import { LeftRightSplit } from '../Split/LeftRightSplit';
 
 import Routes from './../../router';
-import { applicationErrorState, dispatcherState, currentProjectIdState } from './../../recoilModel';
+import {
+  applicationErrorState,
+  dispatcherState,
+  currentProjectIdState,
+  // currentModeState,
+} from './../../recoilModel';
 
 // -------------------- Styles -------------------- //
 
@@ -34,10 +42,13 @@ const content = css`
 
 const Content = forwardRef<HTMLDivElement>((props, ref) => <div css={content} {...props} ref={ref} />);
 
+// const SHOW_TREE = ['design'];
+
 export const RightPanel = () => {
   const applicationError = useRecoilValue(applicationErrorState);
   const { setApplicationLevelError, fetchProjectById } = useRecoilValue(dispatcherState);
   const projectId = useRecoilValue(currentProjectIdState);
+  //const currentMode = useRecoilValue(currentModeState);
 
   const conversation = (
     <Conversation>
@@ -53,7 +64,17 @@ export const RightPanel = () => {
         setApplicationLevelError={setApplicationLevelError}
       >
         <RequireAuth>
-          <div css={{ display: 'flex', flexDirection: 'row', label: 'MainPage' }}>{conversation}</div>
+          <div css={{ display: 'flex', flexDirection: 'row', label: 'MainPage' }}>
+            {/*
+            {SHOW_TREE.includes(currentMode) ? (
+              <LeftRightSplit initialLeftGridWidth="200px" minLeftPixels={200} minRightPixels={800}>
+                <ProjectTree regionName={formatMessage('Project tree')} showTriggers={currentMode === 'design'} />
+                {conversation}
+              </LeftRightSplit>
+            ) : ( */}
+            {conversation}
+            {/* })} */}
+          </div>
         </RequireAuth>
       </ErrorBoundary>
     </div>
diff --git a/Composer/packages/client/src/components/AppComponents/SideBar.tsx b/Composer/packages/client/src/components/AppComponents/SideBar.tsx
index 38580cf7c..40ca8de70 100644
--- a/Composer/packages/client/src/components/AppComponents/SideBar.tsx
+++ b/Composer/packages/client/src/components/AppComponents/SideBar.tsx
@@ -92,9 +92,9 @@ export const SideBar = () => {
               <NavItem
                 key={'NavLeftBar' + index}
                 disabled={link.disabled}
+                exact={link.exact}
                 iconName={link.iconName}
                 labelName={link.labelName}
-                match={link.match}
                 showTooltip={showTooltips(link)}
                 to={mapNavItemTo(link.to)}
               />
@@ -109,6 +109,7 @@ export const SideBar = () => {
             <NavItem
               key={'NavLeftBar' + index}
               disabled={link.disabled}
+              exact={link.exact}
               iconName={link.iconName}
               labelName={link.labelName}
               showTooltip={showTooltips(link)}
diff --git a/Composer/packages/client/src/components/BotProjectsSettingsIcon.tsx b/Composer/packages/client/src/components/BotProjectsSettingsIcon.tsx
deleted file mode 100644
index a7f5533b8..000000000
--- a/Composer/packages/client/src/components/BotProjectsSettingsIcon.tsx
+++ /dev/null
@@ -1,44 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import { FontSizes } from '@uifabric/fluent-theme';
-
-const color = (active: boolean, disabled: boolean) => {
-  return active ? '#000' : disabled ? '#999' : '#4f4f4f';
-};
-
-type BotProjectsSettingsIconProps = {
-  active: boolean;
-  disabled: boolean;
-};
-
-export const BotProjectsSettingsIcon: React.FC<BotProjectsSettingsIconProps> = (props) => {
-  const { active, disabled } = props;
-
-  return (
-    <svg
-      fill={color(active, disabled)}
-      style={{
-        padding: '8px 12px',
-        marginLeft: active ? '1px' : '4px',
-        marginRight: '12px',
-        boxSizing: 'border-box',
-        fontSize: `${FontSizes.size16}`,
-        width: '40px',
-        height: '32px',
-      }}
-      viewBox="0 0 16 15"
-      xmlns="http://www.w3.org/2000/svg"
-    >
-      <path
-        clipRule="evenodd"
-        d="M15.1,1.7l.3.7a.9.9,0,0,1,.3.6,2.506,2.506,0,0,1,.2.7,2.21,2.21,0,0,1,.1.8,5.028,5.028,0,0,1-.2,1.2,4.895,4.895,0,0,1-.4,1.1l-.7.9-.9.7-1.1.4L11.5,9h-.7L4.5,15.2l-.9.6-1,.2-1-.2a1.6,1.6,0,0,1-.8-.6,1.6,1.6,0,0,1-.6-.8,3.6,3.6,0,0,1-.2-1,3,3,0,0,1,.2-1,2.394,2.394,0,0,1,.6-.9L7.1,5.2A.4.4,0,0,1,7,4.9V4.5a5.028,5.028,0,0,1,.2-1.2,4.895,4.895,0,0,1,.4-1.1l.7-.9L9.2.6,10.3.2,11.5,0h.8l.7.2a.9.9,0,0,1,.6.3l.7.3L11.2,4l.8.8ZM11.5,8a3.5,3.5,0,0,0,1.4-.3A4.079,4.079,0,0,0,14,7a4.079,4.079,0,0,0,.7-1.1A3.5,3.5,0,0,0,15,4.5a4.328,4.328,0,0,0-.2-1.1L12,6.2,9.8,4l2.8-2.8L11.5,1a3.5,3.5,0,0,0-1.4.3A4.079,4.079,0,0,0,9,2a4.079,4.079,0,0,0-.7,1.1A3.5,3.5,0,0,0,8,4.5V5c.1.2.1.4.2.5L1.5,12.2l-.4.6a1.3,1.3,0,0,0-.1.6,1.3,1.3,0,0,0,.1.6,1,1,0,0,0,.4.5,1,1,0,0,0,.5.4H3.2l.6-.4,6.7-6.7L11,8Z"
-        fillRule="evenodd"
-      />
-    </svg>
-  );
-};
-
-export default BotProjectsSettingsIcon;
diff --git a/Composer/packages/client/src/components/BotRuntimeController/BotController.tsx b/Composer/packages/client/src/components/BotRuntimeController/BotController.tsx
deleted file mode 100644
index 506ff6b72..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/BotController.tsx
+++ /dev/null
@@ -1,194 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
-import { DefaultButton, IconButton } from 'office-ui-fabric-react/lib/Button';
-import { IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';
-import { useRecoilValue } from 'recoil';
-import formatMessage from 'format-message';
-import { css } from '@emotion/core';
-import { NeutralColors } from '@uifabric/fluent-theme';
-
-import {
-  buildConfigurationSelector,
-  dispatcherState,
-  runningBotsSelector,
-  allDiagnosticsSelectorFamily,
-} from '../../recoilModel';
-import { BotStatus } from '../../constants';
-import { useClickOutside } from '../../utils/hooks';
-
-import { BotControllerMenu } from './BotControllerMenu';
-import { useBotOperations } from './useBotOperations';
-import { BotRuntimeStatus } from './BotRuntimeStatus';
-
-const iconSectionContainer = css`
-  display: flex;
-  align-items: flex-end;
-  flex-direction: 'row';
-
-  :before {
-    content: '';
-    position: relative;
-    margin: auto 0px;
-    width: 1px;
-    background: ${NeutralColors.white};
-    height: 21px;
-  }
-`;
-
-const disabledStyle = css`
-  &:before {
-    opacity: 0.6;
-  }
-  pointer-events: none;
-`;
-
-const startPanelsContainer = css`
-  display: flex;
-  flex-direction: 'row';
-`;
-
-const transparentBackground = 'rgba(255, 255, 255, 0.5)';
-
-const BotController: React.FC = () => {
-  const runningBots = useRecoilValue(runningBotsSelector);
-  const projectCollection = useRecoilValue(buildConfigurationSelector);
-  const errors = useRecoilValue(allDiagnosticsSelectorFamily('Error'));
-  const [isControllerHidden, hideController] = useState(true);
-  const { onboardingAddCoachMarkRef } = useRecoilValue(dispatcherState);
-  const onboardRef = useCallback((startBot) => onboardingAddCoachMarkRef({ startBot }), []);
-  const [disableStartBots, setDisableOnStartBotsWidget] = useState(false);
-
-  const startPanelTarget = useRef(null);
-  const botControllerMenuTarget = useRef(null);
-
-  useClickOutside(
-    isControllerHidden ? null : [startPanelTarget, botControllerMenuTarget],
-    (event: React.MouseEvent<HTMLElement>) => {
-      hideController(true);
-      event.stopPropagation();
-    }
-  );
-
-  useEffect(() => {
-    if (projectCollection.length === 0 || errors.length) {
-      setDisableOnStartBotsWidget(true);
-      return;
-    }
-    setDisableOnStartBotsWidget(false);
-  }, [projectCollection, errors]);
-
-  const running = useMemo(() => !projectCollection.every(({ status }) => status === BotStatus.inactive), [
-    projectCollection,
-  ]);
-
-  const { startAllBots, stopAllBots } = useBotOperations();
-
-  const handleClick = () => {
-    if (!running) {
-      startAllBots();
-    } else {
-      stopAllBots();
-    }
-  };
-
-  const onSplitButtonClick = () => {
-    hideController(!isControllerHidden);
-  };
-
-  const buttonText = useMemo(() => {
-    if (running) {
-      return formatMessage('Stop all bots ({running}/{total} running)', {
-        running: runningBots.projectIds.length,
-        total: runningBots.totalBots,
-      });
-    }
-    return formatMessage('Start all bots');
-  }, [runningBots, running]);
-
-  const items = useMemo<IContextualMenuItem[]>(() => {
-    return projectCollection.map(({ name: displayName, projectId }) => ({ key: projectId, displayName, projectId }));
-  }, [projectCollection]);
-
-  return (
-    <React.Fragment>
-      {projectCollection.map(({ projectId }) => {
-        return <BotRuntimeStatus key={projectId} projectId={projectId} />;
-      })}
-      <div ref={botControllerMenuTarget} css={[startPanelsContainer]}>
-        <DefaultButton
-          primary
-          aria-roledescription={formatMessage('Bot Controller')}
-          disabled={disableStartBots}
-          iconProps={{
-            iconName: running ? 'CircleStopSolid' : 'Play',
-            styles: {
-              root: {
-                color: `${NeutralColors.white}`,
-              },
-            },
-          }}
-          menuAs={() => null}
-          styles={{
-            root: {
-              backgroundColor: '#3393DD',
-              display: 'flex',
-              alignItems: 'center',
-              minWidth: '200px',
-              flexDirection: 'row',
-            },
-            rootHovered: {
-              background: transparentBackground,
-            },
-            rootDisabled: {
-              opacity: 0.6,
-              backgroundColor: '#3393DD',
-              color: `${NeutralColors.white}`,
-              border: 'none',
-              font: '62px',
-            },
-          }}
-          onClick={handleClick}
-        >
-          <span>{buttonText}</span>
-        </DefaultButton>
-        <div ref={onboardRef} css={[iconSectionContainer, disableStartBots ? disabledStyle : '']}>
-          <IconButton
-            ariaDescription={formatMessage('Open start bots panel')}
-            disabled={disableStartBots}
-            iconProps={{
-              iconName: 'ProductList',
-            }}
-            styles={{
-              root: {
-                color: NeutralColors.white,
-                background: isControllerHidden ? '#3393DD' : transparentBackground,
-                selectors: {
-                  ':disabled .ms-Button-icon': {
-                    opacity: 0.6,
-                    backgroundColor: '#3393DD',
-                    color: `${NeutralColors.white}`,
-                  },
-                },
-              },
-              rootHovered: { background: transparentBackground, color: NeutralColors.white },
-            }}
-            title={formatMessage('Open start bots panel')}
-            onClick={onSplitButtonClick}
-          />
-        </div>
-      </div>
-      <BotControllerMenu
-        ref={startPanelTarget}
-        hidden={isControllerHidden}
-        items={items}
-        target={botControllerMenuTarget}
-      />
-    </React.Fragment>
-  );
-};
-
-export { BotController };
diff --git a/Composer/packages/client/src/components/BotRuntimeController/BotControllerMenu.tsx b/Composer/packages/client/src/components/BotRuntimeController/BotControllerMenu.tsx
deleted file mode 100644
index 88271606a..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/BotControllerMenu.tsx
+++ /dev/null
@@ -1,105 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { css, jsx } from '@emotion/core';
-import React from 'react';
-import { Callout, DirectionalHint } from 'office-ui-fabric-react/lib/Callout';
-import { DetailsList, DetailsListLayoutMode, IColumn } from 'office-ui-fabric-react/lib/DetailsList';
-import { IContextualMenuProps } from 'office-ui-fabric-react/lib/ContextualMenu';
-import { SelectionMode } from 'office-ui-fabric-react/lib/Utilities';
-import { FontWeights } from '@uifabric/styling';
-import { FontSizes } from '@uifabric/fluent-theme/lib/fluent';
-import formatMessage from 'format-message';
-
-import { BotRuntimeOperations } from './BotRuntimeOperations';
-import { BotStatusIndicator } from './BotStatusIndicator';
-import { OpenEmulatorButton } from './OpenEmulatorButton';
-
-const styles = {
-  container: css`
-    max-height: 500px;
-    overflow: auto;
-  `,
-  header: css`
-    margin: 18px 18px 0 18px;
-  `,
-  title: css`
-    font-weight: ${FontWeights.bold};
-    font-size: ${FontSizes.size18};
-  `,
-};
-
-const tableColumns: IColumn[] = [
-  {
-    key: 'control',
-    name: '',
-    minWidth: 20,
-    maxWidth: 20,
-    fieldName: 'control',
-    isRowHeader: false,
-    onRender: ({ projectId }) => {
-      return <BotRuntimeOperations projectId={projectId} />;
-    },
-  },
-  {
-    key: 'displayName',
-    name: formatMessage('Bot'),
-    minWidth: 150,
-    maxWidth: 150,
-    fieldName: 'displayName',
-    isRowHeader: true,
-  },
-  {
-    key: 'status',
-    name: formatMessage('Status'),
-    minWidth: 150,
-    isRowHeader: true,
-    onRender: (item: { displayName: string; projectId: string }) => {
-      return <BotStatusIndicator projectId={item.projectId} />;
-    },
-  },
-  {
-    key: 'emulator',
-    name: '',
-    minWidth: 200,
-    isRowHeader: true,
-    onRender: ({ projectId }) => {
-      return <OpenEmulatorButton projectId={projectId} />;
-    },
-  },
-];
-
-const BotControllerMenu = React.forwardRef<HTMLDivElement, IContextualMenuProps>((props, ref) => {
-  const { items, target, onDismiss, hidden } = props;
-  return (
-    <Callout
-      hideOverflow
-      setInitialFocus
-      directionalHint={DirectionalHint.bottomRightEdge}
-      hidden={hidden}
-      role="dialog"
-      target={target}
-      onDismiss={onDismiss}
-    >
-      <div ref={ref}>
-        <div css={styles.header}>
-          <div css={styles.title}>{formatMessage('Local bot runtime manager')}</div>
-          <p>{formatMessage('Start and stop local bot runtimes individually.')}</p>
-        </div>
-        <div css={styles.container}>
-          <DetailsList
-            columns={tableColumns}
-            compact={false}
-            getKey={(item) => item.id}
-            items={items}
-            layoutMode={DetailsListLayoutMode.justified}
-            selectionMode={SelectionMode.none}
-          />
-        </div>
-      </div>
-    </Callout>
-  );
-});
-
-export { BotControllerMenu };
diff --git a/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeOperations.tsx b/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeOperations.tsx
deleted file mode 100644
index eb0bf9558..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeOperations.tsx
+++ /dev/null
@@ -1,53 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import { IconButton } from 'office-ui-fabric-react/lib/Button';
-import { Spinner } from 'office-ui-fabric-react/lib/Spinner';
-import formatMessage from 'format-message';
-
-import { botStatusState } from '../../recoilModel';
-import { BotStatus } from '../../constants';
-
-import { useBotOperations } from './useBotOperations';
-
-interface BotRuntimeOperationsProps {
-  projectId: string;
-}
-
-const loadingSpinnerStyle = css`
-  margin-left: 8px;
-`;
-
-export const BotRuntimeOperations: React.FC<BotRuntimeOperationsProps> = ({ projectId }) => {
-  const currentBotStatus = useRecoilValue(botStatusState(projectId));
-  const { startSingleBot, stopSingleBot } = useBotOperations();
-
-  switch (currentBotStatus) {
-    case BotStatus.connected:
-      return (
-        <IconButton
-          aria-label={formatMessage('Stop Bot')}
-          iconProps={{ iconName: 'CircleStopSolid' }}
-          styles={{ root: { height: '20px' } }}
-          title={formatMessage('Stop Bot')}
-          onClick={() => stopSingleBot(projectId)}
-        />
-      );
-    case BotStatus.inactive:
-    case BotStatus.failed:
-      return (
-        <IconButton
-          aria-label={formatMessage('Start Bot')}
-          iconProps={{ iconName: 'Play' }}
-          styles={{ root: { height: '20px' } }}
-          title={formatMessage('Start Bot')}
-          onClick={() => startSingleBot(projectId)}
-        />
-      );
-    default:
-      return <Spinner css={loadingSpinnerStyle} />;
-  }
-};
diff --git a/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeStatus.tsx b/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeStatus.tsx
deleted file mode 100644
index d8dbb31d6..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/BotRuntimeStatus.tsx
+++ /dev/null
@@ -1,63 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { defaultPublishConfig } from '@bfc/shared';
-import { useEffect, useState } from 'react';
-import { useRecoilValue } from 'recoil';
-import * as React from 'react';
-
-import { BotStatus } from '../../constants';
-import { botStatusState, dispatcherState } from '../../recoilModel';
-import { useInterval } from '../../utils/hooks';
-
-import { useBotOperations } from './useBotOperations';
-
-const pollingInterval = 3000;
-
-export type BotRuntimeStatusProps = {
-  projectId: string;
-};
-
-export const BotRuntimeStatus = React.memo((props: BotRuntimeStatusProps) => {
-  const { projectId } = props;
-
-  const currentBotStatus = useRecoilValue(botStatusState(projectId));
-  const { getPublishStatus } = useRecoilValue(dispatcherState);
-  const [isRunning, setIntervalRunning] = useState(false);
-  const { startSingleBot, stopSingleBot } = useBotOperations();
-
-  useInterval(
-    () => {
-      getPublishStatus(projectId, defaultPublishConfig);
-    },
-    isRunning ? pollingInterval : null
-  );
-
-  useEffect(() => {
-    switch (currentBotStatus) {
-      case BotStatus.failed:
-        setIntervalRunning(false);
-        stopSingleBot(projectId);
-        break;
-      case BotStatus.published:
-        setIntervalRunning(false);
-        startSingleBot(projectId, true);
-        break;
-      case BotStatus.reloading:
-        setIntervalRunning(true);
-        break;
-
-      case BotStatus.connected: {
-        if (isRunning) {
-          setTimeout(() => {
-            getPublishStatus(projectId, defaultPublishConfig);
-          }, pollingInterval);
-        }
-        setIntervalRunning(false);
-        break;
-      }
-    }
-  }, [currentBotStatus]);
-
-  return null;
-});
diff --git a/Composer/packages/client/src/components/BotRuntimeController/BotStatusIndicator.tsx b/Composer/packages/client/src/components/BotRuntimeController/BotStatusIndicator.tsx
deleted file mode 100644
index 88145181d..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/BotStatusIndicator.tsx
+++ /dev/null
@@ -1,94 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import { useRef, useState, useMemo } from 'react';
-import { useRecoilValue } from 'recoil';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import formatMessage from 'format-message';
-import { SharedColors } from '@uifabric/fluent-theme';
-
-import { botRuntimeErrorState, botStatusState } from '../../recoilModel';
-import { BotStatus, BotStatusesCopy } from '../../constants';
-
-import { ErrorCallout } from './errorCallout';
-import { useBotOperations } from './useBotOperations';
-
-const botStatusContainer = css`
-  display: flex;
-  align-items: center;
-`;
-
-type BotStatusIndicatorProps = {
-  projectId: string;
-};
-
-export const BotStatusIndicator: React.FC<BotStatusIndicatorProps> = ({ projectId }) => {
-  const botStatus = useRecoilValue(botStatusState(projectId));
-  const botActionRef = useRef(null);
-  const botLoadErrorMsg = useRecoilValue(botRuntimeErrorState(projectId));
-  const [calloutVisible, setErrorCallout] = useState(false);
-  const { startSingleBot } = useBotOperations();
-  const [botStatusStyle, setBotStatusStyle] = useState({});
-
-  function dismissErrorDialog() {
-    setErrorCallout(false);
-  }
-
-  function openErrorDialog() {
-    setErrorCallout(true);
-  }
-
-  const onTryStartAgain = () => {
-    dismissErrorDialog();
-    startSingleBot(projectId);
-  };
-
-  const botStatusText = useMemo(() => {
-    if (botStatus === BotStatus.connected) {
-      setBotStatusStyle({
-        color: SharedColors.green10,
-      });
-    } else if (botStatus === BotStatus.failed) {
-      setBotStatusStyle({
-        color: SharedColors.red10,
-      });
-    } else {
-      setBotStatusStyle({
-        color: SharedColors.gray20,
-      });
-    }
-    return BotStatusesCopy[botStatus] ?? BotStatusesCopy.inactive;
-  }, [botStatus]);
-
-  return (
-    <div ref={botActionRef} css={botStatusContainer}>
-      <span aria-live={'assertive'} style={botStatusStyle}>
-        {botStatusText}
-      </span>
-      {botLoadErrorMsg?.message && (
-        <ActionButton
-          styles={{
-            root: {
-              color: '#0078d4',
-              height: '20px',
-            },
-          }}
-          onClick={() => {
-            openErrorDialog();
-          }}
-        >
-          <span>{formatMessage('See Details')}</span>
-        </ActionButton>
-      )}
-      <ErrorCallout
-        error={botLoadErrorMsg}
-        target={botActionRef.current}
-        visible={calloutVisible}
-        onDismiss={dismissErrorDialog}
-        onTry={onTryStartAgain}
-      />
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/components/BotRuntimeController/OpenEmulatorButton.tsx b/Composer/packages/client/src/components/BotRuntimeController/OpenEmulatorButton.tsx
deleted file mode 100644
index bc9e1cefd..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/OpenEmulatorButton.tsx
+++ /dev/null
@@ -1,49 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import formatMessage from 'format-message';
-import { ActionButton, IconButton } from 'office-ui-fabric-react/lib/Button';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Fragment } from 'react';
-import { useRecoilValue } from 'recoil';
-
-import { BotStatus } from '../../constants';
-import { botEndpointsState, botStatusState, dispatcherState } from '../../recoilModel';
-
-type OpenEmulatorButtonProps = {
-  projectId: string;
-};
-
-export const OpenEmulatorButton: React.FC<OpenEmulatorButtonProps> = ({ projectId }) => {
-  const { openBotInEmulator } = useRecoilValue(dispatcherState);
-  const currentBotStatus = useRecoilValue(botStatusState(projectId));
-  const botEndpoints = useRecoilValue(botEndpointsState);
-  const endpoint = botEndpoints[projectId];
-
-  const handleClick = () => {
-    openBotInEmulator(projectId);
-  };
-
-  return currentBotStatus === BotStatus.connected ? (
-    <TooltipHost
-      content={
-        <Fragment>
-          {endpoint}
-          <IconButton iconProps={{ iconName: 'copy' }} onClick={() => navigator.clipboard.writeText(endpoint)} />
-        </Fragment>
-      }
-    >
-      <ActionButton
-        iconProps={{
-          iconName: 'OpenInNewTab',
-        }}
-        styles={{ root: { height: '20px' } }}
-        onClick={handleClick}
-      >
-        {formatMessage('Test in Emulator')}
-      </ActionButton>
-    </TooltipHost>
-  ) : null;
-};
diff --git a/Composer/packages/client/src/components/BotRuntimeController/useBotOperations.ts b/Composer/packages/client/src/components/BotRuntimeController/useBotOperations.ts
deleted file mode 100644
index e61febadb..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/useBotOperations.ts
+++ /dev/null
@@ -1,116 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { IPublishConfig } from '@bfc/shared';
-import { useState } from 'react';
-import { useRecoilValue } from 'recoil';
-
-import { BotStatus } from '../../constants';
-import { dispatcherState, rootBotProjectIdSelector } from '../../recoilModel';
-import { botRuntimeOperationsSelector, buildConfigurationSelector } from '../../recoilModel/selectors';
-
-import { useStartedRuntimesTracker } from './useStartedRuntimesTracker';
-
-export function useBotOperations() {
-  const builderEssentials = useRecoilValue(buildConfigurationSelector);
-  const botRuntimeOperations = useRecoilValue(botRuntimeOperationsSelector);
-  const rootBotId = useRecoilValue(rootBotProjectIdSelector);
-  const [trackedProjectIds, setProjectsToTrack] = useState<string[]>([]);
-  const { updateSettingsForSkillsWithoutManifest, resetBotRuntimeError, setBotStatus } = useRecoilValue(
-    dispatcherState
-  );
-
-  const handleBotStart = async (
-    projectId: string,
-    config: IPublishConfig,
-    sensitiveSettings,
-    botBuildRequired: boolean
-  ) => {
-    resetBotRuntimeError(projectId);
-    setBotStatus(projectId, BotStatus.pending);
-    if (botBuildRequired) {
-      // Default recognizer
-      const matchedBuilder = builderEssentials.find(
-        ({ projectId: currentProjectId }) => projectId === currentProjectId
-      );
-      if (matchedBuilder?.dialogs) {
-        await botRuntimeOperations?.buildWithDefaultRecognizer(projectId, {
-          dialogs: matchedBuilder.dialogs,
-          config,
-        });
-      }
-    } else {
-      // Regex recognizer
-      await botRuntimeOperations?.startBot(projectId, sensitiveSettings);
-    }
-  };
-
-  const startRootBot = async (skipBuild?: boolean) => {
-    setProjectsToTrack([]);
-    await updateSettingsForSkillsWithoutManifest();
-    const { projectId, configuration, buildRequired, status, sensitiveSettings } = builderEssentials[0];
-    if (status !== BotStatus.connected) {
-      let isBuildRequired = buildRequired;
-      if (skipBuild) {
-        isBuildRequired = false;
-      }
-      handleBotStart(projectId, configuration, sensitiveSettings, isBuildRequired);
-    }
-  };
-
-  // Custom hook to make sure root bot is started after all skills have been started.
-  useStartedRuntimesTracker(() => {
-    startRootBot();
-  }, trackedProjectIds);
-
-  const startAllBots = async () => {
-    builderEssentials.forEach((bot) => {
-      setBotStatus(bot.projectId, BotStatus.queued);
-    });
-    const [, ...skillsBots] = builderEssentials;
-    if (skillsBots.length === 0) {
-      startRootBot();
-      return;
-    }
-
-    const trackProjects: string[] = skillsBots.map((skillBot) => skillBot.projectId);
-    setProjectsToTrack(trackProjects);
-    for (const botBuildConfig of skillsBots) {
-      if (botBuildConfig.status !== BotStatus.connected) {
-        const { projectId, configuration, buildRequired, sensitiveSettings } = botBuildConfig;
-        await handleBotStart(projectId, configuration, sensitiveSettings, buildRequired);
-      }
-    }
-  };
-
-  const stopAllBots = () => {
-    setProjectsToTrack([]);
-    builderEssentials.forEach(({ projectId }) => botRuntimeOperations?.stopBot(projectId));
-  };
-
-  const startSingleBot = (projectId: string, skipBuild: boolean | undefined = undefined) => {
-    if (projectId === rootBotId) {
-      startRootBot(skipBuild);
-    } else {
-      const botData = builderEssentials.find((builder) => builder.projectId === projectId);
-      if (botData) {
-        let isBuildRequired = botData?.buildRequired;
-        if (skipBuild) {
-          isBuildRequired = false;
-        }
-        handleBotStart(projectId, botData?.configuration, botData.sensitiveSettings, isBuildRequired);
-      }
-    }
-  };
-
-  const stopSingleBot = (projectId: string) => {
-    botRuntimeOperations?.stopBot(projectId);
-  };
-
-  return {
-    stopAllBots,
-    startAllBots,
-    startSingleBot,
-    stopSingleBot,
-  };
-}
diff --git a/Composer/packages/client/src/components/BotRuntimeController/useStartedRuntimesTracker.ts b/Composer/packages/client/src/components/BotRuntimeController/useStartedRuntimesTracker.ts
deleted file mode 100644
index 2b341dfc0..000000000
--- a/Composer/packages/client/src/components/BotRuntimeController/useStartedRuntimesTracker.ts
+++ /dev/null
@@ -1,23 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { MutableRefObject, useEffect, useRef } from 'react';
-import { useRecoilValue } from 'recoil';
-
-import { trackBotStatusesSelector } from '../../recoilModel';
-
-export function useStartedRuntimesTracker(postTrackedBotsStartedAction: () => void, trackedProjectIds: string[]) {
-  const savedCallback: MutableRefObject<Function | undefined> = useRef();
-  const areBotsStarting = useRecoilValue(trackBotStatusesSelector(trackedProjectIds));
-
-  // Remember the latest callback.
-  useEffect(() => {
-    savedCallback.current = postTrackedBotsStartedAction;
-  }, [postTrackedBotsStartedAction]);
-
-  useEffect(() => {
-    if (trackedProjectIds.length && !areBotsStarting && typeof savedCallback.current === 'function') {
-      savedCallback.current();
-    }
-  }, [areBotsStarting]);
-}
diff --git a/Composer/packages/client/src/components/CollapsableWrapper.tsx b/Composer/packages/client/src/components/CollapsableWrapper.tsx
deleted file mode 100644
index 36d08f683..000000000
--- a/Composer/packages/client/src/components/CollapsableWrapper.tsx
+++ /dev/null
@@ -1,40 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-/** @jsx jsx */
-import { css, jsx, SerializedStyles } from '@emotion/core';
-import React, { useState } from 'react';
-import { NeutralColors } from '@uifabric/fluent-theme';
-import { IconButton } from 'office-ui-fabric-react/lib/Button';
-
-type CollapsableComponentProps = {
-  title: string;
-  titleStyle: SerializedStyles;
-  containerStyle?: SerializedStyles;
-};
-
-const header = css`
-  display: flex;
-  margin-left: -8px;
-`;
-
-const defaultContainerStyle = css`
-  margin-bottom: 27px;
-`;
-
-export const CollapsableWrapper: React.FC<CollapsableComponentProps> = (props) => {
-  const [isCollapsed, setIsCollapsed] = useState<boolean>(false);
-  const { title, children, titleStyle, containerStyle = defaultContainerStyle } = props;
-  return (
-    <div css={containerStyle}>
-      <div data-is-focusable css={header}>
-        <IconButton
-          iconProps={{ iconName: isCollapsed ? 'ChevronRight' : 'ChevronDown' }}
-          styles={{ root: { color: NeutralColors.gray150 } }}
-          onClick={() => setIsCollapsed(!isCollapsed)}
-        />
-        <div css={titleStyle}>{title}</div>
-      </div>
-      {!isCollapsed && children}
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/components/Conversation.jsx b/Composer/packages/client/src/components/Conversation.jsx
index 982f1111f..6df21b6c1 100644
--- a/Composer/packages/client/src/components/Conversation.jsx
+++ b/Composer/packages/client/src/components/Conversation.jsx
@@ -10,6 +10,7 @@ const container = css`
   width: 100%;
   background-color: #ffffff;
   height: 100%;
+  overflow: auto;
   position: relative;
 `;
 
diff --git a/Composer/packages/client/src/components/CreateSkillModal.tsx b/Composer/packages/client/src/components/CreateSkillModal.tsx
index bb35c6713..cfe7b9534 100644
--- a/Composer/packages/client/src/components/CreateSkillModal.tsx
+++ b/Composer/packages/client/src/components/CreateSkillModal.tsx
@@ -11,11 +11,12 @@ import { Stack, StackItem } from 'office-ui-fabric-react/lib/Stack';
 import { TextField } from 'office-ui-fabric-react/lib/TextField';
 import { useRecoilValue } from 'recoil';
 import debounce from 'lodash/debounce';
+import { SkillSetting } from '@bfc/shared';
 import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
 
 import { addSkillDialog } from '../constants';
 import httpClient from '../utils/httpUtil';
-import { skillsStateSelector } from '../recoilModel';
+import { skillsState } from '../recoilModel';
 
 export interface SkillFormDataErrors {
   endpoint?: string;
@@ -29,7 +30,7 @@ export const msAppIdRegex = /^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A
 
 export interface CreateSkillModalProps {
   projectId: string;
-  onSubmit: (manifestUrl: string, endpointName: string) => void;
+  onSubmit: (data: SkillSetting) => void;
   onDismiss: () => void;
 }
 
@@ -63,6 +64,7 @@ export const validateManifestUrl = async ({
   formData,
   formDataErrors,
   projectId,
+  skills,
   setFormDataErrors,
   setValidationState,
   setSkillManifest,
@@ -75,6 +77,8 @@ export const validateManifestUrl = async ({
     setFormDataErrors({ ...errors, manifestUrl: formatMessage('Please input a manifest Url') });
   } else if (!urlRegex.test(manifestUrl)) {
     setFormDataErrors({ ...errors, manifestUrl: formatMessage('Url should start with http[s]://') });
+  } else if (skills.some((skill) => skill.manifestUrl.toLowerCase() === manifestUrl.toLowerCase())) {
+    setFormDataErrors({ ...errors, manifestUrl: formatMessage('Duplicate skill manifest Url') });
   } else {
     try {
       setValidationState({ ...validationState, manifestUrl: ValidationState.Validating });
@@ -93,13 +97,31 @@ export const validateManifestUrl = async ({
   }
 };
 
+export const validateName = ({
+  formData,
+  formDataErrors,
+  skills,
+  setFormDataErrors,
+  setValidationState,
+  validationState,
+}) => {
+  const { name } = formData;
+  const { name: _, ...errors } = formDataErrors;
+
+  if (name && !skillNameRegex.test(name)) {
+    setFormDataErrors({ ...errors, name: formatMessage('Name cannot include special characters or spaces') });
+  } else if (name && skills.some((skill) => skill.name.toLowerCase() === name.toLowerCase())) {
+    setFormDataErrors({ ...errors, name: formatMessage('Duplicate skill name') });
+  } else {
+    setFormDataErrors(errors);
+    setValidationState({ ...validationState, name: ValidationState.Validated });
+  }
+};
+
 export const CreateSkillModal: React.FC<CreateSkillModalProps> = ({ projectId, onSubmit, onDismiss }) => {
-  const skills = useRecoilValue(skillsStateSelector);
+  const skills = useRecoilValue(skillsState(projectId));
 
-  const [formData, setFormData] = useState<{ manifestUrl: string; endpointName: string }>({
-    manifestUrl: '',
-    endpointName: '',
-  });
+  const [formData, setFormData] = useState<Partial<SkillSetting>>({});
   const [formDataErrors, setFormDataErrors] = useState<SkillFormDataErrors>({});
   const [validationState, setValidationState] = useState({
     endpoint: ValidationState.NotValidated,
@@ -120,6 +142,7 @@ export const CreateSkillModal: React.FC<CreateSkillModalProps> = ({ projectId, o
     }));
   }, [skillManifest]);
 
+  const debouncedValidateName = useRef(debounce(validateName, 500)).current;
   const debouncedValidateManifestURl = useRef(debounce(validateManifestUrl, 500)).current;
 
   const validationHelpers = {
@@ -131,27 +154,38 @@ export const CreateSkillModal: React.FC<CreateSkillModalProps> = ({ projectId, o
     validationState,
   };
 
-  const handleManifestUrlChange = (_, currentManifestUrl = '') => {
-    // eslint-disable-next-line @typescript-eslint/no-unused-vars
-    const { manifestUrl, ...rest } = formData;
+  const handleManifestUrlChange = (_, manifestUrl = '') => {
+    const { msAppId, endpointUrl, ...rest } = formData;
     setValidationState((validationState) => ({
       ...validationState,
       manifestUrl: ValidationState.NotValidated,
       endpoint: ValidationState.NotValidated,
     }));
     debouncedValidateManifestURl({
-      formData: { manifestUrl: currentManifestUrl },
+      formData: { ...rest, manifestUrl },
       projectId,
       ...validationHelpers,
     });
     setFormData({
       ...rest,
-      manifestUrl: currentManifestUrl,
+      manifestUrl,
     });
     setSkillManifest(null);
     setSelectedEndpointKey(null);
   };
 
+  const handleNameChange = (_, name = '') => {
+    setValidationState((validationState) => ({ ...validationState, name: ValidationState.NotValidated }));
+    debouncedValidateName({
+      formData: { ...formData, name },
+      ...validationHelpers,
+    });
+    setFormData({
+      ...formData,
+      name,
+    });
+  };
+
   const handleEndpointUrlChange = (_, option?: IDropdownOption) => {
     if (option) {
       const { data, key } = option;
@@ -177,7 +211,7 @@ export const CreateSkillModal: React.FC<CreateSkillModalProps> = ({ projectId, o
       Object.values(validationState).every((validation) => validation === ValidationState.Validated) &&
       !Object.values(formDataErrors).some(Boolean)
     ) {
-      onSubmit(formData.manifestUrl, formData.endpointName);
+      onSubmit({ name: skillManifest.name, ...formData } as SkillSetting);
     }
   };
 
@@ -217,6 +251,12 @@ export const CreateSkillModal: React.FC<CreateSkillModalProps> = ({ projectId, o
                 }}
               />
             )}
+            <TextField
+              errorMessage={formDataErrors.name}
+              label={formatMessage('Custom name (optional)')}
+              value={formData.name || ''}
+              onChange={handleNameChange}
+            />
             <Label required>{formatMessage('Skill Endpoint')}</Label>
             <Dropdown
               disabled={!endpointOptions.length}
diff --git a/Composer/packages/client/src/components/CreationFlow/CreateOptions.tsx b/Composer/packages/client/src/components/CreationFlow/CreateOptions.tsx
index 231e8f7fd..184bc6a9b 100644
--- a/Composer/packages/client/src/components/CreationFlow/CreateOptions.tsx
+++ b/Composer/packages/client/src/components/CreationFlow/CreateOptions.tsx
@@ -24,10 +24,8 @@ import { BotTemplate } from '@bfc/shared';
 import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
 import { NeutralColors } from '@uifabric/fluent-theme';
 import { RouteComponentProps } from '@reach/router';
-import { useRecoilValue } from 'recoil';
 
 import { DialogCreationCopy, EmptyBotTemplateId, QnABotTemplateId } from '../../constants';
-import { creationFlowTypeState } from '../../recoilModel';
 
 // -------------------- Styles -------------------- //
 
@@ -118,8 +116,6 @@ export function CreateOptions(props: CreateOptionsProps) {
   const { templates, onDismiss, onNext } = props;
   const [currentTemplate, setCurrentTemplate] = useState('');
   const [emptyBotKey, setEmptyBotKey] = useState('');
-  const creationFlowType = useRecoilValue(creationFlowTypeState);
-
   const selection = useMemo(() => {
     return new Selection({
       onSelectionChanged: () => {
@@ -256,14 +252,20 @@ export function CreateOptions(props: CreateOptionsProps) {
     },
   ];
 
-  const choiceGroupTitle = creationFlowType === 'Skill' ? '' : formatMessage('Choose how to create your bot');
-  const dialogWrapperProps =
-    creationFlowType === 'Skill' ? DialogCreationCopy.CREATE_NEW_SKILLBOT : DialogCreationCopy.CREATE_NEW_BOT;
-
   return (
     <Fragment>
-      <DialogWrapper isOpen {...dialogWrapperProps} dialogType={DialogTypes.CreateFlow} onDismiss={onDismiss}>
-        <ChoiceGroup label={choiceGroupTitle} options={choiceOptions} selectedKey={option} onChange={handleChange} />
+      <DialogWrapper
+        isOpen
+        {...DialogCreationCopy.CREATE_NEW_BOT}
+        dialogType={DialogTypes.CreateFlow}
+        onDismiss={onDismiss}
+      >
+        <ChoiceGroup
+          label={formatMessage('Choose how to create your bot')}
+          options={choiceOptions}
+          selectedKey={option}
+          onChange={handleChange}
+        />
         <h3 css={listHeader}>{formatMessage('Examples')}</h3>
         <div css={detailListContainer} data-is-scrollable="true">
           <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>
diff --git a/Composer/packages/client/src/components/CreationFlow/CreationFlow.tsx b/Composer/packages/client/src/components/CreationFlow/CreationFlow.tsx
index 9e705d161..6e54bc576 100644
--- a/Composer/packages/client/src/components/CreationFlow/CreationFlow.tsx
+++ b/Composer/packages/client/src/components/CreationFlow/CreationFlow.tsx
@@ -113,7 +113,7 @@ const CreationFlow: React.FC<CreationFlowProps> = () => {
     openProject(botFolder);
   };
 
-  const handleCreateNew = async (formData, templateId: string) => {
+  const handleCreateNew = async (formData, templateId: string, qnaKbUrls?: string[]) => {
     const newBotData = {
       templateId: templateId || '',
       name: formData.name,
@@ -121,6 +121,7 @@ const CreationFlow: React.FC<CreationFlowProps> = () => {
       location: formData.location,
       schemaUrl: formData.schemaUrl,
       appLocale,
+      qnaKbUrls,
       templateDir: formData.templateDir,
       eTag: formData.eTag,
       urlSuffix: formData.urlSuffix,
diff --git a/Composer/packages/client/src/components/CreationFlow/DefineConversation.tsx b/Composer/packages/client/src/components/CreationFlow/DefineConversation.tsx
index e7f13973b..b98f66eb2 100644
--- a/Composer/packages/client/src/components/CreationFlow/DefineConversation.tsx
+++ b/Composer/packages/client/src/components/CreationFlow/DefineConversation.tsx
@@ -19,7 +19,6 @@ import { useRecoilValue } from 'recoil';
 import { DialogCreationCopy, QnABotTemplateId, nameRegex } from '../../constants';
 import { FieldConfig, useForm } from '../../hooks/useForm';
 import { StorageFolder } from '../../recoilModel/types';
-import { creationFlowTypeState } from '../../recoilModel';
 import { createNotification } from '../../recoilModel/dispatchers/notification';
 import { ImportSuccessNotificationWrapper } from '../ImportModal/ImportSuccessNotification';
 import { dispatcherState } from '../../recoilModel';
@@ -103,7 +102,6 @@ const DefineConversation: React.FC<DefineConversationProps> = (props) => {
     createFolder,
     updateFolder,
   } = props;
-  const creationFlowType = useRecoilValue(creationFlowTypeState);
   const files = focusedStorageFolder?.children ?? [];
   const writable = focusedStorageFolder.writable;
   const getDefaultName = () => {
@@ -258,13 +256,6 @@ const DefineConversation: React.FC<DefineConversationProps> = (props) => {
     updateField('location', location);
   }, [focusedStorageFolder]);
 
-  const dialogWrapperProps =
-    creationFlowType === 'Skill'
-      ? DialogCreationCopy.DEFINE_CONVERSATION_OBJECTIVE
-      : isImported
-      ? DialogCreationCopy.IMPORT_BOT_PROJECT
-      : DialogCreationCopy.DEFINE_BOT_PROJECT;
-
   const locationSelectContent = useMemo(() => {
     return (
       <LocationSelectContent
@@ -276,10 +267,11 @@ const DefineConversation: React.FC<DefineConversationProps> = (props) => {
       />
     );
   }, [focusedStorageFolder]);
+  const dialogCopy = isImported ? DialogCreationCopy.IMPORT_BOT_PROJECT : DialogCreationCopy.DEFINE_BOT_PROJECT;
 
   return (
     <Fragment>
-      <DialogWrapper isOpen {...dialogWrapperProps} dialogType={DialogTypes.CreateFlow} onDismiss={onDismiss}>
+      <DialogWrapper isOpen {...dialogCopy} dialogType={DialogTypes.CreateFlow} onDismiss={onDismiss}>
         <form onSubmit={handleSubmit}>
           <input style={{ display: 'none' }} type="submit" />
           <Stack horizontal styles={stackinput} tokens={{ childrenGap: '2rem' }}>
diff --git a/Composer/packages/client/src/components/DiagnosticsHeader.tsx b/Composer/packages/client/src/components/DiagnosticsHeader.tsx
deleted file mode 100644
index 389923398..000000000
--- a/Composer/packages/client/src/components/DiagnosticsHeader.tsx
+++ /dev/null
@@ -1,32 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import React from 'react';
-import { useRecoilValue } from 'recoil';
-
-import { allDiagnosticsSelectorFamily } from '../recoilModel';
-
-import { ErrorInfo } from './BotRuntimeController/errorInfo';
-import { WarningInfo } from './BotRuntimeController/warningInfo';
-
-const iconPosition = css`
-  padding-top: 6px;
-`;
-
-type DiagnosticsHeaderProps = {
-  onClick?: () => void;
-};
-
-export const DiagnosticsHeader: React.FC<DiagnosticsHeaderProps> = React.memo(({ onClick = () => {} }) => {
-  const errors = useRecoilValue(allDiagnosticsSelectorFamily('Error'));
-  const warnings = useRecoilValue(allDiagnosticsSelectorFamily('Warning'));
-
-  return (
-    <div css={iconPosition}>
-      <WarningInfo count={warnings.length} hidden={!warnings.length} onClick={onClick} />
-      <ErrorInfo count={errors.length} hidden={!errors.length} onClick={onClick} />
-    </div>
-  );
-});
diff --git a/Composer/packages/client/src/components/EditableField.tsx b/Composer/packages/client/src/components/EditableField.tsx
index ace6c7e24..e130b40f1 100644
--- a/Composer/packages/client/src/components/EditableField.tsx
+++ b/Composer/packages/client/src/components/EditableField.tsx
@@ -171,8 +171,12 @@ const EditableField: React.FC<EditableFieldProps> = (props) => {
     fieldRef.current?.blur();
   };
 
+  // single line, press Enter to submit
+  // multipe line, press Enter to submit, Shift+Enter get a new line,
   const handleOnKeyDown = (e) => {
-    if (e.key === 'Enter' && expanded) {
+    const enterOnField = e.key === 'Enter' && hasFocus;
+    const multilineEnter = multiline ? !e.shiftKey : true;
+    if (enterOnField && multilineEnter) {
       handleCommit();
     }
     if (e.key === 'Escape') {
diff --git a/Composer/packages/client/src/components/Header.tsx b/Composer/packages/client/src/components/Header.tsx
index 7634c5051..882ecbca5 100644
--- a/Composer/packages/client/src/components/Header.tsx
+++ b/Composer/packages/client/src/components/Header.tsx
@@ -5,12 +5,9 @@
 import { jsx, css } from '@emotion/core';
 import formatMessage from 'format-message';
 import { IconButton, IButtonStyles } from 'office-ui-fabric-react/lib/Button';
-import { TeachingBubble } from 'office-ui-fabric-react/lib/TeachingBubble';
-import { DirectionalHint } from 'office-ui-fabric-react/lib/Callout';
-import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
-import { useCallback, useState, Fragment, useMemo, useEffect } from 'react';
-import { NeutralColors, SharedColors, FontSizes } from '@uifabric/fluent-theme';
+import { useCallback, Fragment } from 'react';
 import { useRecoilValue } from 'recoil';
+import { SharedColors } from '@uifabric/fluent-theme';
 import { FontWeights } from 'office-ui-fabric-react/lib/Styling';
 
 import {
@@ -19,35 +16,30 @@ import {
   botDisplayNameState,
   localeState,
   currentProjectIdState,
-  settingsState,
 } from '../recoilModel';
 import composerIcon from '../images/composerIcon.svg';
 import { AppUpdaterStatus } from '../constants';
-import { useLocation } from '../utils/hooks';
 
-import { languageListTemplates } from './MultiLanguage';
 import { NotificationButton } from './Notifications/NotificationButton';
-import { BotController } from './BotRuntimeController/BotController';
-export const actionButton = css`
-  font-size: ${FontSizes.size18};
-  margin-top: 2px;
-`;
 
 // -------------------- Styles -------------------- //
 
 const headerContainer = css`
-  position: relative;
   background: ${SharedColors.cyanBlue10};
   height: 50px;
   display: flex;
-  flex-direction: row;
-  align-items: center;
+  justify-content: space-between;
+  padding-right: 20px;
+  margin: auto;
+`;
+
+const logo = css`
+  display: flex;
 `;
 
 const title = css`
-  margin-left: 20px;
   font-weight: ${FontWeights.semibold};
-  font-size: ${FontSizes.size16};
+  font-size: 16px;
   color: #fff;
 `;
 
@@ -55,11 +47,6 @@ const botName = css`
   margin-left: 20px;
   font-size: 16px;
   color: #fff;
-  border-radius: 19px;
-  background: #3393dd;
-  padding-left: 10px;
-  padding-right: 10px;
-  cursor: pointer;
 `;
 
 const divider = css`
@@ -68,31 +55,20 @@ const divider = css`
   margin: 0px 0px 0px 20px;
 `;
 
-const headerTextContainer = css`
-  display: flex;
-  align-items: center;
-  justify-content: flex-start;
-  width: 50%;
-`;
-
-const rightSection = css`
+const controls = css`
   display: flex;
   align-items: center;
-  justify-content: flex-end;
-  width: 50%;
-  margin: 15px 10px;
 `;
 
 const buttonStyles: IButtonStyles = {
   icon: {
-    color: '#fff',
-    fontSize: FontSizes.size20,
+    color: '#FFF',
+    fontSize: '20px',
   },
   root: {
     height: '20px',
     width: '20px',
     marginLeft: '16px',
-    marginTop: '4px',
   },
   rootHovered: {
     backgroundColor: 'transparent',
@@ -102,52 +78,23 @@ const buttonStyles: IButtonStyles = {
   },
 };
 
-const teachingBubbleStyle = {
-  root: {
-    selectors: {
-      '.ms-Callout-beak': {
-        background: NeutralColors.white,
-      },
-    },
-  },
-  bodyContent: {
-    background: NeutralColors.white,
-    selectors: {
-      '.ms-TeachingBubble-headline': {
-        color: NeutralColors.black,
-        fontSize: FontSizes.size20,
-      },
-      '.ms-TeachingBubble-subText': {
-        color: NeutralColors.black,
-        fontSize: FontSizes.size12,
-      },
-    },
-  },
-};
+const headerTextContainer = css`
+  display: flex;
+  flex-direction: row;
+  flex-wrap: wrap;
+  align-items: center;
+  margin-left: 20px;
+`;
 
 // -------------------- Header -------------------- //
 
 export const Header = () => {
-  const { setAppUpdateShowing, setLocale } = useRecoilValue(dispatcherState);
+  const { setAppUpdateShowing } = useRecoilValue(dispatcherState);
   const projectId = useRecoilValue(currentProjectIdState);
   const projectName = useRecoilValue(botDisplayNameState(projectId));
   const locale = useRecoilValue(localeState(projectId));
   const appUpdate = useRecoilValue(appUpdateState);
-  const [teachingBubbleVisibility, setTeachingBubbleVisibility] = useState<boolean>();
-  const settings = useRecoilValue(settingsState(projectId));
-
-  const { languages, defaultLanguage } = settings;
   const { showing, status } = appUpdate;
-  const [showStartBotsWidget, setStartBotsWidgetVisible] = useState(true);
-
-  const {
-    location: { pathname },
-  } = useLocation();
-
-  useEffect(() => {
-    // hide it on the /home page, but make sure not to hide on /bot/stuff/home in case someone names a dialog "home"
-    setStartBotsWidgetVisible(!pathname.endsWith('/home') || pathname.includes('/bot/'));
-  }, [pathname]);
 
   const onUpdateAvailableClick = useCallback(() => {
     setAppUpdateShowing(true);
@@ -155,54 +102,26 @@ export const Header = () => {
 
   const showUpdateAvailableIcon = status === AppUpdaterStatus.UPDATE_AVAILABLE && !showing;
 
-  const languageListOptions = useMemo(() => {
-    const languageList = languageListTemplates(languages, locale, defaultLanguage);
-    const enableLanguages = languageList.filter(({ isEnabled }) => !!isEnabled);
-    return enableLanguages.map((item) => {
-      const { language, locale } = item;
-      return {
-        key: locale,
-        title: locale,
-        text: language,
-      };
-    });
-  }, [languages]);
-
-  const onLanguageChange = (_event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, _index?: number) => {
-    const selectedLang = option?.key as string;
-    if (selectedLang && selectedLang !== locale) {
-      setLocale(selectedLang, projectId);
-    }
-  };
-
   return (
     <div css={headerContainer} role="banner">
-      <img
-        alt={formatMessage('Composer Logo')}
-        aria-label={formatMessage('Composer Logo')}
-        src={composerIcon}
-        style={{ marginLeft: '9px' }}
-      />
-      <div css={headerTextContainer}>
-        <div css={title}>{formatMessage('Bot Framework Composer')}</div>
-        {projectName && (
-          <Fragment>
-            <div css={divider} />
-            <span
-              css={botName}
-              id="targetButton"
-              role={'button'}
-              tabIndex={0}
-              onClick={() => setTeachingBubbleVisibility(true)}
-            >
-              {`${projectName} (${locale})`}
-            </span>
-          </Fragment>
-        )}
+      <div css={logo}>
+        <img
+          alt={formatMessage('Composer Logo')}
+          aria-label={formatMessage('Composer Logo')}
+          src={composerIcon}
+          style={{ marginLeft: '9px' }}
+        />
+        <div css={headerTextContainer}>
+          <div css={title}>{formatMessage('Bot Framework Composer')}</div>
+          {projectName && (
+            <Fragment>
+              <div css={divider} />
+              <span css={botName}>{`${projectName} (${locale})`}</span>
+            </Fragment>
+          )}
+        </div>
       </div>
-
-      <div css={rightSection}>
-        {showStartBotsWidget && <BotController />}
+      <div css={controls}>
         {showUpdateAvailableIcon && (
           <IconButton
             iconProps={{ iconName: 'History' }}
@@ -213,28 +132,6 @@ export const Header = () => {
         )}
         <NotificationButton buttonStyles={buttonStyles} />
       </div>
-      {teachingBubbleVisibility && (
-        <TeachingBubble
-          isWide
-          calloutProps={{ directionalHint: DirectionalHint.bottomLeftEdge }}
-          headline={formatMessage('Active language')}
-          styles={teachingBubbleStyle}
-          target="#targetButton"
-          onDismiss={() => setTeachingBubbleVisibility(false)}
-        >
-          {formatMessage(
-            'This is the bot language you are currently authoring. Change the active language in the dropdown below.'
-          )}
-          <Dropdown
-            disabled={languageListOptions.length === 1}
-            options={languageListOptions}
-            placeholder="Select an option"
-            selectedKey={locale}
-            styles={{ root: { marginTop: 12 } }}
-            onChange={onLanguageChange}
-          />
-        </TeachingBubble>
-      )}
     </div>
   );
 };
diff --git a/Composer/packages/client/src/components/Modal/DisplayManifestModal.tsx b/Composer/packages/client/src/components/Modal/DisplayManifestModal.tsx
index 5e104c307..70ba9257b 100644
--- a/Composer/packages/client/src/components/Modal/DisplayManifestModal.tsx
+++ b/Composer/packages/client/src/components/Modal/DisplayManifestModal.tsx
@@ -16,7 +16,7 @@ import { IDialogContentStyles } from 'office-ui-fabric-react/lib/Dialog';
 import { IModalStyles } from 'office-ui-fabric-react/lib/Modal';
 import { useRecoilValue } from 'recoil';
 
-import { skillsStateSelector, userSettingsState } from '../../recoilModel';
+import { userSettingsState, skillsState } from '../../recoilModel';
 
 // -------------------- Styles -------------------- //
 
@@ -53,25 +53,24 @@ const dragOptions: IDragOptions = {
 interface DisplayManifestModalProps {
   isDraggable?: boolean;
   isModeless?: boolean;
-  skillNameIdentifier: string;
+  manifestId?: string | null;
   onDismiss: () => void;
+  projectId: string;
 }
 
 export const DisplayManifestModal: React.FC<DisplayManifestModalProps> = ({
   isDraggable = true,
   isModeless = true,
-  skillNameIdentifier,
+  manifestId,
   onDismiss,
+  projectId,
 }) => {
-  const skills = useRecoilValue(skillsStateSelector);
+  const skills = useRecoilValue(skillsState(projectId));
   const userSettings = useRecoilValue(userSettingsState);
+
   useEffect(() => onDismiss, []);
 
-  const selectedSkill = useMemo(() => {
-    if (skillNameIdentifier) {
-      return skills[skillNameIdentifier];
-    }
-  }, [skillNameIdentifier, skills]);
+  const selectedSkill = useMemo(() => skills.find(({ manifestUrl }) => manifestUrl === manifestId), [manifestId]);
 
   if (!selectedSkill) {
     return null;
@@ -99,7 +98,7 @@ export const DisplayManifestModal: React.FC<DisplayManifestModalProps> = ({
           height={'100%'}
           id={'modaljsonview'}
           options={{ readOnly: true }}
-          value={selectedSkill.manifest}
+          value={selectedSkill.content}
           onChange={() => {}}
         />
       </div>
diff --git a/Composer/packages/client/src/components/MultiLanguage/AddLanguageModal.tsx b/Composer/packages/client/src/components/MultiLanguage/AddLanguageModal.tsx
index c018a7a61..547d59857 100644
--- a/Composer/packages/client/src/components/MultiLanguage/AddLanguageModal.tsx
+++ b/Composer/packages/client/src/components/MultiLanguage/AddLanguageModal.tsx
@@ -88,11 +88,11 @@ const AddLanguageModal: React.FC<IAddLanguageModalProps> = (props) => {
     [formData]
   );
 
-  const onDismiss = (e) => {
+  const onDismiss = useCallback((e) => {
     e.preventDefault();
     setFormData(initialFormData);
     props.onDismiss();
-  };
+  }, []);
 
   const formTitles = { ...MultiLanguagesDialog.ADD_DIALOG };
 
diff --git a/Composer/packages/client/src/components/NavItem.tsx b/Composer/packages/client/src/components/NavItem.tsx
index e5d0ae5c3..233fa13b4 100644
--- a/Composer/packages/client/src/components/NavItem.tsx
+++ b/Composer/packages/client/src/components/NavItem.tsx
@@ -16,7 +16,6 @@ import { useLocation, useRouterCache } from '../utils/hooks';
 import { dispatcherState } from '../recoilModel';
 
 import { QnAIcon } from './QnAIcon';
-import { BotProjectsSettingsIcon } from './BotProjectsSettingsIcon';
 // -------------------- Styles -------------------- //
 
 const link = (active: boolean, disabled: boolean) => css`
@@ -73,49 +72,39 @@ const icon = (active: boolean, disabled: boolean) =>
 
 /**
  * @param to The string URI to link to. Supports relative and absolute URIs.
+ * @param exact The uri is exactly the same as the anchor’s href.
  * @param iconName The link's icon.
  * @param labelName The link's text.
  * @param disabled If true, the Link will be unavailable.
  */
 export interface INavItemProps {
   to: string;
+  exact: boolean;
   iconName: string;
   labelName: string;
   disabled: boolean;
   showTooltip: boolean;
-  match?: RegExp;
 }
 
 export const NavItem: React.FC<INavItemProps> = (props) => {
   const { onboardingAddCoachMarkRef } = useRecoilValue(dispatcherState);
 
-  const { to, iconName, labelName, disabled, showTooltip, match } = props;
+  const { to, iconName, labelName, disabled, showTooltip } = props;
   const {
     location: { pathname },
   } = useLocation();
 
   const linkTo = useRouterCache(to);
 
-  const active = (pathname.startsWith(to) || match?.test(pathname)) ?? false;
+  const active = pathname.startsWith(to);
 
   const addRef = useCallback((ref) => onboardingAddCoachMarkRef({ [`nav${labelName.replace(' ', '')}`]: ref }), []);
-
-  const getIcon = (iconName: string) => {
-    let navIcon;
-    switch (iconName) {
-      case 'QnAIcon':
-        navIcon = <QnAIcon active={active} disabled={disabled} />;
-        break;
-      case 'BotProjectsSettings':
-        navIcon = <BotProjectsSettingsIcon active={active} disabled={disabled} />;
-        break;
-      default:
-        navIcon = <Icon iconName={iconName} styles={icon(active, disabled)} />;
-    }
-    return navIcon;
-  };
-
-  const iconElement = getIcon(iconName);
+  const iconElement =
+    iconName === 'QnAIcon' ? (
+      <QnAIcon active={active} disabled={disabled} />
+    ) : (
+      <Icon iconName={iconName} styles={icon(active, disabled)} />
+    );
   const activeArea = (
     <div
       aria-disabled={disabled}
diff --git a/Composer/packages/client/src/components/Notifications/NotificationButton.tsx b/Composer/packages/client/src/components/Notifications/NotificationButton.tsx
index e211a727f..89c7f97ca 100644
--- a/Composer/packages/client/src/components/Notifications/NotificationButton.tsx
+++ b/Composer/packages/client/src/components/Notifications/NotificationButton.tsx
@@ -10,7 +10,7 @@ import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
 import { useRecoilValue } from 'recoil';
 import formatMessage from 'format-message';
 
-import { notificationsSelector } from '../../recoilModel/selectors/notifications';
+import { notificationsSelector } from '../../recoilModel/selectors/notificationsSelector';
 import { dispatcherState } from '../../recoilModel';
 
 import { NotificationPanel } from './NotificationPanel';
diff --git a/Composer/packages/client/src/components/Notifications/NotificationContainer.tsx b/Composer/packages/client/src/components/Notifications/NotificationContainer.tsx
index 2620b6c80..e157f8638 100644
--- a/Composer/packages/client/src/components/Notifications/NotificationContainer.tsx
+++ b/Composer/packages/client/src/components/Notifications/NotificationContainer.tsx
@@ -7,7 +7,7 @@ import isEmpty from 'lodash/isEmpty';
 import { useRecoilValue } from 'recoil';
 
 import { dispatcherState } from '../../recoilModel';
-import { notificationsSelector } from '../../recoilModel/selectors/notifications';
+import { notificationsSelector } from '../../recoilModel/selectors/notificationsSelector';
 
 import { NotificationCard } from './NotificationCard';
 
diff --git a/Composer/packages/client/src/components/Page.tsx b/Composer/packages/client/src/components/Page.tsx
index f0e44c77a..7cc7cefba 100644
--- a/Composer/packages/client/src/components/Page.tsx
+++ b/Composer/packages/client/src/components/Page.tsx
@@ -2,17 +2,14 @@
 // Licensed under the MIT License.
 
 /** @jsx jsx */
-import { jsx, css, SerializedStyles } from '@emotion/core';
+import { jsx, css } from '@emotion/core';
 import React from 'react';
 import { FontWeights, FontSizes } from 'office-ui-fabric-react/lib/Styling';
 import { Toolbar, IToolbarItem } from '@bfc/ui-shared';
 
 import { LeftRightSplit } from '../components/Split/LeftRightSplit';
-import { navigateTo, buildURL } from '../utils/navigation';
-import { PageMode } from '../recoilModel';
 
 import { NavTree, INavTreeItem } from './NavTree';
-import { ProjectTree } from './ProjectTree/ProjectTree';
 
 // -------------------- Styles -------------------- //
 
@@ -53,7 +50,7 @@ export const headerTitle = css`
 export const headerContent = css`
   display: flex;
   align-items: center;
-  font-size: ${FontSizes.smallPlus};
+
   label: PageHeaderContent;
 `;
 
@@ -72,82 +69,43 @@ export const main = css`
   label: PageMain;
 `;
 
-export const content = (shouldShowEditorError: boolean) => css`
+export const content = css`
   flex: 4;
   padding: 20px;
   position: relative;
   overflow: auto;
-  height: ${shouldShowEditorError ? 'calc(100% - 40px)' : 'calc(100% - 10px)'};
+  height: calc(100% - 40px);
   label: PageContent;
-  box-sizing: border-box;
 `;
 
 // -------------------- Page -------------------- //
 
-type IPageProps = {
+interface IPageProps {
   // TODO: add type
   toolbarItems: IToolbarItem[];
+  navLinks: INavTreeItem[];
   title: string;
-  headerStyle?: SerializedStyles;
   navRegionName: string;
   mainRegionName: string;
-  shouldShowEditorError?: boolean;
   onRenderHeaderContent?: () => string | JSX.Element | null;
   'data-testid'?: string;
-  useNewTree?: boolean;
-  navLinks?: INavTreeItem[];
-  pageMode: PageMode;
-};
+}
 
 const Page: React.FC<IPageProps> = (props) => {
-  const {
-    title,
-    navLinks,
-    toolbarItems,
-    onRenderHeaderContent,
-    children,
-    navRegionName,
-    mainRegionName,
-    headerStyle = header,
-    shouldShowEditorError = true,
-    useNewTree,
-    pageMode,
-  } = props;
+  const { title, navLinks, toolbarItems, onRenderHeaderContent, children, navRegionName, mainRegionName } = props;
 
   return (
     <div css={root} data-testid={props['data-testid']}>
       <div css={pageWrapper}>
         <Toolbar toolbarItems={toolbarItems} />
-        <div css={headerStyle}>
+        <div css={header}>
           <h1 css={headerTitle}>{title}</h1>
           {onRenderHeaderContent && <div css={headerContent}>{onRenderHeaderContent()}</div>}
         </div>
         <div css={main} role="main">
-          <LeftRightSplit initialLeftGridWidth="20%" minLeftPixels={200} minRightPixels={800} pageMode={pageMode}>
-            {useNewTree ? (
-              <ProjectTree
-                options={{
-                  showDelete: false,
-                  showTriggers: false,
-                  showDialogs: true,
-                  showRemote: false,
-                  showMenu: false,
-                  showQnAMenu: title === 'QnA' ? true : false,
-                  showErrors: false,
-                }}
-                onSelect={(link) => {
-                  navigateTo(buildURL(pageMode, link));
-                }}
-              />
-            ) : (
-              <NavTree navLinks={navLinks as INavTreeItem[]} regionName={navRegionName} />
-            )}
-            <div
-              aria-label={mainRegionName}
-              css={content(shouldShowEditorError)}
-              data-testid="PageContent"
-              role="region"
-            >
+          <LeftRightSplit initialLeftGridWidth="20%" minLeftPixels={200} minRightPixels={800}>
+            <NavTree navLinks={navLinks} regionName={navRegionName} />
+            <div aria-label={mainRegionName} css={content} data-testid="PageContent" role="region">
               {children}
             </div>
           </LeftRightSplit>
diff --git a/Composer/packages/client/src/components/Pagination.tsx b/Composer/packages/client/src/components/Pagination.tsx
index 37e5db1cd..52ef5a9c2 100644
--- a/Composer/packages/client/src/components/Pagination.tsx
+++ b/Composer/packages/client/src/components/Pagination.tsx
@@ -40,8 +40,8 @@ export interface IPaginationProps {
 
 const createDropdownOption = (pageCount: number) => {
   return range(pageCount).map((_, i) => ({
-    key: `page ${i + 1}`,
-    text: `${i + 1}`,
+    key: `page ${i}`,
+    text: `${i}`,
   }));
 };
 
@@ -88,7 +88,7 @@ export const Pagination: React.FC<IPaginationProps> = (props) => {
         ariaLabel={formatMessage('Page number')}
         options={createDropdownOption(pageCount)}
         placeholder={formatMessage('Select options')}
-        selectedKey={`page ${index + 1}`}
+        selectedKey={`page${index + 1}`}
         styles={dropdownStyles}
         onChange={handlePageSelected}
       />
diff --git a/Composer/packages/client/src/components/ProjectTree/ExpandableNode.tsx b/Composer/packages/client/src/components/ProjectTree/ExpandableNode.tsx
index 35785a036..941ad00d0 100644
--- a/Composer/packages/client/src/components/ProjectTree/ExpandableNode.tsx
+++ b/Composer/packages/client/src/components/ProjectTree/ExpandableNode.tsx
@@ -24,7 +24,6 @@ const summaryStyle = css`
 `;
 
 const nodeStyle = (depth: number) => css`
-  margin-top: 2px;
   margin-left: ${depth * INDENT_PER_LEVEL}px;
 `;
 
diff --git a/Composer/packages/client/src/components/ProjectTree/ProjectTree.tsx b/Composer/packages/client/src/components/ProjectTree/ProjectTree.tsx
index cf7e5d9df..3cfb83883 100644
--- a/Composer/packages/client/src/components/ProjectTree/ProjectTree.tsx
+++ b/Composer/packages/client/src/components/ProjectTree/ProjectTree.tsx
@@ -24,15 +24,12 @@ import {
 } from '../../recoilModel';
 import { getFriendlyName } from '../../utils/dialogUtil';
 import { triggerNotSupported } from '../../utils/dialogValidator';
-import { createBotSettingUrl, navigateTo } from '../../utils/navigation';
-import { BotStatus } from '../../constants';
 import { useFeatureFlag } from '../../utils/hooks';
 import { LoadingSpinner } from '../LoadingSpinner';
 
 import { TreeItem } from './treeItem';
 import { ExpandableNode } from './ExpandableNode';
 import { INDENT_PER_LEVEL } from './constants';
-import { ProjectTreeHeader, ProjectTreeHeaderMenuItem } from './ProjectTreeHeader';
 
 // -------------------- Styles -------------------- //
 
@@ -92,14 +89,13 @@ const sortTriggerGroups = (x: string, y: string): number => {
 export type TreeLink = {
   displayName: string;
   isRoot: boolean;
-  bot?: BotInProject;
-  diagnostics: Diagnostic[];
+  warningContent?: string;
+  errorContent?: string;
   projectId: string;
   skillId?: string;
   dialogId?: string;
   trigger?: number;
   parentLink?: TreeLink;
-  onErrorClick?: (projectId: string, skillId: string, diagnostic: Diagnostic) => void;
 };
 
 export type TreeMenuItem = {
@@ -130,82 +126,42 @@ type BotInProject = {
   projectId: string;
   name: string;
   isRemote: boolean;
-  isRootBot: boolean;
-  diagnostics: Diagnostic[];
-  error: { [key: string]: any };
-  buildEssentials: { [key: string]: any };
-  isPvaSchema: boolean;
 };
 
 type Props = {
+  onSelect: (link: TreeLink) => void;
+  onSelectAllLink?: () => void;
+  showTriggers?: boolean;
+  showDialogs?: boolean;
   navLinks?: TreeLink[];
-  headerMenu?: ProjectTreeHeaderMenuItem[];
-  onSelect?: (link: TreeLink) => void;
-  onBotDeleteDialog?: (projectId: string, dialogId: string) => void;
-  onBotCreateDialog?: (projectId: string) => void;
-  onBotStart?: (projectId: string) => void;
-  onBotStop?: (projectId: string) => void;
-  onBotEditManifest?: (projectId: string, type: 'create' | 'edit') => void;
-  onBotExportZip?: (projectId: string) => void;
-  onBotRemoveSkill?: (skillId: string) => void;
-  onDialogCreateTrigger?: (projectId: string, dialogId: string) => void;
-  onDialogDeleteTrigger?: (projectId: string, dialogId: string, index: number) => void;
-  onErrorClick?: (projectId: string, skillId: string, diagnostic: Diagnostic) => void;
+  onDeleteTrigger: (id: string, index: number) => void;
+  onDeleteDialog: (id: string) => void;
   defaultSelected?: Partial<TreeLink>;
-  options?: {
-    showTriggers?: boolean;
-    showDialogs?: boolean;
-    showDelete?: boolean;
-    showRemote?: boolean;
-    showMenu?: boolean;
-    showQnAMenu?: boolean;
-    showErrors?: boolean;
-  };
 };
 
 const TREE_PADDING = 100; // the horizontal space taken up by stuff in the tree other than text or indentation
-const LEVEL_PADDING = 44; // the size of a reveal-triangle and the space around it
 
 export const ProjectTree: React.FC<Props> = ({
-  headerMenu = [],
-  onBotDeleteDialog = () => {},
-  onDialogDeleteTrigger = () => {},
+  onSelectAllLink: onAllSelected = undefined,
+  showTriggers = true,
+  showDialogs = true,
+  onDeleteDialog,
+  onDeleteTrigger,
   onSelect,
-  onBotCreateDialog = () => {},
-  onBotStart = () => {},
-  onBotStop = () => {},
-  onBotEditManifest = () => {},
-  onBotExportZip = () => {},
-  onBotRemoveSkill = () => {},
-  onDialogCreateTrigger = () => {},
-  onErrorClick = () => {},
   defaultSelected,
-  options = {
-    showDelete: true,
-    showDialogs: true,
-    showTriggers: true,
-    showRemote: true,
-    showMenu: true,
-    showQnAMenu: true,
-    showErrors: true,
-  },
 }) => {
-  const {
-    onboardingAddCoachMarkRef,
-    navigateToFormDialogSchema,
-    setPageElementState,
-    createQnAFromUrlDialogBegin,
-  } = useRecoilValue(dispatcherState);
+  const { onboardingAddCoachMarkRef, navigateToFormDialogSchema, setPageElementState } = useRecoilValue(
+    dispatcherState
+  );
   const treeRef = useRef<HTMLDivElement>(null);
 
-  const pageElements = useRecoilValue(pageElementState).dialogs;
+  const pageElements = useRecoilValue(pageElementState).design;
   const leftSplitWidth = pageElements?.leftSplitWidth ?? treeRef?.current?.clientWidth ?? 0;
   const getPageElement = (name: string) => pageElements?.[name];
   const setPageElement = (name: string, value: any) =>
-    setPageElementState('dialogs', { ...pageElements, [name]: value });
+    setPageElementState('design', { ...pageElements, [name]: value });
 
   const [filter, setFilter] = useState('');
-  const [isMenuOpen, setMenuOpen] = useState<boolean>(false);
   const formDialogComposerFeatureEnabled = useFeatureFlag('FORM_DIALOG');
   const [selectedLink, setSelectedLink] = useState<Partial<TreeLink> | undefined>(defaultSelected);
   const delayedSetFilter = throttle((newValue) => setFilter(newValue), 200);
@@ -224,10 +180,6 @@ export const ProjectTree: React.FC<Props> = ({
 
   const jsonSchemaFilesByProjectId = useRecoilValue(jsonSchemaFilesByProjectIdSelector);
 
-  const createSubtree = useCallback(() => {
-    return projectCollection.map(createBotSubtree);
-  }, [projectCollection]);
-
   if (rootProjectId == null) {
     // this should only happen before a project is loaded in, so it won't last very long
     return <LoadingSpinner />;
@@ -247,6 +199,10 @@ export const ProjectTree: React.FC<Props> = ({
     }
   }
 
+  const dialogHasWarnings = (projectId: string) => (dialog: DialogInfo) => {
+    notificationMap[projectId][dialog.id]?.some((diag) => diag.severity === DiagnosticSeverity.Warning);
+  };
+
   const dialogIsFormDialog = (dialog: DialogInfo) => {
     return formDialogComposerFeatureEnabled && dialog.content?.schema !== undefined;
   };
@@ -258,6 +214,18 @@ export const ProjectTree: React.FC<Props> = ({
     );
   };
 
+  const botHasWarnings = (bot: BotInProject) => {
+    return bot.dialogs.some(dialogHasWarnings(bot.projectId));
+  };
+
+  const dialogHasErrors = (projectId: string) => (dialog: DialogInfo) => {
+    notificationMap[projectId][dialog.id]?.some((diag) => diag.severity === DiagnosticSeverity.Error);
+  };
+
+  const botHasErrors = (bot: BotInProject) => {
+    return bot.dialogs.some(dialogHasErrors(bot.projectId));
+  };
+
   const doesLinkMatch = (linkInTree?: Partial<TreeLink>, selectedLink?: Partial<TreeLink>) => {
     if (linkInTree == null || selectedLink == null) return false;
     return (
@@ -272,77 +240,18 @@ export const ProjectTree: React.FC<Props> = ({
     if (isEqual(link, selectedLink)) return;
 
     setSelectedLink(link);
-    onSelect?.(link);
+    onSelect(link);
   };
 
   const renderBotHeader = (bot: BotInProject) => {
     const link: TreeLink = {
       displayName: bot.name,
       projectId: rootProjectId,
-      skillId: rootProjectId === bot.projectId ? undefined : bot.projectId,
+      skillId: bot.projectId,
       isRoot: true,
-      bot,
-      diagnostics: bot.diagnostics,
-      onErrorClick: onErrorClick,
+      warningContent: botHasWarnings(bot) ? formatMessage('This bot has warnings') : undefined,
+      errorContent: botHasErrors(bot) ? formatMessage('This bot has errors') : undefined,
     };
-    const isRunning = bot.buildEssentials.status === BotStatus.connected;
-
-    const menu = options.showMenu
-      ? [
-          {
-            label: formatMessage('Add a dialog'),
-            icon: 'Add',
-            onClick: () => {
-              onBotCreateDialog(bot.projectId);
-            },
-          },
-          {
-            label: isRunning ? formatMessage('Stop bot') : formatMessage('Start bot'),
-            icon: isRunning ? 'CircleStopSolid' : 'TriangleSolidRight12',
-            onClick: () => {
-              isRunning ? onBotStop(bot.projectId) : onBotStart(bot.projectId);
-            },
-          },
-          {
-            label: '',
-            onClick: () => {},
-          },
-          {
-            label: formatMessage('Export this bot as .zip'),
-            onClick: () => {
-              onBotExportZip(bot.projectId);
-            },
-          },
-          {
-            label: formatMessage('Settings'),
-            onClick: () => {
-              navigateTo(createBotSettingUrl(link.projectId, link.skillId));
-            },
-          },
-        ]
-      : [];
-
-    if (!bot.isRootBot && options.showMenu) {
-      menu.splice(
-        3,
-        0,
-        {
-          label: formatMessage('Create/edit skill manifest'),
-          onClick: () => {
-            onBotEditManifest(
-              bot.projectId,
-              bot.diagnostics.filter((d) => d.source === 'manifest.json').length ? 'create' : 'edit'
-            );
-          },
-        },
-        {
-          label: formatMessage('Remove this skill from project'),
-          onClick: () => {
-            onBotRemoveSkill(bot.projectId);
-          },
-        }
-      );
-    }
 
     return (
       <span
@@ -352,18 +261,15 @@ export const ProjectTree: React.FC<Props> = ({
           width: 100%;
           label: bot-header;
         `}
-        data-testid={`BotHeader-${bot.name}`}
         role="grid"
       >
         <TreeItem
+          showProps
           hasChildren={!bot.isRemote}
           icon={bot.isRemote ? icons.EXTERNAL_SKILL : icons.BOT}
           isActive={doesLinkMatch(link, selectedLink)}
-          isMenuOpen={isMenuOpen}
           link={link}
-          menu={menu}
-          menuOpenCallback={setMenuOpen}
-          showErrors={options.showErrors}
+          menu={[{ label: formatMessage('Create/edit skill manifest'), onClick: () => {} }]}
           textWidth={leftSplitWidth - TREE_PADDING}
           onSelect={handleOnSelect}
         />
@@ -371,62 +277,29 @@ export const ProjectTree: React.FC<Props> = ({
     );
   };
 
-  const renderDialogHeader = (skillId: string, dialog: DialogInfo, depth: number, isPvaSchema: boolean) => {
-    const diagnostics: Diagnostic[] = notificationMap[rootProjectId][dialog.id];
+  const renderDialogHeader = (skillId: string, dialog: DialogInfo, depth: number) => {
+    const warningContent = notificationMap[skillId][dialog.id]
+      ?.filter((diag) => diag.severity === DiagnosticSeverity.Warning)
+      .map((diag) => diag.message)
+      .join(',');
+    const errorContent = notificationMap[skillId][dialog.id]
+      ?.filter((diag) => diag.severity === DiagnosticSeverity.Error)
+      .map((diag) => diag.message)
+      .join(',');
+
     const dialogLink: TreeLink = {
       dialogId: dialog.id,
       displayName: dialog.displayName,
       isRoot: dialog.isRoot,
-      diagnostics,
       projectId: rootProjectId,
       skillId: skillId === rootProjectId ? undefined : skillId,
+      errorContent,
+      warningContent,
     };
-    const menu: any[] = options.showMenu
-      ? [
-          {
-            label: formatMessage('Add a trigger'),
-            icon: 'Add',
-            onClick: () => {
-              onDialogCreateTrigger(skillId, dialog.id);
-            },
-          },
-          {
-            label: '',
-            onClick: () => {},
-          },
-        ]
-      : [];
-
-    if (!isPvaSchema) {
-      menu.splice(1, 0, {
-        label: formatMessage('Add new knowledge base'),
-        icon: 'Add',
-        onClick: () => {
-          createQnAFromUrlDialogBegin({ projectId: skillId, dialogId: dialog.id });
-        },
-      });
-    }
 
     const isFormDialog = dialogIsFormDialog(dialog);
     const showEditSchema = formDialogSchemaExists(skillId, dialog);
 
-    if (!dialog.isRoot && options.showDelete) {
-      menu.push({
-        label: formatMessage('Remove this dialog'),
-        onClick: () => {
-          onBotDeleteDialog?.(skillId, dialog.id);
-        },
-      });
-    }
-
-    if (showEditSchema) {
-      menu.push({
-        label: formatMessage('Edit schema'),
-        icon: 'Edit',
-        onClick: (link) => navigateToFormDialogSchema({ projectId: link.skillId, schemaId: link.dialogName }),
-      });
-    }
-
     return {
       summaryElement: (
         <span
@@ -437,19 +310,37 @@ export const ProjectTree: React.FC<Props> = ({
             width: 100%;
             label: dialog-header;
           `}
-          data-testid={`DialogHeader-${dialog.displayName}`}
           role="grid"
         >
           <TreeItem
             hasChildren
+            showProps
             icon={isFormDialog ? icons.FORM_DIALOG : icons.DIALOG}
             isActive={doesLinkMatch(dialogLink, selectedLink)}
-            isMenuOpen={isMenuOpen}
             link={dialogLink}
-            menu={menu}
-            menuOpenCallback={setMenuOpen}
-            padLeft={depth * LEVEL_PADDING}
-            showErrors={false}
+            menu={[
+              ...(!dialog.isRoot
+                ? [
+                    {
+                      label: formatMessage('Remove this dialog'),
+                      icon: 'Delete',
+                      onClick: (link) => {
+                        onDeleteDialog(link.dialogId ?? '');
+                      },
+                    },
+                  ]
+                : []),
+              ...(showEditSchema
+                ? [
+                    {
+                      label: formatMessage('Edit schema'),
+                      icon: 'Edit',
+                      onClick: (link) =>
+                        navigateToFormDialogSchema({ projectId: link.skillId, schemaId: link.dialogName }),
+                    },
+                  ]
+                : []),
+            ]}
             textWidth={leftSplitWidth - TREE_PADDING}
             onSelect={handleOnSelect}
           />
@@ -459,14 +350,21 @@ export const ProjectTree: React.FC<Props> = ({
     };
   };
 
-  const renderTrigger = (item: any, dialog: DialogInfo, projectId: string, dialogLink: TreeLink): React.ReactNode => {
+  const renderTrigger = (
+    item: any,
+    dialog: DialogInfo,
+    projectId: string,
+    dialogLink: TreeLink,
+    depth: number
+  ): React.ReactNode => {
     const link: TreeLink = {
       projectId: rootProjectId,
       skillId: projectId === rootProjectId ? undefined : projectId,
       dialogId: dialog.id,
       trigger: item.index,
       displayName: item.displayName,
-      diagnostics: [],
+      warningContent: item.warningContent,
+      errorContent: item.errorContent,
       isRoot: false,
       parentLink: dialogLink,
     };
@@ -478,23 +376,16 @@ export const ProjectTree: React.FC<Props> = ({
         extraSpace={INDENT_PER_LEVEL}
         icon={icons.TRIGGER}
         isActive={doesLinkMatch(link, selectedLink)}
-        isMenuOpen={isMenuOpen}
         link={link}
-        menu={
-          options.showDelete
-            ? [
-                {
-                  label: formatMessage('Remove this trigger'),
-                  icon: 'Delete',
-                  onClick: (link) => {
-                    onDialogDeleteTrigger?.(projectId, link.dialogId ?? '', link.trigger ?? 0);
-                  },
-                },
-              ]
-            : []
-        }
-        menuOpenCallback={setMenuOpen}
-        showErrors={options.showErrors}
+        menu={[
+          {
+            label: formatMessage('Remove this trigger'),
+            icon: 'Delete',
+            onClick: (link) => {
+              onDeleteTrigger(link.dialogId ?? '', link.trigger ?? 0);
+            },
+          },
+        ]}
         textWidth={leftSplitWidth - TREE_PADDING}
         onSelect={handleOnSelect}
       />
@@ -511,7 +402,13 @@ export const ProjectTree: React.FC<Props> = ({
     return scope.toLowerCase().includes(filter.toLowerCase());
   };
 
-  const renderTriggerList = (triggers: ITrigger[], dialog: DialogInfo, projectId: string, dialogLink: TreeLink) => {
+  const renderTriggerList = (
+    triggers: ITrigger[],
+    dialog: DialogInfo,
+    projectId: string,
+    dialogLink: TreeLink,
+    depth: number
+  ) => {
     return triggers
       .filter((tr) => filterMatch(dialog.displayName) || filterMatch(getTriggerName(tr)))
       .map((tr) => {
@@ -524,17 +421,17 @@ export const ProjectTree: React.FC<Props> = ({
           { ...tr, index, displayName: getTriggerName(tr), warningContent, errorContent },
           dialog,
           projectId,
-          dialogLink
+          dialogLink,
+          depth
         );
       });
   };
 
-  const renderTriggerGroupHeader = (displayName: string, dialog: DialogInfo, projectId: string) => {
+  const renderTriggerGroupHeader = (displayName: string, dialog: DialogInfo, projectId: string, depth: number) => {
     const link: TreeLink = {
       dialogId: dialog.id,
       displayName,
       isRoot: false,
-      diagnostics: [],
       projectId,
     };
     return (
@@ -546,14 +443,7 @@ export const ProjectTree: React.FC<Props> = ({
         `}
         role="grid"
       >
-        <TreeItem
-          isMenuOpen={isMenuOpen}
-          isSubItemActive={false}
-          link={link}
-          menuOpenCallback={setMenuOpen}
-          showErrors={options.showErrors}
-          textWidth={leftSplitWidth - TREE_PADDING}
-        />
+        <TreeItem hasChildren showProps isSubItemActive={false} link={link} textWidth={leftSplitWidth - TREE_PADDING} />
       </span>
     );
   };
@@ -574,17 +464,16 @@ export const ProjectTree: React.FC<Props> = ({
       displayName: groupName,
       isRoot: false,
       projectId,
-      diagnostics: [],
     };
 
     return (
       <ExpandableNode
         key={key}
         depth={startDepth}
-        summary={renderTriggerGroupHeader(groupDisplayName, dialog, projectId)}
+        summary={renderTriggerGroupHeader(groupDisplayName, dialog, projectId, startDepth + 1)}
         onToggle={(newState) => setPageElement(key, newState)}
       >
-        <div>{renderTriggerList(triggers, dialog, projectId, link)}</div>
+        <div>{renderTriggerList(triggers, dialog, projectId, link, startDepth + 1)}</div>
       </ExpandableNode>
     );
   };
@@ -605,7 +494,7 @@ export const ProjectTree: React.FC<Props> = ({
   const renderDialogTriggers = (dialog: DialogInfo, projectId: string, startDepth: number, dialogLink: TreeLink) => {
     return dialogIsFormDialog(dialog)
       ? renderDialogTriggersByProperty(dialog, projectId, startDepth + 1)
-      : renderTriggerList(dialog.triggers, dialog, projectId, dialogLink);
+      : renderTriggerList(dialog.triggers, dialog, projectId, dialogLink, startDepth + 1);
   };
 
   const createDetailsTree = (bot: BotInProject, startDepth: number) => {
@@ -620,9 +509,9 @@ export const ProjectTree: React.FC<Props> = ({
               filterMatch(dialog.displayName) || dialog.triggers.some((trigger) => filterMatch(getTriggerName(trigger)))
           );
 
-    if (options.showTriggers) {
+    if (showTriggers) {
       return filteredDialogs.map((dialog: DialogInfo) => {
-        const { summaryElement, dialogLink } = renderDialogHeader(projectId, dialog, 0, bot.isPvaSchema);
+        const { summaryElement, dialogLink } = renderDialogHeader(projectId, dialog, startDepth);
         const key = 'dialog-' + dialog.id;
         return (
           <ExpandableNode
@@ -638,15 +527,13 @@ export const ProjectTree: React.FC<Props> = ({
         );
       });
     } else {
-      return filteredDialogs.map(
-        (dialog: DialogInfo) => renderDialogHeader(projectId, dialog, 1, bot.isPvaSchema).summaryElement
-      );
+      return filteredDialogs.map((dialog: DialogInfo) => renderDialogHeader(projectId, dialog, startDepth));
     }
   };
 
   const createBotSubtree = (bot: BotInProject & { hasWarnings: boolean }) => {
     const key = 'bot-' + bot.projectId;
-    if (options.showDialogs && !bot.isRemote) {
+    if (showDialogs && !bot.isRemote) {
       return (
         <ExpandableNode
           key={key}
@@ -657,14 +544,15 @@ export const ProjectTree: React.FC<Props> = ({
           <div>{createDetailsTree(bot, 1)}</div>
         </ExpandableNode>
       );
-    } else if (options.showRemote) {
-      return renderBotHeader(bot);
     } else {
-      return null;
+      return renderBotHeader(bot);
     }
   };
 
-  const projectTree = createSubtree();
+  const projectTree =
+    projectCollection.length === 1
+      ? createDetailsTree(projectCollection[0], 0)
+      : projectCollection.map(createBotSubtree);
 
   return (
     <div
@@ -684,7 +572,6 @@ export const ProjectTree: React.FC<Props> = ({
           styles={searchBox}
           onChange={onFilter}
         />
-        <ProjectTreeHeader menu={headerMenu} />
         <div
           aria-label={formatMessage(
             `{
@@ -702,7 +589,17 @@ export const ProjectTree: React.FC<Props> = ({
           )}
           aria-live={'polite'}
         />
-        <div css={tree}>{projectTree}</div>
+        <div css={tree}>
+          {onAllSelected != null ? (
+            <TreeItem
+              hasChildren={false}
+              link={{ displayName: formatMessage('All'), projectId: rootProjectId, isRoot: true }}
+              textWidth={leftSplitWidth - TREE_PADDING}
+              onSelect={onAllSelected}
+            />
+          ) : null}
+          {projectTree}
+        </div>
       </FocusZone>
     </div>
   );
diff --git a/Composer/packages/client/src/components/ProjectTree/ProjectTreeHeader.tsx b/Composer/packages/client/src/components/ProjectTree/ProjectTreeHeader.tsx
deleted file mode 100644
index 816de4a1a..000000000
--- a/Composer/packages/client/src/components/ProjectTree/ProjectTreeHeader.tsx
+++ /dev/null
@@ -1,104 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import { FontSizes, NeutralColors } from '@uifabric/fluent-theme';
-import formatMessage from 'format-message';
-import { IconButton } from 'office-ui-fabric-react/lib/Button';
-import { OverflowSet } from 'office-ui-fabric-react/lib/OverflowSet';
-import { TooltipHost, DirectionalHint } from 'office-ui-fabric-react/lib/Tooltip';
-import { IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';
-
-import { moreButton, overflowSet } from './treeItem';
-
-const headerText = css`
-  text-align: left;
-  text-transform: uppercase;
-  font-size: ${FontSizes.size12};
-  position: relative;
-  display: flex;
-  margin: 0;
-  padding: 0 0 0 12px;
-`;
-
-const headerWrapper = css`
-  background: ${NeutralColors.gray60};
-`;
-
-export interface ProjectTreeHeaderMenuItem {
-  icon?: string;
-  label: string;
-  onClick: () => void;
-}
-
-export interface ProjectTreeHeaderProps {
-  menu: ProjectTreeHeaderMenuItem[];
-}
-
-export const ProjectTreeHeader: React.FC<ProjectTreeHeaderProps> = ({ menu }) => {
-  const overflowMenu = menu.map((item) => {
-    return {
-      key: item.label,
-      ariaLabel: item.label,
-      text: item.label,
-      style: { fontSize: FontSizes.size12 },
-      iconProps: {
-        iconName: item.icon,
-        styles: { root: { fontSize: FontSizes.size12, display: item.icon ? 'inherit' : 'none' } },
-      },
-      onClick: item.onClick,
-    };
-  });
-
-  const onRenderOverflowButton = (isActive: boolean) => {
-    const moreLabel = formatMessage('Actions');
-    return (overflowItems: IContextualMenuItem[] | undefined) => {
-      if (overflowItems == null) return null;
-      return (
-        <TooltipHost content={moreLabel} directionalHint={DirectionalHint.rightCenter}>
-          <IconButton
-            ariaLabel={moreLabel}
-            className="project-tree-header-more-btn"
-            data-is-focusable={isActive}
-            data-testid="projectTreeHeaderMoreButton"
-            menuIconProps={{ iconName: 'Add', style: { color: NeutralColors.black } }}
-            menuProps={{ items: overflowItems }}
-            role="cell"
-            styles={{ ...moreButton(true), rootHovered: { background: 'none' } }}
-            onKeyDown={(e) => {
-              if (e.key === 'Enter') {
-                e.stopPropagation();
-              }
-            }}
-          />
-        </TooltipHost>
-      );
-    };
-  };
-
-  return (
-    <div css={headerWrapper}>
-      <p css={headerText}>
-        <OverflowSet
-          doNotContainWithinFocusZone
-          css={overflowSet(true)}
-          data-testid={'ProjectTreeHeaderMoreButton'}
-          items={[
-            {
-              key: 'your project',
-              displayName: formatMessage('your project'),
-            },
-          ]}
-          overflowItems={overflowMenu}
-          role="row"
-          styles={{ item: { flex: 1 } }}
-          onRenderItem={(item) => {
-            return <div key={item.key}>{item.displayName}</div>;
-          }}
-          onRenderOverflowButton={onRenderOverflowButton(true)}
-        />
-      </p>
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/components/ProjectTree/treeItem.tsx b/Composer/packages/client/src/components/ProjectTree/treeItem.tsx
index 456ff8410..3db255b2d 100644
--- a/Composer/packages/client/src/components/ProjectTree/treeItem.tsx
+++ b/Composer/packages/client/src/components/ProjectTree/treeItem.tsx
@@ -3,30 +3,25 @@
 
 /** @jsx jsx */
 import { jsx, css } from '@emotion/core';
-import React, { useState } from 'react';
+import React from 'react';
 import { FontWeights } from '@uifabric/styling';
-import { FontSizes } from '@uifabric/fluent-theme';
 import { OverflowSet, IOverflowSetItemProps } from 'office-ui-fabric-react/lib/OverflowSet';
 import { TooltipHost, DirectionalHint } from 'office-ui-fabric-react/lib/Tooltip';
 import { ContextualMenuItemType, IContextualMenuItem } from 'office-ui-fabric-react/lib/ContextualMenu';
 import { IconButton } from 'office-ui-fabric-react/lib/Button';
-import { Link } from 'office-ui-fabric-react/lib/Link';
 import { Icon } from 'office-ui-fabric-react/lib/Icon';
 import formatMessage from 'format-message';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
+import { NeutralColors } from '@uifabric/fluent-theme';
 import { IButtonStyles } from 'office-ui-fabric-react/lib/Button';
 import { IContextualMenuStyles } from 'office-ui-fabric-react/lib/ContextualMenu';
-import { ICalloutContentStyles, Callout } from 'office-ui-fabric-react/lib/Callout';
-import { DiagnosticSeverity, Diagnostic } from '@bfc/shared';
-import isEmpty from 'lodash/isEmpty';
-import uniqueId from 'lodash/uniqueId';
+import { ICalloutContentStyles } from 'office-ui-fabric-react/lib/Callout';
 
 import { TreeLink, TreeMenuItem } from './ProjectTree';
 import { SUMMARY_ARROW_SPACE } from './constants';
 
 // -------------------- Styles -------------------- //
 
-const projectTreeItemContainer = css`
+const iconAndText = css`
   outline: none;
   :focus {
     outline: rgb(102, 102, 102) solid 1px;
@@ -37,34 +32,34 @@ const projectTreeItemContainer = css`
   overflow: hidden;
   text-align: left;
   cursor: pointer;
+  width: 100%;
 
   label: ProjectTreeItemContainer;
 `;
 
-const projectTreeItem = css`
+const content = css`
   outline: none;
   display: flex;
   align-items: center;
   height: 24px;
-  padding-left: 4px;
 
   label: ProjectTreeItem;
 `;
 
-export const moreMenu: Partial<ICalloutContentStyles> = {
+const moreMenu: Partial<ICalloutContentStyles> = {
   root: {
     marginTop: '-1px',
   },
 };
 
-export const menuStyle: Partial<IContextualMenuStyles> = {
+const menuStyle: Partial<IContextualMenuStyles> = {
   subComponentStyles: {
     menuItem: {},
     callout: moreMenu,
   },
 };
 
-export const moreButton = (isActive: boolean): IButtonStyles => {
+const moreButton = (isActive: boolean): IButtonStyles => {
   return {
     root: {
       padding: '4px 4px 0 4px',
@@ -72,46 +67,36 @@ export const moreButton = (isActive: boolean): IButtonStyles => {
       visibility: isActive ? 'visible' : 'hidden',
       height: 'auto',
       width: '16px',
-      color: '#000',
     },
     menuIcon: {
-      fontSize: '12px',
+      fontSize: '14px',
       color: '#000',
     },
   };
 };
 
-const navItem = (
-  isActive: boolean,
-  isBroken: boolean,
-  padLeft: number,
-  isAnyMenuOpen: boolean,
-  menuOpenHere: boolean
-) => css`
+const navItem = (isActive: boolean) => css`
   label: navItem;
+  min-width: 100%;
   position: relative;
   height: 24px;
   font-size: 12px;
-  padding-left: ${padLeft}px;
-  color: ${isActive ? NeutralColors.white : '#545454'};
-  background: ${isActive ? '#0078d4' : menuOpenHere ? '#f2f2f2' : 'transparent'};
-  opacity: ${isBroken ? 0.5 : 1};
+  color: ${isActive ? '#ffffff' : '#545454'};
+  background: ${isActive ? '#0078d4' : 'transparent'};
   font-weight: ${isActive ? FontWeights.semibold : FontWeights.regular};
 
   display: flex;
   flex-direction: row;
   align-items: center;
 
-  ${isAnyMenuOpen
-    ? ''
-    : `&:hover {
+  &:hover {
     color: #545454;
     background: #f2f2f2;
 
     .dialog-more-btn {
       visibility: visible;
     }
-  }`}
+  }
 
   &:focus {
     outline: none;
@@ -130,36 +115,21 @@ const navItem = (
   }
 `;
 
-export const diagnosticLink = css`
-  display: flex;
-  align-content: start;
-  p {
-    margin: 2px 5px;
-    max-width: 300px;
-  }
-`;
-
-export const overflowSet = (isBroken: boolean) => css`
+export const overflowSet = css`
   width: 100%;
   height: 100%;
   box-sizing: border-box;
   line-height: 24px;
   justify-content: space-between;
   display: flex;
-  i {
-    color: ${isBroken ? SharedColors.red20 : 'inherit'};
-  }
+  margin-top: 2px;
 `;
 
-const moreButtonContainer = {
-  root: {
-    lineHeight: '1',
-  },
-};
-
 const statusIcon = {
-  fontSize: 15,
-  paddingLeft: 8,
+  width: '12px',
+  height: '18px',
+  fontSize: 11,
+  marginLeft: 6,
 };
 
 const warningIcon = {
@@ -172,25 +142,6 @@ const errorIcon = {
   color: '#CC3F3F',
 };
 
-const diagnosticIcon = {
-  width: '20px',
-  height: '20px',
-  fontSize: '12px',
-  lineHeight: '20px',
-  textAlign: 'center' as 'center',
-};
-
-const diagnosticErrorIcon = {
-  ...diagnosticIcon,
-  color: '#A80000',
-  background: '#FED9CC',
-};
-
-const diagnosticWarningIcon = {
-  ...diagnosticIcon,
-  color: '#8A8780',
-  background: '#FFF4CE',
-};
 const itemName = (nameWidth: number) => css`
   max-width: ${nameWidth}px;
   overflow: hidden;
@@ -198,26 +149,20 @@ const itemName = (nameWidth: number) => css`
   flex-shrink: 1;
 `;
 
-const calloutRootStyle = css`
-  padding: 11px;
-`;
 // -------------------- TreeItem -------------------- //
 
 interface ITreeItemProps {
   link: TreeLink;
   isActive?: boolean;
   isSubItemActive?: boolean;
+  menu?: TreeMenuItem[];
   onSelect?: (link: TreeLink) => void;
   icon?: string;
   dialogName?: string;
+  showProps?: boolean;
   textWidth?: number;
   extraSpace?: number;
-  padLeft?: number;
   hasChildren?: boolean;
-  menu?: TreeMenuItem[];
-  menuOpenCallback?: (boolean) => void;
-  isMenuOpen?: boolean;
-  showErrors?: boolean;
 }
 
 const renderTreeMenuItem = (link: TreeLink) => (item: TreeMenuItem) => {
@@ -231,142 +176,26 @@ const renderTreeMenuItem = (link: TreeLink) => (item: TreeMenuItem) => {
     key: item.label,
     ariaLabel: item.label,
     text: item.label,
-    style: { fontSize: FontSizes.size12 },
-    iconProps: {
-      iconName: item.icon,
-      styles: { root: { fontSize: FontSizes.size12, display: item.icon ? 'inherit' : 'none' } },
-    },
+    iconProps: { iconName: item.icon },
     onClick: () => {
       item.onClick?.(link);
     },
   };
 };
 
-const DiagnosticIcons = (props: {
-  projectId: string;
-  skillId: string;
-  diagnostics: Diagnostic[];
-  onErrorClick?: (projectId: string, skillId: string, diagnostic: Diagnostic) => void;
-}) => {
-  const [isErrorVisible, setIsErrorVisible] = useState(false);
-  const [isWarningVisible, setIsWarningVisible] = useState(false);
-  const { projectId, skillId, diagnostics, onErrorClick = () => {} } = props;
-  const warnings: Diagnostic[] = diagnostics.filter((diag) => diag.severity === DiagnosticSeverity.Warning);
-  const errors: Diagnostic[] = diagnostics.filter((diag) => diag.severity === DiagnosticSeverity.Error);
-  const warningsId = uniqueId('diagnosticWarningIcon');
-  const errorsId = uniqueId('diagnosticErrorIcon');
-  const toggleIsErrorVisible = () => {
-    setIsErrorVisible(!isErrorVisible);
-  };
-
-  const toggleIsWarningVisible = () => {
-    setIsWarningVisible(!isWarningVisible);
-  };
-
-  const WarningCallout = () => (
-    <Callout
-      directionalHint={DirectionalHint.bottomLeftEdge}
-      target={`#${warningsId}`}
-      onDismiss={toggleIsWarningVisible}
-    >
-      <div css={calloutRootStyle}>
-        {warnings.map((item) => {
-          let linkText = item.source;
-          if (item.message === 'Missing skill manifest' && item.source === 'manifest.json') {
-            linkText = 'Create skill mainfest';
-          }
-          return (
-            <div key={item.message} css={diagnosticLink}>
-              <Icon iconName={'Warning'} style={diagnosticWarningIcon} />
-              <p title={item.message}>
-                {item.message}
-                <Link
-                  styles={{ root: { marginLeft: '5px' } }}
-                  onClick={() => {
-                    toggleIsWarningVisible();
-                    onErrorClick(projectId, skillId, item);
-                  }}
-                >
-                  {linkText}
-                </Link>
-              </p>
-            </div>
-          );
-        })}
-      </div>
-    </Callout>
-  );
-
-  const ErrorCallout = () => (
-    <Callout directionalHint={DirectionalHint.bottomLeftEdge} target={`#${errorsId}`} onDismiss={toggleIsErrorVisible}>
-      <div css={calloutRootStyle}>
-        {errors.map((item) => {
-          let linkText = item.source;
-          if (item.source === 'appsettings.json') {
-            linkText = 'Fix in bot settings';
-          }
-          return (
-            <div key={item.message} css={diagnosticLink}>
-              <Icon iconName={'ErrorBadge'} style={diagnosticErrorIcon} />
-              <p title={item.message}>
-                {item.message}
-                <Link
-                  styles={{ root: { marginLeft: '5px' } }}
-                  onClick={() => {
-                    toggleIsErrorVisible();
-                    onErrorClick(projectId, skillId, item);
-                  }}
-                >
-                  {linkText}
-                </Link>
-              </p>
-            </div>
-          );
-        })}
-      </div>
-    </Callout>
-  );
-
-  return (
-    <React.Fragment>
-      {!isEmpty(warnings) && (
-        <Icon iconName={'WarningSolid'} id={warningsId} style={warningIcon} onClick={toggleIsWarningVisible} />
-      )}
-      {!isEmpty(errors) && (
-        <Icon iconName={'StatusErrorFull'} id={errorsId} style={errorIcon} onClick={toggleIsErrorVisible} />
-      )}
-      {isErrorVisible && <ErrorCallout />}
-      {isWarningVisible && <WarningCallout />}
-    </React.Fragment>
-  );
-};
-
-const onRenderItem = (textWidth: number, showErrors: boolean) => (item: IOverflowSetItemProps) => {
-  const { diagnostics = [], projectId, skillId, onErrorClick } = item;
-
-  let warningContent = '';
-  let errorContent = '';
-
-  if (showErrors) {
-    const warnings: Diagnostic[] = diagnostics.filter((diag) => diag.severity === DiagnosticSeverity.Warning);
-    const errors: Diagnostic[] = diagnostics.filter((diag) => diag.severity === DiagnosticSeverity.Error);
-
-    warningContent = warnings.map((diag) => diag.message).join(',');
-
-    errorContent = errors.map((diag) => diag.message).join(',');
-  }
-
+const onRenderItem = (textWidth: number) => (item: IOverflowSetItemProps) => {
+  const { warningContent, errorContent } = item;
   return (
     <div
       data-is-focusable
-      aria-label={`${item.displayName} ${warningContent} ${errorContent}`}
-      css={projectTreeItemContainer}
+      aria-label={`${item.displayName} ${warningContent ?? ''} ${errorContent ?? ''}`}
+      css={iconAndText}
       role="cell"
       tabIndex={0}
       onBlur={item.onBlur}
       onFocus={item.onFocus}
     >
-      <div css={projectTreeItem} role="presentation" tabIndex={-1}>
+      <div css={content} role="presentation" tabIndex={-1}>
         {item.icon != null && (
           <Icon
             iconName={item.icon}
@@ -381,47 +210,34 @@ const onRenderItem = (textWidth: number, showErrors: boolean) => (item: IOverflo
           />
         )}
         <span css={itemName(textWidth)}>{item.displayName}</span>
-        {showErrors && (
-          <DiagnosticIcons
-            diagnostics={diagnostics}
-            projectId={projectId}
-            skillId={skillId}
-            onErrorClick={onErrorClick}
-          />
+        {item.errorContent && (
+          <TooltipHost content={item.errorContent} directionalHint={DirectionalHint.bottomLeftEdge}>
+            <Icon iconName={'WarningSolid'} style={warningIcon} />
+          </TooltipHost>
+        )}
+        {item.warningContent && (
+          <TooltipHost content={item.warningContent} directionalHint={DirectionalHint.bottomLeftEdge}>
+            <Icon iconName={'StatusErrorFull'} style={errorIcon} />
+          </TooltipHost>
         )}
       </div>
     </div>
   );
 };
 
-const onRenderOverflowButton = (
-  isActive: boolean,
-  menuOpenCallback: (boolean) => void,
-  setThisItemSelected: (boolean) => void
-) => {
+const onRenderOverflowButton = (isActive: boolean) => {
   const moreLabel = formatMessage('Actions');
   return (overflowItems: IContextualMenuItem[] | undefined) => {
     if (overflowItems == null) return null;
     return (
-      <TooltipHost content={moreLabel} directionalHint={DirectionalHint.rightCenter} styles={moreButtonContainer}>
+      <TooltipHost content={moreLabel} directionalHint={DirectionalHint.rightCenter}>
         <IconButton
           ariaLabel={moreLabel}
           className="dialog-more-btn"
           data-is-focusable={isActive}
           data-testid="dialogMoreButton"
           menuIconProps={{ iconName: 'MoreVertical' }}
-          menuProps={{
-            items: overflowItems,
-            styles: menuStyle,
-            onMenuOpened: () => {
-              setThisItemSelected(true);
-              menuOpenCallback(true);
-            },
-            onMenuDismissed: () => {
-              setThisItemSelected(false);
-              menuOpenCallback(false);
-            },
-          }}
+          menuProps={{ items: overflowItems, styles: menuStyle }}
           role="cell"
           styles={moreButton(isActive)}
           onKeyDown={(e) => {
@@ -445,25 +261,18 @@ export const TreeItem: React.FC<ITreeItemProps> = ({
   hasChildren = false,
   menu = [],
   extraSpace = 0,
-  padLeft = 0,
-  menuOpenCallback = () => {},
-  isMenuOpen = false,
-  showErrors = true,
 }) => {
-  const [thisItemSelected, setThisItemSelected] = useState<boolean>(false);
-
   const a11yLabel = `${dialogName ?? '$Root'}_${link.displayName}`;
 
   const overflowMenu = menu.map(renderTreeMenuItem(link));
 
   const linkString = `${link.projectId}_DialogTreeItem${link.dialogId}_${link.trigger ?? ''}`;
-  const isBroken = !!link.bot?.error;
   const spacerWidth = hasChildren ? 0 : SUMMARY_ARROW_SPACE + extraSpace;
 
   return (
     <div
       aria-label={a11yLabel}
-      css={navItem(isActive, isBroken, padLeft, isMenuOpen, thisItemSelected)}
+      css={navItem(isActive)}
       data-testid={a11yLabel}
       role="gridcell"
       tabIndex={0}
@@ -481,20 +290,20 @@ export const TreeItem: React.FC<ITreeItemProps> = ({
         //In 8.0 the OverflowSet will no longer be wrapped in a FocusZone
         //remove this at that time
         doNotContainWithinFocusZone
-        css={overflowSet(isBroken)}
+        css={overflowSet}
         data-testid={linkString}
         items={[
           {
             key: linkString,
-            icon: isBroken ? 'RemoveLink' : icon,
+            icon,
             ...link,
           },
         ]}
         overflowItems={overflowMenu}
         role="row"
         styles={{ item: { flex: 1 } }}
-        onRenderItem={onRenderItem(textWidth - spacerWidth + extraSpace, showErrors)}
-        onRenderOverflowButton={onRenderOverflowButton(!!isActive, menuOpenCallback, setThisItemSelected)}
+        onRenderItem={onRenderItem(textWidth - spacerWidth + extraSpace)}
+        onRenderOverflowButton={onRenderOverflowButton(!!isActive)}
       />
     </div>
   );
diff --git a/Composer/packages/client/src/components/QnA/CreateQnAFrom.tsx b/Composer/packages/client/src/components/QnA/CreateQnAFrom.tsx
index d87076aee..42498906f 100644
--- a/Composer/packages/client/src/components/QnA/CreateQnAFrom.tsx
+++ b/Composer/packages/client/src/components/QnA/CreateQnAFrom.tsx
@@ -6,18 +6,14 @@ import { jsx } from '@emotion/core';
 import React from 'react';
 import { useRecoilValue } from 'recoil';
 
-import {
-  createQnAOnState,
-  showCreateQnAFromScratchDialogState,
-  showCreateQnAFromUrlDialogState,
-} from '../../recoilModel';
+import { showCreateQnAFromScratchDialogState, showCreateQnAFromUrlDialogState } from '../../recoilModel';
 
 import CreateQnAFromScratchModal from './CreateQnAFromScratchModal';
 import CreateQnAFromUrlModal from './CreateQnAFromUrlModal';
 import { CreateQnAFromModalProps } from './constants';
 
 export const CreateQnAModal: React.FC<CreateQnAFromModalProps> = (props) => {
-  const { projectId } = useRecoilValue(createQnAOnState);
+  const { projectId } = props;
   const showCreateQnAFromScratchDialog = useRecoilValue(showCreateQnAFromScratchDialogState(projectId));
   const showCreateQnAFromUrlDialog = useRecoilValue(showCreateQnAFromUrlDialogState(projectId));
 
diff --git a/Composer/packages/client/src/components/QnA/CreateQnAFromUrlModal.tsx b/Composer/packages/client/src/components/QnA/CreateQnAFromUrlModal.tsx
index f0aea0596..04dff7594 100644
--- a/Composer/packages/client/src/components/QnA/CreateQnAFromUrlModal.tsx
+++ b/Composer/packages/client/src/components/QnA/CreateQnAFromUrlModal.tsx
@@ -124,7 +124,7 @@ export const CreateQnAFromUrlModal: React.FC<CreateQnAFromModalProps> = (props)
           text={formatMessage('Create knowledge base from scratch')}
           onClick={() => {
             // switch to create from scratch flow, pass onComplete callback.
-            actions.createQnAFromScratchDialogBegin({ projectId, dialogId, onComplete: onComplete?.func });
+            actions.createQnAFromScratchDialogBegin({ projectId, onComplete: onComplete?.func });
           }}
         />
         <DefaultButton
diff --git a/Composer/packages/client/src/components/RepairSkillModal.tsx b/Composer/packages/client/src/components/RepairSkillModal.tsx
deleted file mode 100644
index 5f96a258f..000000000
--- a/Composer/packages/client/src/components/RepairSkillModal.tsx
+++ /dev/null
@@ -1,81 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React, { useState } from 'react';
-import formatMessage from 'format-message';
-import { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';
-import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
-import { ChoiceGroup } from 'office-ui-fabric-react/lib/ChoiceGroup';
-import { DialogFooter } from 'office-ui-fabric-react/lib/Dialog';
-
-import { repairSkillDialog } from '../constants';
-
-import { TreeLink } from './ProjectTree/ProjectTree';
-
-export type RepairSkillModalFormData = 'repairSkill' | 'removeSkill';
-
-export interface RepairSkillModalProps {
-  skillItem: TreeLink;
-  onNext: (option: RepairSkillModalFormData) => void;
-  onDismiss: () => void;
-}
-
-export const RepairSkillModalOptionKeys = {
-  repairSkill: 'repairSkill',
-  removeSkill: 'removeSkill',
-};
-
-export const CreateSkillModal: React.FC<RepairSkillModalProps> = ({ skillItem, onNext, onDismiss }) => {
-  const isRemote = skillItem.bot?.isRemote;
-  const [option, setOption] = useState<RepairSkillModalFormData>(isRemote ? 'removeSkill' : 'repairSkill');
-
-  if (!skillItem.bot?.error) return null;
-
-  const handleChange = (event, option) => {
-    setOption(option.key);
-  };
-
-  const handleJumpToNext = () => {
-    onNext(option);
-  };
-
-  const choiceOptions = [
-    {
-      ariaLabel:
-        formatMessage('Locate the bot file and repair the link') +
-        (option === RepairSkillModalOptionKeys.repairSkill ? ' selected' : ''),
-      key: RepairSkillModalOptionKeys.repairSkill,
-      'data-testid': 'Locate the bot file and repair the link',
-      text: formatMessage('Locate the bot file and repair the link'),
-      disabled: isRemote,
-    },
-    {
-      ariaLabel:
-        formatMessage('Remove this skill from your project') +
-        (option === RepairSkillModalOptionKeys.removeSkill ? ' selected' : ''),
-      key: RepairSkillModalOptionKeys.removeSkill,
-      'data-testid': 'Remove this skill from your project',
-      text: formatMessage('Remove this skill from your project'),
-    },
-  ];
-
-  return (
-    <DialogWrapper
-      isOpen
-      onDismiss={onDismiss}
-      {...repairSkillDialog(skillItem.displayName)}
-      dialogType={DialogTypes.DesignFlow}
-    >
-      <form onSubmit={handleJumpToNext}>
-        <input style={{ display: 'none' }} type="submit" />
-        <ChoiceGroup options={choiceOptions} selectedKey={option} onChange={handleChange} />
-        <DialogFooter>
-          <DefaultButton text={formatMessage('Cancel')} onClick={onDismiss} />
-          <PrimaryButton data-testid="NextStepButton" text={formatMessage('Next')} onClick={handleJumpToNext} />
-        </DialogFooter>
-      </form>
-    </DialogWrapper>
-  );
-};
-
-export default CreateSkillModal;
diff --git a/Composer/packages/client/src/components/Split/LeftRightSplit.tsx b/Composer/packages/client/src/components/Split/LeftRightSplit.tsx
index 8d7f5ddff..918b777ad 100644
--- a/Composer/packages/client/src/components/Split/LeftRightSplit.tsx
+++ b/Composer/packages/client/src/components/Split/LeftRightSplit.tsx
@@ -6,7 +6,7 @@ import styled from '@emotion/styled';
 import { default as Measure, ContentRect } from 'react-measure';
 import { useRecoilValue } from 'recoil';
 
-import { dispatcherState, PageMode } from '../../recoilModel';
+import { dispatcherState, currentModeState } from '../../recoilModel';
 
 const defaultSplitterWidth = 5;
 
@@ -143,7 +143,6 @@ type Props = {
   minRightPixels?: number;
   splitterWidth?: number;
   renderSplitter?: () => React.ReactNode;
-  pageMode: PageMode;
 };
 
 export const LeftRightSplit = (props: React.PropsWithChildren<Props>) => {
@@ -153,7 +152,6 @@ export const LeftRightSplit = (props: React.PropsWithChildren<Props>) => {
     minLeftPixels,
     splitterWidth = defaultSplitterWidth,
     renderSplitter,
-    pageMode,
   } = props;
 
   const [currentContentWidth, setCurrentContentWidth] = React.useState<number>(0);
@@ -168,6 +166,7 @@ export const LeftRightSplit = (props: React.PropsWithChildren<Props>) => {
   const [leftStart, setLeftStart] = React.useState(0);
   const [screenStart, setScreenStart] = React.useState(0);
 
+  const currentPageMode = useRecoilValue(currentModeState);
   const { setPageElementState } = useRecoilValue(dispatcherState);
 
   const constrainLeft = (value: number): number => {
@@ -205,7 +204,7 @@ export const LeftRightSplit = (props: React.PropsWithChildren<Props>) => {
       // calculate candidate left
       const newLeft = constrainLeft(leftStart + (event.screenX - screenStart));
       setLeftWidth(newLeft);
-      setPageElementState(pageMode, { leftSplitWidth: newLeft });
+      setPageElementState(currentPageMode, { leftSplitWidth: newLeft });
     }
   };
 
diff --git a/Composer/packages/client/src/components/TestController/TestController.tsx b/Composer/packages/client/src/components/TestController/TestController.tsx
new file mode 100644
index 000000000..fc28ab3b6
--- /dev/null
+++ b/Composer/packages/client/src/components/TestController/TestController.tsx
@@ -0,0 +1,311 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+
+import React, { useState, useRef, Fragment, useEffect, useCallback, useMemo } from 'react';
+import { jsx, css } from '@emotion/core';
+import { PrimaryButton } from 'office-ui-fabric-react/lib/Button';
+import formatMessage from 'format-message';
+import { useRecoilValue } from 'recoil';
+import { IConfig, IPublishConfig, defaultPublishConfig, checkForPVASchema } from '@bfc/shared';
+import { EditorExtension, PluginConfig, mergePluginConfigs } from '@bfc/extension-client';
+
+import {
+  botEndpointsState,
+  dispatcherState,
+  validateDialogsSelectorFamily,
+  botStatusState,
+  botDisplayNameState,
+  luFilesState,
+  qnaFilesState,
+  settingsState,
+  botLoadErrorState,
+  schemasState,
+} from '../../recoilModel';
+import settingsStorage from '../../utils/dialogSettingStorage';
+import { BotStatus } from '../../constants';
+import { isAbsHosted } from '../../utils/envUtil';
+import useNotifications from '../../pages/notifications/useNotifications';
+import { navigateTo, openInEmulator } from '../../utils/navigation';
+import plugins from '../../plugins';
+import { useShell } from '../../shell/useShell';
+
+import { isBuildConfigComplete, isKeyRequired, needsBuild } from './../../utils/buildUtil';
+import { PublishDialog } from './publishDialog';
+import { ErrorCallout } from './errorCallout';
+import { EmulatorOpenButton } from './emulatorOpenButton';
+import { Loading } from './loading';
+import { ErrorInfo } from './errorInfo';
+import { WarningInfo } from './warningInfo';
+
+// -------------------- Styles -------------------- //
+
+export const bot = css`
+  display: flex;
+  align-items: center;
+  position: relative;
+  height: 100%;
+`;
+
+export const botButton = css`
+  margin-left: 5px;
+`;
+
+let botStatusInterval: NodeJS.Timeout | undefined = undefined;
+
+// -------------------- TestController -------------------- //
+const POLLING_INTERVAL = 2500;
+export const TestControllerContent: React.FC<{ projectId: string }> = (props) => {
+  const { projectId = '' } = props;
+  const [modalOpen, setModalOpen] = useState(false);
+  const [calloutVisible, setCalloutVisible] = useState(false);
+
+  const botActionRef = useRef(null);
+  const notifications = useNotifications(projectId);
+
+  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
+  const schemas = useRecoilValue(schemasState(projectId));
+  const botStatus = useRecoilValue(botStatusState(projectId));
+  const botName = useRecoilValue(botDisplayNameState(projectId));
+  const luFiles = useRecoilValue(luFilesState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
+  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
+  const botLoadErrorMsg = useRecoilValue(botLoadErrorState(projectId));
+
+  const botEndpoints = useRecoilValue(botEndpointsState);
+  const {
+    publishToTarget,
+    onboardingAddCoachMarkRef,
+    build,
+    getPublishStatus,
+    setBotStatus,
+    setSettings,
+    setQnASettings,
+  } = useRecoilValue(dispatcherState);
+  const connected = botStatus === BotStatus.connected;
+  const publishing = botStatus === BotStatus.publishing;
+  const reloading = botStatus === BotStatus.reloading;
+  const addRef = useCallback((startBot) => onboardingAddCoachMarkRef({ startBot }), []);
+  const errorLength = notifications.filter((n) => n.severity === 'Error').length;
+  const showError = errorLength > 0;
+  const publishDialogConfig = { subscriptionKey: settings.qna?.subscriptionKey, ...settings.luis } as IConfig;
+  const warningLength = notifications.filter((n) => n.severity === 'Warning').length;
+  const showWarning = !showError && warningLength > 0;
+
+  useEffect(() => {
+    if (projectId) {
+      getPublishStatus(projectId, defaultPublishConfig);
+    }
+  }, [projectId]);
+
+  useEffect(() => {
+    switch (botStatus) {
+      case BotStatus.failed:
+        openCallout();
+        stopPollingRuntime();
+        setBotStatus(BotStatus.pending, projectId);
+        break;
+      case BotStatus.published:
+        stopPollingRuntime();
+        handleLoadBot();
+        break;
+      case BotStatus.reloading:
+        startPollingRuntime();
+        break;
+      default:
+      case BotStatus.connected:
+        stopPollingRuntime();
+        break;
+    }
+    return () => {
+      stopPollingRuntime();
+      return;
+    };
+  }, [botStatus]);
+
+  function dismissDialog() {
+    setModalOpen(false);
+  }
+
+  function openDialog() {
+    setModalOpen(true);
+  }
+
+  function dismissCallout() {
+    if (calloutVisible) setCalloutVisible(false);
+  }
+
+  function openCallout() {
+    setCalloutVisible(true);
+  }
+
+  function startPollingRuntime() {
+    if (!botStatusInterval) {
+      const cancelInterval = setInterval(() => {
+        // get publish status
+        getPublishStatus(projectId, defaultPublishConfig);
+      }, POLLING_INTERVAL);
+      botStatusInterval = cancelInterval;
+    }
+  }
+
+  function stopPollingRuntime() {
+    if (botStatusInterval) {
+      clearInterval(botStatusInterval);
+      botStatusInterval = undefined;
+    }
+  }
+
+  async function handleBuild(config: IPublishConfig) {
+    setBotStatus(BotStatus.publishing, projectId);
+    dismissDialog();
+    const { luis, qna } = config;
+
+    await setSettings(projectId, {
+      ...settings,
+      luis: luis,
+      qna: Object.assign({}, settings.qna, qna),
+    });
+    await build(luis, qna, projectId);
+  }
+
+  async function handleLoadBot() {
+    setBotStatus(BotStatus.reloading, projectId);
+    if (settings.qna && settings.qna.subscriptionKey) {
+      await setQnASettings(projectId, settings.qna.subscriptionKey);
+    }
+    const sensitiveSettings = settingsStorage.get(projectId);
+    await publishToTarget(projectId, defaultPublishConfig, { comment: '' }, sensitiveSettings);
+  }
+
+  async function handleStart() {
+    dismissCallout();
+    const config = {
+      luis: { ...settings.luis },
+      qna: { ...settings.qna },
+    };
+
+    if (isAbsHosted() || !needsBuild(dialogs)) {
+      return await handleLoadBot();
+    }
+
+    if (!isKeyRequired(dialogs, luFiles, qnaFiles)) {
+      return await handleBuild(config);
+    }
+
+    if (
+      botStatus === BotStatus.failed ||
+      botStatus === BotStatus.pending ||
+      !isBuildConfigComplete(config, dialogs, luFiles, qnaFiles)
+    ) {
+      openDialog();
+    } else {
+      await handleBuild(config);
+    }
+  }
+
+  function handleErrorButtonClick() {
+    navigateTo(`/bot/${projectId}/notifications`);
+  }
+
+  async function handleOpenEmulator() {
+    return Promise.resolve(
+      openInEmulator(
+        botEndpoints[projectId] || 'http://localhost:3979/api/messages',
+        settings.MicrosoftAppId && settings.MicrosoftAppPassword
+          ? { MicrosoftAppId: settings.MicrosoftAppId, MicrosoftAppPassword: settings.MicrosoftAppPassword }
+          : { MicrosoftAppPassword: '', MicrosoftAppId: '' }
+      )
+    );
+  }
+
+  const renderEmulatorOpenButton = () => {
+    if (checkForPVASchema(schemas.sdk)) return null;
+    return (
+      <EmulatorOpenButton
+        botEndpoint={botEndpoints[projectId] || 'http://localhost:3979/api/messages'}
+        botStatus={botStatus}
+        hidden={showError}
+        onClick={handleOpenEmulator}
+      />
+    );
+  };
+
+  const renderPublishingStatus = () => {
+    if (checkForPVASchema(schemas.sdk)) return null;
+    return (
+      <div
+        aria-label={publishing ? formatMessage('Publishing') : reloading ? formatMessage('Reloading') : ''}
+        aria-live={'assertive'}
+      />
+    );
+  };
+
+  const renderLoading = () => {
+    if (checkForPVASchema(schemas.sdk)) return null;
+    return <Loading botStatus={botStatus} />;
+  };
+
+  const renderStartButton = () => {
+    if (checkForPVASchema(schemas.sdk)) return null;
+    return (
+      <PrimaryButton
+        css={botButton}
+        disabled={showError || publishing || reloading}
+        id={'publishAndConnect'}
+        text={connected ? formatMessage('Restart Bot') : formatMessage('Start Bot')}
+        onClick={handleStart}
+      />
+    );
+  };
+
+  return (
+    <Fragment>
+      <div ref={botActionRef} css={bot}>
+        {renderEmulatorOpenButton()}
+        {renderPublishingStatus()}
+        {renderLoading()}
+        <div ref={addRef}>
+          <ErrorInfo count={errorLength} hidden={!showError} onClick={handleErrorButtonClick} />
+          <WarningInfo count={warningLength} hidden={!showWarning} onClick={handleErrorButtonClick} />
+          {renderStartButton()}
+        </div>
+      </div>
+      <ErrorCallout
+        error={botLoadErrorMsg}
+        target={botActionRef.current}
+        visible={calloutVisible}
+        onDismiss={dismissCallout}
+        onTry={handleStart}
+      />
+      {settings.luis && modalOpen && (
+        <PublishDialog
+          botName={botName}
+          config={publishDialogConfig}
+          isOpen={modalOpen}
+          projectId={projectId}
+          onDismiss={dismissDialog}
+          onPublish={handleBuild}
+        />
+      )}
+    </Fragment>
+  );
+};
+
+export const TestController: React.FC<{ projectId: string }> = (props) => {
+  const schemas = useRecoilValue(schemasState(props.projectId));
+  const shellForPropertyEditor = useShell('DesignPage', props.projectId);
+
+  const pluginConfig: PluginConfig = useMemo(() => {
+    const sdkUISchema = schemas?.ui?.content ?? {};
+    const userUISchema = schemas?.uiOverrides?.content ?? {};
+    return mergePluginConfigs({ uiSchema: sdkUISchema }, plugins, { uiSchema: userUISchema });
+  }, [schemas?.ui?.content, schemas?.uiOverrides?.content]);
+
+  return (
+    <EditorExtension plugins={pluginConfig} projectId={props.projectId} shell={shellForPropertyEditor}>
+      <TestControllerContent {...props} />
+    </EditorExtension>
+  );
+};
diff --git a/Composer/packages/client/src/components/TestController/emulatorOpenButton.tsx b/Composer/packages/client/src/components/TestController/emulatorOpenButton.tsx
new file mode 100644
index 000000000..2f7bed447
--- /dev/null
+++ b/Composer/packages/client/src/components/TestController/emulatorOpenButton.tsx
@@ -0,0 +1,45 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import formatMessage from 'format-message';
+import { ActionButton, IconButton } from 'office-ui-fabric-react/lib/Button';
+import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
+import { Fragment } from 'react';
+
+import { BotStatus } from '../../constants';
+
+interface IEmulatorOpenButtonProps {
+  botEndpoint: string;
+  botStatus: BotStatus;
+  hidden: boolean;
+  onClick: () => void;
+}
+
+export const EmulatorOpenButton: React.FC<IEmulatorOpenButtonProps> = (props) => {
+  const { onClick, botStatus, hidden, botEndpoint } = props;
+  const connected = botStatus === BotStatus.connected;
+
+  if (hidden || !connected) return null;
+
+  return (
+    <TooltipHost
+      content={
+        <Fragment>
+          {botEndpoint}
+          <IconButton iconProps={{ iconName: 'copy' }} onClick={() => navigator.clipboard.writeText(botEndpoint)} />
+        </Fragment>
+      }
+    >
+      <ActionButton
+        iconProps={{
+          iconName: 'OpenInNewTab',
+        }}
+        onClick={onClick}
+      >
+        {formatMessage('Test in Emulator')}
+      </ActionButton>
+    </TooltipHost>
+  );
+};
diff --git a/Composer/packages/client/src/components/BotRuntimeController/errorCallout.tsx b/Composer/packages/client/src/components/TestController/errorCallout.tsx
similarity index 100%
rename from Composer/packages/client/src/components/BotRuntimeController/errorCallout.tsx
rename to Composer/packages/client/src/components/TestController/errorCallout.tsx
diff --git a/Composer/packages/client/src/components/BotRuntimeController/errorInfo.tsx b/Composer/packages/client/src/components/TestController/errorInfo.tsx
similarity index 100%
rename from Composer/packages/client/src/components/BotRuntimeController/errorInfo.tsx
rename to Composer/packages/client/src/components/TestController/errorInfo.tsx
diff --git a/Composer/packages/client/src/components/BotRuntimeController/loading.tsx b/Composer/packages/client/src/components/TestController/loading.tsx
similarity index 100%
rename from Composer/packages/client/src/components/BotRuntimeController/loading.tsx
rename to Composer/packages/client/src/components/TestController/loading.tsx
diff --git a/Composer/packages/client/src/components/BotRuntimeController/publishDialog.tsx b/Composer/packages/client/src/components/TestController/publishDialog.tsx
similarity index 100%
rename from Composer/packages/client/src/components/BotRuntimeController/publishDialog.tsx
rename to Composer/packages/client/src/components/TestController/publishDialog.tsx
diff --git a/Composer/packages/client/src/components/BotRuntimeController/warningInfo.tsx b/Composer/packages/client/src/components/TestController/warningInfo.tsx
similarity index 95%
rename from Composer/packages/client/src/components/BotRuntimeController/warningInfo.tsx
rename to Composer/packages/client/src/components/TestController/warningInfo.tsx
index e43d4c110..3524e3973 100644
--- a/Composer/packages/client/src/components/BotRuntimeController/warningInfo.tsx
+++ b/Composer/packages/client/src/components/TestController/warningInfo.tsx
@@ -44,7 +44,7 @@ export const WarningInfo: React.FC<IwarningInfoProps> = (props) => {
   return (
     <div css={warningInfo} data-testid="notifications-info-button" onClick={onClick}>
       <span css={warningCount}>{count}</span>
-      <IconButton ariaLabel="warning" css={warningButton} iconProps={{ iconName: 'Warning' }} title="warning" />
+      <IconButton ariaLabel="warning" css={warningButton} iconProps={{ iconName: 'Error' }} title="warning" />
     </div>
   );
 };
diff --git a/Composer/packages/client/src/components/TextFieldWithCustomButton.tsx b/Composer/packages/client/src/components/TextFieldWithCustomButton.tsx
deleted file mode 100644
index 46c8558a2..000000000
--- a/Composer/packages/client/src/components/TextFieldWithCustomButton.tsx
+++ /dev/null
@@ -1,198 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import React, { useState, useRef, Fragment, useEffect } from 'react';
-import { TextField, ITextField } from 'office-ui-fabric-react/lib/TextField';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import { SharedColors } from '@uifabric/fluent-theme';
-import { FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { FontSizes } from '@uifabric/fluent-theme';
-import { NeutralColors } from '@uifabric/fluent-theme';
-
-const unknownIconStyle = (required) => {
-  return {
-    root: {
-      selectors: {
-        '&::before': {
-          content: required ? " '*'" : '',
-          color: SharedColors.red10,
-          paddingRight: 3,
-        },
-      },
-    },
-  };
-};
-
-const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-const customerLabel = css`
-  font-size: ${FontSizes.size12};
-  margin-right: 5px;
-`;
-
-const disabledTextFieldStyle = {
-  root: {
-    selectors: {
-      '.ms-TextField-field': {
-        background: '#ddf3db',
-      },
-      'p > span': {
-        width: '100%',
-      },
-    },
-  },
-};
-
-const actionButtonStyle = {
-  root: {
-    fontSize: FontSizes.size12,
-    fontWeight: FontWeights.regular,
-    color: SharedColors.cyanBlue10,
-    marginLeft: 0,
-    marginTop: -12,
-    paddingLeft: 0,
-  },
-};
-
-const errorContainer = css`
-  display: flex;
-  width: 100%;
-  height: 48px;
-  line-height: 48px;
-  background: #fed9cc;
-  color: ${NeutralColors.black};
-`;
-
-const errorIcon = {
-  root: {
-    color: '#A80000',
-    marginRight: 8,
-    paddingLeft: 12,
-    fontSize: FontSizes.size12,
-  },
-};
-
-const errorTextStyle = css`
-  margin-bottom: 5px;
-`;
-
-type TextFieldWithCustomButtonProps = {
-  label: string;
-  ariaLabelledby: string;
-  buttonText: string;
-  errorMessage;
-  placeholder: string;
-  placeholderOnDisable: string;
-  value: string;
-  onBlur?: (value) => void;
-  onChange?: (e, value) => void;
-  required: boolean;
-  id?: string;
-};
-
-const errorElement = (errorText: string) => {
-  if (!errorText) return '';
-  return (
-    <div css={errorContainer}>
-      <Icon iconName="ErrorBadge" styles={errorIcon} />
-      <div css={errorTextStyle}>{errorText}</div>
-    </div>
-  );
-};
-
-const onRenderLabel = (props) => {
-  return (
-    <div css={labelContainer}>
-      <div css={customerLabel}> {props.label} </div>
-      <TooltipHost content={props.label}>
-        <Icon iconName="Unknown" styles={unknownIconStyle(props.required)} />
-      </TooltipHost>
-    </div>
-  );
-};
-
-export const TextFieldWithCustomButton: React.FC<TextFieldWithCustomButtonProps> = (props) => {
-  const {
-    label,
-    placeholder,
-    placeholderOnDisable,
-    onChange,
-    required,
-    ariaLabelledby,
-    value,
-    buttonText,
-    onBlur,
-    errorMessage,
-    id = '',
-  } = props;
-  const [isDisabled, setDisabled] = useState<boolean>(!value);
-  const textFieldComponentRef = useRef<ITextField>(null);
-  const [autoFoucsOnTextField, setAutoFoucsOnTextField] = useState<boolean>();
-  const [localValue, setLocalValue] = useState<string>(value);
-  useEffect(() => {
-    if (autoFoucsOnTextField) {
-      textFieldComponentRef.current?.focus();
-    }
-  }, [autoFoucsOnTextField]);
-
-  useEffect(() => {
-    setLocalValue(value);
-    setDisabled(!value);
-  }, [value]);
-
-  return (
-    <Fragment>
-      {isDisabled ? (
-        <TextField
-          disabled
-          errorMessage={required ? errorElement(errorMessage) : ''}
-          id={id}
-          label={label}
-          placeholder={placeholderOnDisable}
-          required={required}
-          styles={disabledTextFieldStyle}
-          onRenderLabel={onRenderLabel}
-        />
-      ) : (
-        <TextField
-          aria-labelledby={ariaLabelledby}
-          componentRef={textFieldComponentRef}
-          disabled={isDisabled}
-          id={id}
-          label={label}
-          placeholder={placeholder}
-          required={required}
-          value={localValue}
-          onBlur={() => {
-            if (!localValue) {
-              setDisabled(true);
-            }
-            onBlur && onBlur(localValue);
-          }}
-          onChange={(e, value) => {
-            setLocalValue(value ?? '');
-            onChange && onChange(e, value);
-          }}
-          onRenderLabel={onRenderLabel}
-        />
-      )}
-
-      <ActionButton
-        styles={actionButtonStyle}
-        onClick={() => {
-          setDisabled(false);
-          setAutoFoucsOnTextField(true);
-        }}
-      >
-        {buttonText}
-      </ActionButton>
-    </Fragment>
-  );
-};
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotController.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotController.test.tsx
deleted file mode 100644
index 67682f592..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotController.test.tsx
+++ /dev/null
@@ -1,114 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { act, fireEvent } from '@botframework-composer/test-utils';
-
-import { renderWithRecoil } from '../../../../__tests__/testUtils';
-import { BotStatus } from '../../../constants';
-import { botProjectIdsState, botStatusState } from '../../../recoilModel';
-import { BotController } from '../../BotRuntimeController/BotController';
-
-const mockStart = jest.fn();
-const mockStop = jest.fn();
-const mockSingleStop = jest.fn();
-const mockSingleStart = jest.fn();
-
-jest.mock('office-ui-fabric-react/lib/Button', () => ({
-  DefaultButton: ({ children, onClick }) => (
-    <button data-testid="button" onClick={onClick}>
-      {children}
-    </button>
-  ),
-  IconButton: ({ onClick }) => (
-    <button data-testid="Close" onClick={onClick}>
-      Close
-    </button>
-  ),
-}));
-
-jest.mock('../../BotRuntimeController/useBotOperations', () => {
-  return {
-    useBotOperations: () => ({
-      startAllBots: mockStart,
-      stopAllBots: mockStop,
-      startSingleBot: mockSingleStart,
-      stopSingleBot: mockSingleStop,
-    }),
-  };
-});
-
-// BotController Menu is tested in its own test file
-jest.mock('../../BotRuntimeController/BotControllerMenu', () => {
-  return {
-    BotControllerMenu: () => {
-      return <></>;
-    },
-  };
-});
-
-describe('<BotController />', () => {
-  beforeEach(() => {
-    mockStop.mockReset();
-    mockStart.mockReset();
-  });
-
-  it('should show that 2/3 bots have been started correctly', async () => {
-    const initRecoilState = ({ set }) => {
-      const projectIds = ['123a.234', '456a.234', '789a.234'];
-      set(botProjectIdsState, projectIds);
-      set(botStatusState(projectIds[0]), BotStatus.connected);
-      set(botStatusState(projectIds[1]), BotStatus.connected);
-      set(botStatusState(projectIds[2]), BotStatus.failed);
-    };
-    const { findByText } = renderWithRecoil(<BotController />, initRecoilState);
-    await findByText('Stop all bots (2/3 running)');
-  });
-
-  it('should show that no bots have been started', async () => {
-    const initRecoilState = ({ set }) => {
-      const projectIds = ['123a.234', '456a.234', '789a.234'];
-      set(botProjectIdsState, projectIds);
-      set(botStatusState(projectIds[0]), BotStatus.inactive);
-      set(botStatusState(projectIds[1]), BotStatus.inactive);
-      set(botStatusState(projectIds[2]), BotStatus.inactive);
-    };
-    const { findByText } = renderWithRecoil(<BotController />, initRecoilState);
-    await findByText('Start all bots');
-  });
-
-  it('should stop all bots if Stop all bots is clicked', async () => {
-    const initRecoilState = ({ set }) => {
-      const projectIds = ['123a.234', '456a.234', '789a.234'];
-      set(botProjectIdsState, projectIds);
-      set(botStatusState(projectIds[0]), BotStatus.published);
-      set(botStatusState(projectIds[1]), BotStatus.publishing);
-      set(botStatusState(projectIds[2]), BotStatus.connected);
-    };
-    const { findByTestId } = renderWithRecoil(<BotController />, initRecoilState);
-    const button = await findByTestId('button');
-
-    act(() => {
-      fireEvent.click(button);
-    });
-    expect(mockStop).toHaveBeenCalled();
-  });
-
-  it('should start all bots if Start All bots is clicked', async () => {
-    const initRecoilState = ({ set }) => {
-      const projectIds = ['123a.234', '456a.234', '789a.234'];
-      set(botProjectIdsState, projectIds);
-      set(botStatusState(projectIds[0]), BotStatus.inactive);
-      set(botStatusState(projectIds[1]), BotStatus.inactive);
-      set(botStatusState(projectIds[2]), BotStatus.inactive);
-    };
-    const { findByTestId } = renderWithRecoil(<BotController />, initRecoilState);
-    const button = await findByTestId('button');
-
-    act(() => {
-      fireEvent.click(button);
-    });
-
-    expect(mockStart).toHaveBeenCalled();
-  });
-});
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeOperations.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeOperations.test.tsx
deleted file mode 100644
index 8deed0f82..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeOperations.test.tsx
+++ /dev/null
@@ -1,40 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-
-import { renderWithRecoil } from '../../../../__tests__/testUtils/renderWithRecoil';
-import { botStatusState } from '../../../recoilModel';
-import { BotRuntimeOperations } from '../../BotRuntimeController/BotRuntimeOperations';
-import { BotStatus } from '../../../constants';
-
-describe('<BotRuntimeOperations.test />', () => {
-  const projectId = '123a.324';
-  it('should render the BotRuntimeOperations with failed status', () => {
-    const { container } = renderWithRecoil(<BotRuntimeOperations projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.failed);
-    });
-    expect(container.innerHTML.includes('Play')).toBeTruthy();
-  });
-
-  it('should render the BotRuntimeOperations with connected status', () => {
-    const { container } = renderWithRecoil(<BotRuntimeOperations projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.connected);
-    });
-    expect(container.innerHTML.includes('CircleStopSolid')).toBeTruthy();
-  });
-
-  it('should render the BotRuntimeOperations with unconnected status', () => {
-    const { container } = renderWithRecoil(<BotRuntimeOperations projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.inactive);
-    });
-    expect(container.innerHTML.includes('Play')).toBeTruthy();
-  });
-
-  it('should render the spinner for any other bot status', () => {
-    const { container } = renderWithRecoil(<BotRuntimeOperations projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.publishing);
-    });
-    expect(container.innerHTML.includes('Spinner')).toBeTruthy();
-  });
-});
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeStatus.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeStatus.test.tsx
deleted file mode 100644
index c28c9d968..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotRuntimeStatus.test.tsx
+++ /dev/null
@@ -1,107 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-
-import httpClient from '../../../utils/httpUtil';
-import { renderWithRecoil } from '../../../../__tests__/testUtils/renderWithRecoil';
-import { botRuntimeErrorState, botStatusState } from '../../../recoilModel';
-import { BotStatus } from '../../../constants';
-import { BotRuntimeStatus } from '../../BotRuntimeController/BotRuntimeStatus';
-
-jest.mock('../../../utils/httpUtil');
-
-const mockStart = jest.fn();
-const mockStop = jest.fn();
-const pollingInterval = 3000;
-
-jest.mock('../../BotRuntimeController/useBotOperations', () => {
-  return {
-    useBotOperations: () => ({
-      startSingleBot: mockStart,
-      stopSingleBot: mockStop,
-    }),
-  };
-});
-
-describe('<BotRuntimeStatus />', () => {
-  const projectId = '123a.324';
-
-  beforeEach(() => {
-    mockStop.mockClear();
-    mockStart.mockClear();
-  });
-
-  it('should start the bot once its published', async () => {
-    renderWithRecoil(<BotRuntimeStatus projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.published);
-    });
-
-    expect(mockStart).toHaveBeenCalledWith(projectId, true);
-  });
-
-  describe('<Poll Operations />', () => {
-    const updatePublishStatusMock = jest.fn();
-    (httpClient.get as jest.Mock).mockImplementation(() => {
-      updatePublishStatusMock();
-      return new Promise((resolve) => {
-        resolve({
-          status: 200,
-          data: {
-            status: 200,
-          },
-        });
-      });
-    });
-    beforeEach(() => {
-      jest.useFakeTimers();
-      updatePublishStatusMock.mockClear();
-    });
-
-    afterEach(() => {
-      jest.useRealTimers();
-    });
-
-    it('should not poll if bot is started', async () => {
-      renderWithRecoil(<BotRuntimeStatus projectId={projectId} />, ({ set }) => {
-        set(botStatusState(projectId), BotStatus.connected);
-      });
-
-      jest.advanceTimersByTime(pollingInterval);
-      expect(updatePublishStatusMock).toHaveBeenCalledTimes(0);
-    });
-
-    it('should not poll if bot is stopped', async () => {
-      renderWithRecoil(<BotRuntimeStatus projectId={projectId} />, ({ set }) => {
-        set(botStatusState(projectId), BotStatus.failed);
-      });
-
-      jest.advanceTimersByTime(pollingInterval);
-      expect(updatePublishStatusMock).toHaveBeenCalledTimes(0);
-    });
-
-    it('should poll if bot is loading', async () => {
-      renderWithRecoil(<BotRuntimeStatus projectId={projectId} />, ({ set }) => {
-        set(botStatusState(projectId), BotStatus.reloading);
-      });
-
-      jest.advanceTimersByTime(pollingInterval);
-      expect(updatePublishStatusMock).toHaveBeenCalledTimes(1);
-
-      jest.advanceTimersByTime(pollingInterval);
-
-      expect(updatePublishStatusMock).toHaveBeenCalledTimes(2);
-    });
-
-    it('should show error if bot start failed', async () => {
-      const { findByText } = renderWithRecoil(<BotRuntimeStatus projectId={projectId} />, ({ set }) => {
-        set(botStatusState(projectId), BotStatus.failed);
-        set(botRuntimeErrorState(projectId), {
-          title: 'Error',
-          message: 'Failed to bind to port 3979',
-        });
-      });
-      expect(findByText('See Details')).toBeDefined();
-    });
-  });
-});
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotStatusIndicator.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotStatusIndicator.test.tsx
deleted file mode 100644
index c9359a002..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/BotStatusIndicator.test.tsx
+++ /dev/null
@@ -1,51 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-
-import { renderWithRecoil } from '../../../../__tests__/testUtils/renderWithRecoil';
-import { botRuntimeErrorState, botStatusState } from '../../../recoilModel';
-import { BotStatus, BotStatusesCopy } from '../../../constants';
-import { BotStatusIndicator } from '../../BotRuntimeController/BotStatusIndicator';
-
-jest.mock('../../../utils/httpUtil');
-
-const mockStart = jest.fn();
-const mockStop = jest.fn();
-
-jest.mock('../../BotRuntimeController/useBotOperations', () => {
-  return {
-    useBotOperations: () => ({
-      startSingleBot: mockStart,
-      stopSingleBot: mockStop,
-    }),
-  };
-});
-
-describe('<BotStatusIndicator />', () => {
-  const projectId = '123a.324';
-
-  beforeEach(() => {
-    mockStop.mockClear();
-    mockStart.mockClear();
-  });
-
-  it('should render the Local Bot Runtime with publishing status', async () => {
-    const { findAllByText } = renderWithRecoil(<BotStatusIndicator projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.publishing);
-    });
-    const element = await findAllByText(BotStatusesCopy.publishing);
-    expect(element).toBeDefined();
-  });
-
-  it('should show error if bot start failed', async () => {
-    const { findByText } = renderWithRecoil(<BotStatusIndicator projectId={projectId} />, ({ set }) => {
-      set(botStatusState(projectId), BotStatus.failed);
-      set(botRuntimeErrorState(projectId), {
-        title: 'Error',
-        message: 'Failed to bind to port 3979',
-      });
-    });
-    expect(findByText('See Details')).toBeDefined();
-  });
-});
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotOperations.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotOperations.test.tsx
deleted file mode 100644
index 4ec47d13a..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotOperations.test.tsx
+++ /dev/null
@@ -1,98 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-import { RecoilRoot } from 'recoil';
-import { renderHook } from '@botframework-composer/test-utils/lib/hooks';
-import { act } from '@botframework-composer/test-utils';
-import { defaultPublishConfig } from '@bfc/shared';
-
-import { useBotOperations } from '../../BotRuntimeController/useBotOperations';
-import { botProjectIdsState, dispatcherState, projectMetaDataState } from '../../../recoilModel';
-
-const state = {
-  projectId: '123a.23fs',
-  skillId: '456a.23fs',
-};
-
-const mocks = {
-  resetBotRuntimeError: jest.fn(),
-  publishToTarget: jest.fn(),
-  setBotStatus: jest.fn(),
-  stopBot: jest.fn(),
-};
-
-const initRecoilState = ({ set }) => {
-  set(botProjectIdsState, [state.projectId, state.skillId]);
-  set(projectMetaDataState(state.projectId), {
-    isRootBot: true,
-  });
-  set(projectMetaDataState(state.skillId), {
-    isRootBot: false,
-  });
-
-  set(dispatcherState, {
-    resetBotRuntimeError: mocks.resetBotRuntimeError,
-    publishToTarget: mocks.publishToTarget,
-    setBotStatus: mocks.setBotStatus,
-    stopPublishBot: mocks.stopBot,
-  });
-};
-
-// TODO: An integration test needs to be added to test this component better.
-describe('useBotOperations', () => {
-  afterEach(() => {
-    mocks.resetBotRuntimeError.mockReset();
-    mocks.publishToTarget.mockReset();
-    mocks.setBotStatus.mockReset();
-    mocks.stopBot.mockReset();
-  });
-
-  it('should start a single bot', async () => {
-    const wrapper = (props: { children?: React.ReactNode }) => {
-      const { children } = props;
-      return <RecoilRoot initializeState={initRecoilState}>{children}</RecoilRoot>;
-    };
-
-    const { result } = renderHook(() => useBotOperations(), {
-      wrapper,
-    });
-
-    await act(async () => {
-      result.current.startSingleBot(state.skillId);
-    });
-    expect(mocks.resetBotRuntimeError).toHaveBeenLastCalledWith(state.skillId);
-    expect(mocks.publishToTarget).toHaveBeenLastCalledWith(
-      state.skillId,
-      defaultPublishConfig,
-      { comment: '' },
-      {
-        MicrosoftAppPassword: '',
-        luis: {
-          authoringKey: '',
-          endpointKey: '',
-        },
-        qna: {
-          endpointKey: '',
-          subscriptionKey: '',
-        },
-      }
-    );
-  });
-
-  it('should stop a single bot', async () => {
-    const wrapper = (props: { children?: React.ReactNode }) => {
-      const { children } = props;
-      return <RecoilRoot initializeState={initRecoilState}>{children}</RecoilRoot>;
-    };
-
-    const { result } = renderHook(() => useBotOperations(), {
-      wrapper,
-    });
-
-    await act(async () => {
-      result.current.stopSingleBot(state.skillId);
-    });
-    expect(mocks.stopBot).toHaveBeenLastCalledWith(state.skillId);
-  });
-});
diff --git a/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotStatusTracker.test.tsx b/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotStatusTracker.test.tsx
deleted file mode 100644
index b72826ad0..000000000
--- a/Composer/packages/client/src/components/__tests__/BotRuntimeController/useBotStatusTracker.test.tsx
+++ /dev/null
@@ -1,105 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import * as React from 'react';
-import { RecoilRoot } from 'recoil';
-import { renderHook } from '@botframework-composer/test-utils/lib/hooks';
-
-import { botProjectIdsState, botStatusState, dispatcherState, projectMetaDataState } from '../../../recoilModel';
-import { useStartedRuntimesTracker } from '../../BotRuntimeController/useStartedRuntimesTracker';
-import { BotStatus } from '../../../constants';
-
-const state = {
-  projectId: '123a.23fs',
-  skillId: '456a.23fs',
-};
-
-const mocks = {
-  resetBotRuntimeError: jest.fn(),
-  publishToTarget: jest.fn(),
-  setBotStatus: jest.fn(),
-};
-
-const initRecoilState = (set) => {
-  set(botProjectIdsState, [state.projectId, state.skillId]);
-  set(projectMetaDataState(state.projectId), {
-    isRootBot: true,
-  });
-  set(projectMetaDataState(state.skillId), {
-    isRootBot: false,
-  });
-
-  set(dispatcherState, {
-    resetBotRuntimeError: mocks.resetBotRuntimeError,
-    publishToTarget: mocks.publishToTarget,
-    setBotStatus: mocks.setBotStatus,
-  });
-};
-
-// TODO: An integration test needs to be added to test this component better.
-describe('useBotStatusTracker', () => {
-  const onBotStartedAction = jest.fn();
-  afterEach(() => {
-    onBotStartedAction.mockClear();
-  });
-
-  it('should call action once tracked bots started or failed', async () => {
-    const rootBotId = '234.2234a';
-    const trackedProjectIds = ['124a.asd', '356b.asd'];
-    const wrapper = (props: { children?: React.ReactNode }) => {
-      const { children } = props;
-      const updateRecoilState = (set) => {
-        set(botProjectIdsState, [rootBotId, ...trackedProjectIds]);
-        set(botStatusState(trackedProjectIds[0]), BotStatus.connected);
-        set(botStatusState(trackedProjectIds[1]), BotStatus.failed);
-      };
-
-      return (
-        <RecoilRoot
-          initializeState={({ set }) => {
-            initRecoilState(set);
-            updateRecoilState(set);
-          }}
-        >
-          {children}
-        </RecoilRoot>
-      );
-    };
-
-    renderHook(() => useStartedRuntimesTracker(onBotStartedAction, trackedProjectIds), {
-      wrapper,
-    });
-    expect(onBotStartedAction).toHaveBeenCalledTimes(1);
-  });
-
-  it('should not call action if a tracked bot is still running', async () => {
-    const rootBotId = '234.2234a';
-    const trackedProjectIds = ['124a.asd', '356b.asd'];
-    const wrapper = (props: { children?: React.ReactNode }) => {
-      const { children } = props;
-      const updateRecoilState = (set) => {
-        set(botProjectIdsState, [rootBotId, ...trackedProjectIds]);
-        set(botStatusState(trackedProjectIds[0]), BotStatus.connected);
-        set(botStatusState(trackedProjectIds[1]), BotStatus.publishing);
-      };
-
-      return (
-        <RecoilRoot
-          initializeState={({ set }) => {
-            initRecoilState(set);
-            updateRecoilState(set);
-          }}
-        >
-          {children}
-        </RecoilRoot>
-      );
-    };
-
-    renderHook(() => useStartedRuntimesTracker(onBotStartedAction, trackedProjectIds), {
-      wrapper,
-    });
-    expect(onBotStartedAction).toHaveBeenCalledTimes(0);
-  });
-});
diff --git a/Composer/packages/client/src/constants.ts b/Composer/packages/client/src/constants.ts
index d7c865eb1..859fa3ebb 100644
--- a/Composer/packages/client/src/constants.ts
+++ b/Composer/packages/client/src/constants.ts
@@ -72,9 +72,8 @@ export const OpenStatus = {
 };
 
 export enum BotStatus {
-  queued = 'queued',
   connected = 'connected',
-  inactive = 'inactive',
+  unConnected = 'unConnected',
   publishing = 'publishing',
   published = 'published',
   reloading = 'loading',
@@ -91,8 +90,6 @@ export enum CreationFlowStatus {
   CLOSE = 'Close',
 }
 
-export type CreationFlowType = 'Bot' | 'Skill';
-
 export const Steps = {
   CREATE: 'CREATE',
   DEFINE: 'DEFINE',
@@ -100,26 +97,11 @@ export const Steps = {
   NONE: 'NONE',
 };
 
-export const BotStatusesCopy = {
-  connected: formatMessage('Running'),
-  publishing: formatMessage('Building'),
-  published: formatMessage('Starting'),
-  inactive: formatMessage('Inactive'),
-  failed: formatMessage('Failed to start'),
-  loading: formatMessage('Building'),
-  queued: formatMessage('Queued'),
-  reloading: formatMessage('Starting'),
-};
-
 export const DialogCreationCopy = {
   CREATE_NEW_BOT: {
     title: formatMessage('Create bot from template or scratch?'),
     subText: formatMessage('You can create a new bot from scratch with Composer, or start with a template.'),
   },
-  CREATE_NEW_SKILLBOT: {
-    title: formatMessage('Create a skill in your bot'),
-    subText: '',
-  },
   DEFINE_CONVERSATION_OBJECTIVE: {
     title: formatMessage('Define conversation objective'),
     subText: formatMessage(
@@ -197,13 +179,6 @@ export const addSkillDialog = {
   },
 };
 
-export const repairSkillDialog = (name: string) => {
-  return {
-    title: formatMessage('Link to this skill has been broken'),
-    subText: formatMessage('{name} cannot be found at the location.', { name }),
-  };
-};
-
 export const SupportedFileTypes = [
   'accdb',
   'csv',
diff --git a/Composer/packages/client/src/pages/botProject/AppIdAndPassword.tsx b/Composer/packages/client/src/pages/botProject/AppIdAndPassword.tsx
deleted file mode 100644
index 0c674291e..000000000
--- a/Composer/packages/client/src/pages/botProject/AppIdAndPassword.tsx
+++ /dev/null
@@ -1,149 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React, { useState, useEffect, useCallback } from 'react';
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import { TextField } from 'office-ui-fabric-react/lib/TextField';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import formatMessage from 'format-message';
-import { mergeStyleSets } from '@uifabric/styling';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { SharedColors } from '@uifabric/fluent-theme';
-
-import { dispatcherState, settingsState } from '../../recoilModel';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-const customerLabel = css`
-  font-size: ${FontSizes.small};
-  margin-right: 5px;
-`;
-
-const unknownIconStyle = (required) => {
-  return {
-    root: {
-      selectors: {
-        '&::before': {
-          content: required ? " '*'" : '',
-          color: SharedColors.red10,
-          paddingRight: 3,
-        },
-      },
-    },
-  };
-};
-
-const appIdAndPasswordStyle = css`
-  display: flex;
-  flex-direction: column;
-`;
-
-const customError = {
-  root: {
-    selectors: {
-      'p > span': {
-        width: '100%',
-      },
-    },
-  },
-};
-
-// -------------------- AppIdAndPassword -------------------- //
-
-type AppIdAndPasswordProps = {
-  projectId: string;
-};
-
-const onRenderLabel = (props) => {
-  return (
-    <div css={labelContainer}>
-      <div css={customerLabel}> {props.label} </div>
-      <TooltipHost content={props.label}>
-        <Icon iconName="Unknown" styles={unknownIconStyle(props.required)} />
-      </TooltipHost>
-    </div>
-  );
-};
-
-export const AppIdAndPassword: React.FC<AppIdAndPasswordProps> = (props) => {
-  const { projectId } = props;
-  const { MicrosoftAppId, MicrosoftAppPassword } = useRecoilValue(settingsState(projectId));
-  const [localMicrosoftAppId, setLocalMicrosoftAppId] = useState<string>('');
-  const [localMicrosoftAppPassword, setLocalMicrosoftAppPassword] = useState<string>('');
-  const { setSettings } = useRecoilValue(dispatcherState);
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector) || '';
-  const settings = useRecoilValue(settingsState(projectId));
-  const mergedSettings = mergePropertiesManagedByRootBot(projectId, rootBotProjectId, settings);
-  useEffect(() => {
-    setLocalMicrosoftAppId(MicrosoftAppId ?? '');
-    setLocalMicrosoftAppPassword(MicrosoftAppPassword ?? '');
-  }, [projectId]);
-
-  const handleAppIdOnChange = (e, value) => {
-    setLocalMicrosoftAppId(value);
-  };
-
-  const handleAppPasswordOnChange = (e, value) => {
-    setLocalMicrosoftAppPassword(value);
-  };
-
-  const handleAppPasswordOnBlur = useCallback(() => {
-    setSettings(projectId, {
-      ...mergedSettings,
-      MicrosoftAppPassword: localMicrosoftAppPassword,
-    });
-  }, [projectId, mergedSettings, localMicrosoftAppPassword]);
-
-  const handleAppIdOnBlur = useCallback(() => {
-    setSettings(projectId, {
-      ...mergedSettings,
-      MicrosoftAppId: localMicrosoftAppId,
-    });
-  }, [projectId, mergedSettings, localMicrosoftAppId]);
-
-  return (
-    <CollapsableWrapper title={formatMessage('App Id / Password')} titleStyle={titleStyle}>
-      <div css={appIdAndPasswordStyle}>
-        <TextField
-          aria-labelledby={'Microsoft App Id'}
-          data-testid={'MicrosoftAppId'}
-          label={formatMessage('Microsoft App Id')}
-          placeholder={'Enter Microsoft App Id'}
-          styles={customError}
-          value={localMicrosoftAppId}
-          onBlur={handleAppIdOnBlur}
-          onChange={handleAppIdOnChange}
-          onRenderLabel={onRenderLabel}
-        />
-        <TextField
-          aria-labelledby={'Microsoft Password'}
-          data-testid={'MicrosoftPassword'}
-          label={formatMessage('Microsoft App Password')}
-          placeholder={'Enter Microsoft App Password'}
-          styles={mergeStyleSets({ root: { marginTop: 15 } }, customError)}
-          value={localMicrosoftAppPassword}
-          onBlur={handleAppPasswordOnBlur}
-          onChange={handleAppPasswordOnChange}
-          onRenderLabel={onRenderLabel}
-        />
-      </div>
-    </CollapsableWrapper>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/BotLanguage.tsx b/Composer/packages/client/src/pages/botProject/BotLanguage.tsx
deleted file mode 100644
index 7cf9a137c..000000000
--- a/Composer/packages/client/src/pages/botProject/BotLanguage.tsx
+++ /dev/null
@@ -1,220 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React, { Fragment, useMemo } from 'react';
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import formatMessage from 'format-message';
-import cloneDeep from 'lodash/cloneDeep';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
-
-import { dispatcherState, settingsState } from '../../recoilModel';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { languageListTemplates } from '../../components/MultiLanguage';
-import { localeState, showAddLanguageModalState } from '../../recoilModel/atoms';
-import { AddLanguageModal } from '../../components/MultiLanguage';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const botLanguageContainerStyle = css`
-  display: flex;
-  flex-direction: column;
-`;
-
-const botLanguageDescriptionStyle = css`
-  font-size: ${FontSizes.small};
-  color: ${NeutralColors.gray130};
-`;
-
-const botLanguageFieldStyle = css`
-  font-size: ${FontSizes.small};
-  color: ${NeutralColors.black};
-  overflow-y: auto;
-  max-height: 150px;
-  border: 1px solid #c4c4c4;
-  margin-top: 17px;
-  padding: 10px;
-`;
-
-const manageBotLanguage = {
-  root: {
-    height: 30,
-    fontSize: FontSizes.smallPlus,
-    fontWeight: FontWeights.regular,
-    color: SharedColors.cyanBlue10,
-    paddingLeft: 0,
-  },
-};
-
-const languageItem = css`
-  &:hover {
-    background: #ebebeb;
-  }
-`;
-
-const languageRowContainer = css`
-  display: flex;
-  height: 30px;
-  line-height: 30px;
-`;
-
-const languageItemContainer = css`
-  display: flex;
-  width: 100%;
-  justify-content: space-between;
-  &:hover .ms-Button {
-    visibility: visible;
-  }
-`;
-
-const languageButton = {
-  root: {
-    fontSize: FontSizes.small,
-    fontWeight: FontWeights.regular,
-    color: SharedColors.cyanBlue10,
-    height: 30,
-    visibility: 'hidden',
-  },
-};
-
-const defaultLanguageTextStyle = css`
-  color: #898989;
-  font-size: 8px;
-`;
-
-const languageTextStyle = css`
-  color: ${NeutralColors.black};
-  font-size: 12px;
-`;
-
-const languageButtonContainer = css`
-  display: flex;
-  justify-content: space-between;
-  width: 240px;
-`;
-
-// -------------------- BotLanguage -------------------- //
-
-type BotLanguageProps = {
-  projectId: string;
-};
-
-export const BotLanguage: React.FC<BotLanguageProps> = (props) => {
-  const { projectId } = props;
-  const { languages, defaultLanguage } = useRecoilValue(settingsState(projectId));
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector) || '';
-  const settings = useRecoilValue(settingsState(projectId));
-  const mergedSettings = mergePropertiesManagedByRootBot(projectId, rootBotProjectId, settings);
-  const locale = useRecoilValue(localeState(projectId));
-  const showAddLanguageModal = useRecoilValue(showAddLanguageModalState(projectId));
-  const {
-    addLanguageDialogBegin,
-    setSettings,
-    deleteLanguages,
-    setLocale,
-    addLanguageDialogCancel,
-    addLanguages,
-  } = useRecoilValue(dispatcherState);
-
-  const languageListOptions = useMemo(() => {
-    const languageList = languageListTemplates(languages, locale, defaultLanguage);
-    const enableLanguages = languageList.filter(({ isEnabled }) => !!isEnabled);
-    return enableLanguages.map((item) => {
-      const { language, locale } = item;
-      return {
-        key: locale,
-        title: locale,
-        text: language,
-      };
-    });
-  }, [languages]);
-
-  const onAddLangModalSubmit = async (formData) => {
-    await addLanguages({
-      ...formData,
-      projectId,
-    });
-  };
-
-  const setDefaultLanguage = (language: string) => {
-    setLocale(language, projectId);
-    const updatedSetting = { ...cloneDeep(mergedSettings), defaultLanguage: language };
-    if (updatedSetting?.luis?.defaultLanguage) {
-      updatedSetting.luis.defaultLanguage = language;
-    }
-    setSettings(projectId, updatedSetting);
-  };
-
-  const index = languageListOptions.findIndex((l) => l.key === defaultLanguage);
-  const dl = languageListOptions.splice(index, 1)[0];
-  languageListOptions.unshift(dl);
-
-  return (
-    <Fragment>
-      <CollapsableWrapper title={formatMessage('Bot language')} titleStyle={titleStyle}>
-        <div css={botLanguageContainerStyle}>
-          <div css={botLanguageDescriptionStyle}>
-            {formatMessage(
-              'List of languages that bot will be able to understand (User input) and respond to (Bot responses). To make this bot available in other languages, click ‘Manage bot languages’ to create a copy of the default language, and translate the content into the new language.'
-            )}
-          </div>
-          <div css={botLanguageFieldStyle}>
-            {languageListOptions.map((l) => (
-              <div key={l.key} css={languageRowContainer}>
-                {l.key === defaultLanguage && (
-                  <div css={languageTextStyle} data-testid={'defaultLanguage'}>
-                    {l.text}
-                    <span css={defaultLanguageTextStyle}> {formatMessage('DEFAULT LANGUAGE')}</span>
-                  </div>
-                )}
-                {l.key !== defaultLanguage && (
-                  <div css={languageItemContainer}>
-                    <div css={languageItem}>{l.text}</div>
-                    <div css={languageButtonContainer}>
-                      <ActionButton
-                        data-testid={'setDefaultLanguage'}
-                        styles={languageButton}
-                        onClick={(e) => setDefaultLanguage(l.key)}
-                      >
-                        {formatMessage('Set it as default language')}
-                      </ActionButton>
-                      <ActionButton
-                        data-testid={'remove'}
-                        styles={languageButton}
-                        onClick={() => deleteLanguages({ languages: [l.key], projectId: projectId })}
-                      >
-                        {formatMessage('Remove')}
-                      </ActionButton>
-                    </div>
-                  </div>
-                )}
-              </div>
-            ))}
-          </div>
-          <ActionButton styles={manageBotLanguage} onClick={() => addLanguageDialogBegin(projectId, () => {})}>
-            {formatMessage('Manage bot languages')}
-          </ActionButton>
-        </div>
-      </CollapsableWrapper>
-      <AddLanguageModal
-        defaultLanguage={defaultLanguage}
-        isOpen={showAddLanguageModal}
-        languages={languages}
-        locale={locale}
-        onDismiss={() => addLanguageDialogCancel(projectId)}
-        onSubmit={onAddLangModalSubmit}
-      />
-    </Fragment>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/BotProjectSettings.tsx b/Composer/packages/client/src/pages/botProject/BotProjectSettings.tsx
deleted file mode 100644
index 77fe48b1d..000000000
--- a/Composer/packages/client/src/pages/botProject/BotProjectSettings.tsx
+++ /dev/null
@@ -1,165 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import React, { useMemo, useState, Suspense } from 'react';
-import formatMessage from 'format-message';
-import { RouteComponentProps } from '@reach/router';
-import { JsonEditor } from '@bfc/code-editor';
-import { Toggle } from 'office-ui-fabric-react/lib/Toggle';
-import { DialogSetting } from '@bfc/shared';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { NeutralColors } from '@uifabric/fluent-theme';
-
-import { LoadingSpinner } from '../../components/LoadingSpinner';
-import { INavTreeItem } from '../../components/NavTree';
-import { Page } from '../../components/Page';
-import { dispatcherState } from '../../recoilModel';
-import { settingsState, userSettingsState, schemasState } from '../../recoilModel/atoms';
-import { localBotsDataSelector, rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-import { createBotSettingUrl, navigateTo } from '../../utils/navigation';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-
-import BotProjectSettingsTableView from './BotProjectSettingsTableView';
-
-// -------------------- Styles -------------------- //
-
-const header = css`
-  padding: 5px 20px;
-  display: flex;
-  flex-direction: column;
-  flex-shrink: 0;
-  justify-content: space-between;
-  label: PageHeader;
-`;
-
-const container = css`
-  display: flex;
-  flex-direction: column;
-  max-width: 1000px;
-  height: 100%;
-`;
-
-const botNameStyle = css`
-  font-size: ${FontSizes.xLarge};
-  font-weight: ${FontWeights.semibold};
-  color: ${NeutralColors.black};
-`;
-
-const mainContentHeader = css`
-  display: flex;
-  justify-content: space-between;
-  margin-bottom: 15px;
-`;
-
-// -------------------- BotProjectSettings -------------------- //
-
-const BotProjectSettings: React.FC<RouteComponentProps<{ projectId: string; skillId: string }>> = (props) => {
-  const { projectId = '', skillId } = props;
-  const botProjects = useRecoilValue(localBotsDataSelector);
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector);
-  const userSettings = useRecoilValue(userSettingsState);
-  const currentProjectId = skillId ?? projectId;
-  const schemas = useRecoilValue(schemasState(currentProjectId));
-  const botProject = botProjects.find((b) => b.projectId === currentProjectId);
-
-  const isRootBot = !!botProject?.isRootBot;
-  const botName = botProject?.name;
-  const settings = useRecoilValue(settingsState(currentProjectId));
-  const mergedSettings = mergePropertiesManagedByRootBot(currentProjectId, rootBotProjectId, settings);
-
-  const [isAdvancedSettingsEnabled, setAdvancedSettingsEnabled] = useState<boolean>(false);
-
-  const { setSettings } = useRecoilValue(dispatcherState);
-
-  const navLinks: INavTreeItem[] = useMemo(() => {
-    const localBotProjects = botProjects.filter((b) => !b.isRemote);
-    const newbotProjectLinks: INavTreeItem[] = localBotProjects.map((b) => {
-      return {
-        id: b.projectId,
-        name: b.name,
-        ariaLabel: formatMessage('bot'),
-        url: createBotSettingUrl(rootBotProjectId ?? '', b.projectId),
-        isRootBot: b.isRootBot,
-      };
-    });
-    const rootBotIndex = localBotProjects.findIndex((link) => link.isRootBot);
-
-    if (rootBotIndex > -1) {
-      const rootBotLink = newbotProjectLinks.splice(rootBotIndex, 1)[0];
-      newbotProjectLinks.splice(0, 0, rootBotLink);
-    }
-    return newbotProjectLinks;
-  }, [botProjects]);
-
-  const onRenderHeaderContent = () => {
-    return formatMessage(
-      'This Page contains detailed information about your bot. For security reasons, they are hidden by default. To test your bot or publish to Azure, you may need to provide these settings'
-    );
-  };
-
-  const saveChangeResult = (result: DialogSetting) => {
-    setSettings(currentProjectId, result);
-  };
-
-  const handleChange = (result: any) => {
-    // prevent result was undefined, it will cause error
-    if (result && typeof result === 'object') {
-      saveChangeResult(result);
-    }
-  };
-
-  if (!botProject) {
-    navigateTo(`/bot/${rootBotProjectId}/botProjectsSettings`);
-    return null;
-  }
-
-  return (
-    <Page
-      data-testid="BotProjectsSettings"
-      headerStyle={header}
-      mainRegionName={formatMessage('Bot projects settings list View')}
-      navLinks={navLinks}
-      navRegionName={formatMessage('Bot Projects Settings Navigation Pane')}
-      pageMode={'botProjectsSettings'}
-      shouldShowEditorError={false}
-      title={formatMessage('Bot management and configurations')}
-      toolbarItems={[]}
-      onRenderHeaderContent={onRenderHeaderContent}
-    >
-      <Suspense fallback={<LoadingSpinner />}>
-        <div css={container}>
-          <div css={mainContentHeader}>
-            <div css={botNameStyle}>
-              {`${botName} (${isRootBot ? formatMessage('Root Bot') : formatMessage('Skill')})`}
-            </div>
-            <Toggle
-              inlineLabel
-              checked={isAdvancedSettingsEnabled}
-              className={'advancedSettingsView'}
-              defaultChecked={false}
-              label={formatMessage('Advanced Settings View (json)')}
-              onChange={() => setAdvancedSettingsEnabled(!isAdvancedSettingsEnabled)}
-            />
-          </div>
-          {isAdvancedSettingsEnabled ? (
-            <JsonEditor
-              key={'settingsjson'}
-              editorSettings={userSettings.codeEditor}
-              id={currentProjectId}
-              schema={schemas.sdk.content}
-              value={mergedSettings}
-              onChange={handleChange}
-            />
-          ) : (
-            <BotProjectSettingsTableView projectId={currentProjectId} scrollToSectionId={props.location?.hash} />
-          )}
-        </div>
-      </Suspense>
-    </Page>
-  );
-};
-
-export default BotProjectSettings;
diff --git a/Composer/packages/client/src/pages/botProject/BotProjectSettingsTableView.tsx b/Composer/packages/client/src/pages/botProject/BotProjectSettingsTableView.tsx
deleted file mode 100644
index df30587d8..000000000
--- a/Composer/packages/client/src/pages/botProject/BotProjectSettingsTableView.tsx
+++ /dev/null
@@ -1,58 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import React from 'react';
-import { RouteComponentProps } from '@reach/router';
-
-import { localBotsDataSelector } from '../../recoilModel/selectors/project';
-
-import { SkillHostEndPoint } from './SkillHostEndPoint';
-import { AppIdAndPassword } from './AppIdAndPassword';
-import { ExternalService } from './ExternalService';
-import { BotLanguage } from './BotLanguage';
-import { RuntimeSettings } from './RuntimeSettings';
-import { PublishTargets } from './PublishTargets';
-import { DeleteBotButton } from './DeleteBotButton';
-
-// -------------------- Styles -------------------- //
-
-const container = css`
-  display: flex;
-  flex-direction: column;
-  max-width: 1000px;
-  height: 100%;
-`;
-
-const publishTargetsWrap = (isLastComponent) => css`
-  margin-bottom: ${isLastComponent ? '120px' : 0};
-`;
-
-// -------------------- BotProjectSettingsTableView -------------------- //
-
-export const BotProjectSettingsTableView: React.FC<RouteComponentProps<{
-  projectId: string;
-  scrollToSectionId: string;
-}>> = (props) => {
-  const { projectId = '', scrollToSectionId = '' } = props;
-  const botProjects = useRecoilValue(localBotsDataSelector);
-  const botProject = botProjects.find((b) => b.projectId === projectId);
-  const isRootBot = !!botProject?.isRootBot;
-  return (
-    <div css={container}>
-      {isRootBot && <SkillHostEndPoint projectId={projectId} />}
-      <AppIdAndPassword projectId={projectId} />
-      <ExternalService projectId={projectId} scrollToSectionId={scrollToSectionId} />
-      <BotLanguage projectId={projectId} />
-      <RuntimeSettings projectId={projectId} />
-      <div css={publishTargetsWrap(!isRootBot)}>
-        <PublishTargets projectId={projectId} scrollToSectionId={scrollToSectionId} />
-      </div>
-      {isRootBot && <DeleteBotButton projectId={projectId} />}
-    </div>
-  );
-};
-
-export default BotProjectSettingsTableView;
diff --git a/Composer/packages/client/src/pages/botProject/DeleteBotButton.tsx b/Composer/packages/client/src/pages/botProject/DeleteBotButton.tsx
deleted file mode 100644
index 40fe860a1..000000000
--- a/Composer/packages/client/src/pages/botProject/DeleteBotButton.tsx
+++ /dev/null
@@ -1,128 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React from 'react';
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import formatMessage from 'format-message';
-import { FontIcon } from 'office-ui-fabric-react/lib/Icon';
-import { Button } from 'office-ui-fabric-react/lib/Button';
-import { Text } from 'office-ui-fabric-react/lib/Text';
-import { FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
-
-import { OpenConfirmModal } from '../../components/Modal/ConfirmDialog';
-import { navigateTo } from '../../utils/navigation';
-import { dispatcherState } from '../../recoilModel';
-
-// -------------------- Styles -------------------- //
-
-const marginBottom = css`
-  margin-bottom: 140px;
-`;
-
-const deleteBotText = css`
-  font-weight: ${FontWeights.semibold};
-  font-size: 12px;
-  margin-bottom: 20px;
-`;
-
-const deleteBotButton = {
-  root: {
-    height: 32,
-    width: 82,
-    background: SharedColors.cyanBlue10,
-    color: NeutralColors.white,
-  },
-  rootHovered: {
-    background: SharedColors.cyanBlue10,
-    color: NeutralColors.white,
-  },
-};
-
-// -------------------- DeleteBotButton -------------------- //
-
-type DeleteBotButtonProps = {
-  projectId: string;
-};
-
-export const DeleteBotButton: React.FC<DeleteBotButtonProps> = (props) => {
-  const { projectId } = props;
-  const { deleteBot } = useRecoilValue(dispatcherState);
-  const openDeleteBotModal = async () => {
-    const boldWarningText = formatMessage(
-      'Warning: the action you are about to take cannot be undone. Going further will delete this bot and any related files in the bot project folder.'
-    );
-    const warningText = formatMessage('External resources will not be changed.');
-    const title = formatMessage('Delete Bot');
-    const checkboxLabel = formatMessage('I want to delete this bot');
-    const settings = {
-      onRenderContent: () => {
-        return (
-          <div
-            style={{
-              background: '#ffddcc',
-              display: 'flex',
-              flexDirection: 'row',
-              marginBottom: '24px',
-            }}
-          >
-            <FontIcon
-              iconName="Warning12"
-              style={{
-                color: '#DD4400',
-                fontSize: 36,
-                padding: '32px',
-              }}
-            />
-            <div
-              style={{
-                display: 'flex',
-                flexDirection: 'column',
-              }}
-            >
-              <Text
-                block
-                style={{
-                  fontWeight: 'bold',
-                  marginTop: '24px',
-                  marginRight: '24px',
-                  marginBottom: '24px',
-                }}
-              >
-                {boldWarningText}
-              </Text>
-              <Text
-                block
-                style={{
-                  marginRight: '24px',
-                  marginBottom: '24px',
-                }}
-              >
-                {warningText}
-              </Text>
-            </div>
-          </div>
-        );
-      },
-      disabled: true,
-      checkboxLabel,
-      confirmBtnText: formatMessage('Delete'),
-    };
-    const res = await OpenConfirmModal(title, null, settings);
-    if (res) {
-      await deleteBot(projectId);
-      navigateTo('home');
-    }
-  };
-
-  return (
-    <div css={marginBottom}>
-      <div css={deleteBotText}> {formatMessage('Delete this bot')}</div>
-      <Button styles={deleteBotButton} onClick={openDeleteBotModal}>
-        {formatMessage('Delete')}
-      </Button>
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/ExternalService.tsx b/Composer/packages/client/src/pages/botProject/ExternalService.tsx
deleted file mode 100644
index 2dc66b0ed..000000000
--- a/Composer/packages/client/src/pages/botProject/ExternalService.tsx
+++ /dev/null
@@ -1,29 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React from 'react';
-import { jsx } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-
-import { RootBotExternalService } from './RootBotExternalService';
-import { SkillBotExternalService } from './SkillBotExternalService';
-
-// -------------------- ExternalService -------------------- //
-type ExternalServiceProps = {
-  projectId: string;
-  scrollToSectionId?: string;
-};
-
-export const ExternalService: React.FC<ExternalServiceProps> = (props) => {
-  const { projectId, scrollToSectionId = '' } = props;
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector) || '';
-  const isRootBot = rootBotProjectId === projectId;
-  return isRootBot ? (
-    <RootBotExternalService projectId={projectId} scrollToSectionId={scrollToSectionId} />
-  ) : (
-    <SkillBotExternalService projectId={projectId} scrollToSectionId={scrollToSectionId} />
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/PublishTargets.tsx b/Composer/packages/client/src/pages/botProject/PublishTargets.tsx
deleted file mode 100644
index 1ac84ecd9..000000000
--- a/Composer/packages/client/src/pages/botProject/PublishTargets.tsx
+++ /dev/null
@@ -1,254 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React, { Fragment, useState, useCallback, useEffect } from 'react';
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import { PublishTarget } from '@bfc/shared';
-import formatMessage from 'format-message';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import { DialogType } from 'office-ui-fabric-react/lib/Dialog';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
-import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
-
-import { dispatcherState, settingsState, publishTypesState } from '../../recoilModel';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { CreatePublishTarget } from '../publish/createPublishTarget';
-
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const publishTargetsContainer = css`
-  display: flex;
-  flex-direction: column;
-`;
-
-const publishTargetsHeader = css`
-  display: flex;
-  flex-direction: row;
-  height: 42px;
-`;
-
-const publishTargetsHeaderText = css`
-  width: 200px;
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  border-bottom: 1px solid ${NeutralColors.gray30};
-  padding-top: 10px;
-  padding-left: 10px;
-`;
-
-const publishTargetsItem = css`
-  display: flex;
-  flex-direction: row;
-  height: 42px;
-`;
-
-const publishTargetsItemText = css`
-  width: 200px;
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.regular};
-  border-bottom: 1px solid ${NeutralColors.gray30};
-  padding-top: 10px;
-  padding-left: 10px;
-`;
-
-const addPublishProfile = {
-  root: {
-    fontSize: 12,
-    fontWeight: FontWeights.regular,
-    color: SharedColors.cyanBlue10,
-    paddingLeft: 0,
-    marginLeft: 5,
-  },
-};
-
-const editPublishProfile = {
-  root: {
-    fontSize: 12,
-    fontWeight: FontWeights.regular,
-    color: SharedColors.cyanBlue10,
-    paddingLeft: 0,
-    paddingBottom: 5,
-  },
-};
-
-const publishTargetsEditButton = css`
-  width: 200px;
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.regular};
-  border-bottom: 1px solid ${NeutralColors.gray30};
-  padding-top: 3px;
-  padding-left: 10px;
-`;
-
-// -------------------- PublishTargets -------------------- //
-
-type PublishTargetsProps = {
-  projectId: string;
-  scrollToSectionId?: string;
-};
-
-export const PublishTargets: React.FC<PublishTargetsProps> = (props) => {
-  const { projectId, scrollToSectionId = '' } = props;
-  const { publishTargets } = useRecoilValue(settingsState(projectId));
-  const { getPublishTargetTypes, setPublishTargets } = useRecoilValue(dispatcherState);
-  const publishTypes = useRecoilValue(publishTypesState(projectId));
-  const [editTarget, setEditTarget] = useState<{ index: number; item: PublishTarget } | null>(null);
-  const [editDialogProps, setEditDialogProps] = useState({
-    title: formatMessage('Title'),
-    type: DialogType.normal,
-    children: {},
-  });
-
-  const [dialogProps, setDialogProps] = useState({
-    title: formatMessage('Title'),
-    type: DialogType.normal,
-    children: {},
-  });
-
-  const [addDialogHidden, setAddDialogHidden] = useState(true);
-  const [editDialogHidden, setEditDialogHidden] = useState(true);
-
-  const publishTargetsRef = React.useRef<HTMLDivElement>(null);
-
-  const onEdit = useCallback(
-    async (index: number, item: PublishTarget) => {
-      const newItem = { item: item, index: index };
-      setEditTarget(newItem);
-      setEditDialogHidden(false);
-    },
-    [publishTargets]
-  );
-
-  const updatePublishTarget = useCallback(
-    async (name: string, type: string, configuration: string) => {
-      if (!editTarget) {
-        return;
-      }
-
-      const targets = publishTargets ? [...publishTargets] : [];
-
-      targets[editTarget.index] = {
-        name,
-        type,
-        configuration,
-      };
-
-      await setPublishTargets(targets, projectId);
-    },
-    [publishTargets, projectId, editTarget]
-  );
-
-  const savePublishTarget = useCallback(
-    async (name: string, type: string, configuration: string) => {
-      const targets = [...(publishTargets || []), { name, type, configuration }];
-      await setPublishTargets(targets, projectId);
-    },
-    [publishTargets, projectId]
-  );
-
-  useEffect(() => {
-    setDialogProps({
-      title: formatMessage('Add a publish profile'),
-      type: DialogType.normal,
-      children: (
-        <CreatePublishTarget
-          closeDialog={() => setAddDialogHidden(true)}
-          current={null}
-          targets={publishTargets || []}
-          types={publishTypes}
-          updateSettings={savePublishTarget}
-        />
-      ),
-    });
-  }, [publishTypes, savePublishTarget, publishTargets]);
-
-  useEffect(() => {
-    setEditDialogProps({
-      title: formatMessage('Edit a publish profile'),
-      type: DialogType.normal,
-      children: (
-        <CreatePublishTarget
-          closeDialog={() => setEditDialogHidden(true)}
-          current={editTarget ? editTarget.item : null}
-          targets={(publishTargets || []).filter((item) => editTarget && item.name !== editTarget.item.name)}
-          types={publishTypes}
-          updateSettings={updatePublishTarget}
-        />
-      ),
-    });
-  }, [editTarget, publishTypes, updatePublishTarget]);
-
-  useEffect(() => {
-    if (projectId) {
-      getPublishTargetTypes(projectId);
-    }
-  }, [projectId]);
-
-  useEffect(() => {
-    if (publishTargetsRef.current && scrollToSectionId === '#addNewPublishProfile') {
-      publishTargetsRef.current.scrollIntoView({ behavior: 'smooth' });
-    }
-  }, [scrollToSectionId]);
-
-  return (
-    <Fragment>
-      <CollapsableWrapper title={formatMessage('Publish targets')} titleStyle={titleStyle}>
-        <div ref={publishTargetsRef} css={publishTargetsContainer} id="addNewPublishProfile">
-          <div css={publishTargetsHeader}>
-            <div css={publishTargetsHeaderText}>{formatMessage('Name')} </div>
-            <div css={publishTargetsHeaderText}>{formatMessage('Type')} </div>
-            <div css={publishTargetsHeaderText}> </div>
-          </div>
-          {publishTargets?.map((p, index) => {
-            return (
-              <div key={index} css={publishTargetsItem}>
-                <div css={publishTargetsItemText}>{p.name} </div>
-                <div css={publishTargetsItemText}>{p.type} </div>
-                <div css={publishTargetsEditButton}>
-                  <ActionButton styles={editPublishProfile} onClick={async () => await onEdit(index, p)}>
-                    {formatMessage('Edit')}
-                  </ActionButton>
-                </div>
-              </div>
-            );
-          })}
-          <ActionButton
-            data-testid={'addNewPublishProfile'}
-            styles={addPublishProfile}
-            onClick={() => setAddDialogHidden(false)}
-          >
-            {formatMessage('Add new publish profile')}
-          </ActionButton>
-        </div>
-      </CollapsableWrapper>
-      <DialogWrapper
-        dialogType={DialogTypes.Customer}
-        isOpen={!addDialogHidden}
-        minWidth={450}
-        title={dialogProps.title}
-        onDismiss={() => setAddDialogHidden(true)}
-      >
-        {dialogProps.children}
-      </DialogWrapper>
-      <DialogWrapper
-        dialogType={DialogTypes.Customer}
-        isOpen={!editDialogHidden}
-        minWidth={450}
-        title={editDialogProps.title}
-        onDismiss={() => setEditDialogHidden(true)}
-      >
-        {editDialogProps.children}
-      </DialogWrapper>
-    </Fragment>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/RootBotExternalService.tsx b/Composer/packages/client/src/pages/botProject/RootBotExternalService.tsx
deleted file mode 100644
index c84325d63..000000000
--- a/Composer/packages/client/src/pages/botProject/RootBotExternalService.tsx
+++ /dev/null
@@ -1,318 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React, { useState, useEffect } from 'react';
-import { jsx } from '@emotion/core';
-import { mergeStyleSets } from '@uifabric/styling';
-import { useRecoilValue } from 'recoil';
-import { TextField } from 'office-ui-fabric-react/lib/TextField';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import formatMessage from 'format-message';
-import get from 'lodash/get';
-import { css } from '@emotion/core';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
-
-import {
-  dispatcherState,
-  settingsState,
-  luFilesState,
-  qnaFilesState,
-  validateDialogsSelectorFamily,
-} from '../../recoilModel';
-import settingStorage from '../../utils/dialogSettingStorage';
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { isLUISMandatory, isQnAKeyMandatory } from '../../utils/dialogValidator';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-const customerLabel = css`
-  font-size: ${FontSizes.small};
-  margin-right: 5px;
-`;
-
-const unknownIconStyle = (required) => {
-  return {
-    root: {
-      selectors: {
-        '&::before': {
-          content: required ? " '*'" : '',
-          color: SharedColors.red10,
-          paddingRight: 3,
-        },
-      },
-    },
-  };
-};
-
-const externalServiceContainerStyle = css`
-  display: flex;
-  flex-direction: column;
-`;
-
-const errorContainer = css`
-  display: flex;
-  width: 100%;
-  height: 48px;
-  line-height: 48px;
-  background: #fed9cc;
-  color: ${NeutralColors.black};
-`;
-
-const customError = {
-  root: {
-    selectors: {
-      'p > span': {
-        width: '100%',
-      },
-    },
-  },
-};
-
-const errorIcon = {
-  root: {
-    color: '#A80000',
-    marginRight: 8,
-    paddingLeft: 12,
-    fontSize: FontSizes.mediumPlus,
-  },
-};
-
-const errorTextStyle = css`
-  margin-bottom: 5px;
-`;
-
-// -------------------- ExternalService -------------------- //
-
-type RootBotExternalServiceProps = {
-  projectId: string;
-  scrollToSectionId?: string;
-};
-
-const onRenderLabel = (props) => {
-  return (
-    <div css={labelContainer}>
-      <div css={customerLabel}> {props.label} </div>
-      <TooltipHost content={props.label}>
-        <Icon iconName="Unknown" styles={unknownIconStyle(props.required)} />
-      </TooltipHost>
-    </div>
-  );
-};
-
-const errorElement = (errorText: string) => {
-  if (!errorText) return '';
-  return (
-    <div css={errorContainer}>
-      <Icon iconName="ErrorBadge" styles={errorIcon} />
-      <div css={errorTextStyle}>{errorText}</div>
-    </div>
-  );
-};
-
-export const RootBotExternalService: React.FC<RootBotExternalServiceProps> = (props) => {
-  const { projectId, scrollToSectionId = '' } = props;
-  const { setSettings, setQnASettings } = useRecoilValue(dispatcherState);
-
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector) || '';
-  const settings = useRecoilValue(settingsState(projectId));
-  const mergedSettings = mergePropertiesManagedByRootBot(projectId, rootBotProjectId, settings);
-  const sensitiveGroupManageProperty = settingStorage.get(rootBotProjectId);
-
-  const groupLUISAuthoringKey = get(sensitiveGroupManageProperty, 'luis.authoringKey', {});
-  const rootLuisKey = groupLUISAuthoringKey.root;
-  const groupLUISRegion = get(sensitiveGroupManageProperty, 'luis.authoringRegion', {});
-  const rootLuisRegion = groupLUISRegion.root;
-  const groupQnAKey = get(sensitiveGroupManageProperty, 'qna.subscriptionKey', {});
-  const rootqnaKey = groupQnAKey.root;
-
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
-  const luFiles = useRecoilValue(luFilesState(projectId));
-  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
-  const isLUISKeyNeeded = isLUISMandatory(dialogs, luFiles);
-  const isQnAKeyNeeded = isQnAKeyMandatory(dialogs, qnaFiles);
-
-  const [luisKeyErrorMsg, setLuisKeyErrorMsg] = useState<string>('');
-  const [luisRegionErrorMsg, setLuisRegionErrorMsg] = useState<string>('');
-  const [qnaKeyErrorMsg, setQnAKeyErrorMsg] = useState<string>('');
-
-  const [localRootLuisKey, setLocalRootLuisKey] = useState<string>(rootLuisKey ?? '');
-  const [localRootQnAKey, setLocalRootQnAKey] = useState<string>(rootqnaKey ?? '');
-  const [localRootLuisRegion, setLocalRootLuisRegion] = useState<string>(rootLuisRegion ?? '');
-
-  const luisKeyFieldRef = React.useRef<HTMLInputElement>(null);
-  const qnaKeyFieldRef = React.useRef<HTMLInputElement>(null);
-
-  useEffect(() => {
-    if (!localRootLuisKey) {
-      setLuisKeyErrorMsg(
-        formatMessage('LUIS Key is required with the current recognizer setting to start your bot locally, and publish')
-      );
-    } else {
-      setLuisKeyErrorMsg('');
-    }
-    if (!localRootQnAKey) {
-      setQnAKeyErrorMsg(formatMessage('QnA Maker subscription Key is required to start your bot locally, and publish'));
-    } else {
-      setQnAKeyErrorMsg('');
-    }
-
-    if (isLUISKeyNeeded && !localRootLuisRegion) {
-      setLuisRegionErrorMsg(formatMessage('LUIS Region is required'));
-    } else {
-      setLuisRegionErrorMsg('');
-    }
-  }, [projectId]);
-
-  useEffect(() => {
-    setLocalRootLuisKey(rootLuisKey);
-  }, [rootLuisKey]);
-
-  useEffect(() => {
-    if (luisKeyFieldRef.current && scrollToSectionId === '#luisKey') {
-      luisKeyFieldRef.current.scrollIntoView({ behavior: 'smooth' });
-    }
-    if (qnaKeyFieldRef.current && scrollToSectionId === '#qnaKey') {
-      qnaKeyFieldRef.current.scrollIntoView({ behavior: 'smooth' });
-    }
-  }, [scrollToSectionId]);
-
-  const handleRootLUISKeyOnChange = (e, value) => {
-    if (value) {
-      setLuisKeyErrorMsg('');
-      setLocalRootLuisKey(value);
-    } else {
-      setLuisKeyErrorMsg(
-        formatMessage('LUIS Key is required with the current recognizer setting to start your bot locally, and publish')
-      );
-      setLocalRootLuisKey('');
-    }
-  };
-
-  const handleRootQnAKeyOnChange = (e, value) => {
-    if (value) {
-      setQnAKeyErrorMsg('');
-      setLocalRootQnAKey(value);
-    } else {
-      setQnAKeyErrorMsg(formatMessage('QnA Maker subscription Key is required to start your bot locally, and publish'));
-      setLocalRootQnAKey('');
-    }
-  };
-
-  const handleRootLuisRegionOnChange = (e, value) => {
-    if (value) {
-      setLuisRegionErrorMsg('');
-      setLocalRootLuisRegion(value);
-    } else {
-      setLuisRegionErrorMsg(formatMessage('LUIS Region is required'));
-      setLocalRootLuisRegion('');
-    }
-  };
-
-  const handleRootLuisRegionOnBlur = () => {
-    if (isLUISKeyNeeded && !localRootLuisRegion) {
-      setLuisRegionErrorMsg(formatMessage('LUIS Region is required'));
-    }
-    setSettings(projectId, {
-      ...mergedSettings,
-      luis: { ...mergedSettings.luis, authoringRegion: localRootLuisRegion },
-    });
-  };
-
-  const handleRootLuisKeyOnBlur = () => {
-    if (!localRootLuisKey) {
-      setLuisKeyErrorMsg(
-        formatMessage('LUIS Key is required with the current recognizer setting to start your bot locally, and publish')
-      );
-    }
-    setSettings(projectId, {
-      ...mergedSettings,
-      luis: { ...mergedSettings.luis, authoringKey: localRootLuisKey },
-    });
-  };
-
-  const handleRootQnAKeyOnBlur = () => {
-    if (!localRootQnAKey) {
-      setQnAKeyErrorMsg(formatMessage('QnA Maker subscription Key is required to start your bot locally, and publish'));
-    }
-    submitQnASubscripionKey(localRootQnAKey);
-  };
-
-  const submitQnASubscripionKey = (key: string) => {
-    if (key) {
-      setSettings(projectId, {
-        ...mergedSettings,
-        qna: { ...mergedSettings.qna, subscriptionKey: key },
-      });
-      setQnASettings(projectId, key);
-    } else {
-      setSettings(projectId, {
-        ...mergedSettings,
-        qna: { ...mergedSettings.qna, subscriptionKey: '', endpointKey: '' },
-      });
-    }
-  };
-
-  return (
-    <CollapsableWrapper title={formatMessage('External services')} titleStyle={titleStyle}>
-      <div css={externalServiceContainerStyle}>
-        <TextField
-          aria-labelledby={'LUIS key'}
-          data-testId={'rootLUISKey'}
-          errorMessage={isLUISKeyNeeded ? errorElement(luisKeyErrorMsg) : ''}
-          id={'luisKey'}
-          label={formatMessage('LUIS key')}
-          placeholder={'Enter LUIS key'}
-          required={isLUISKeyNeeded}
-          styles={customError}
-          value={localRootLuisKey}
-          onBlur={handleRootLuisKeyOnBlur}
-          onChange={handleRootLUISKeyOnChange}
-          onRenderLabel={onRenderLabel}
-        />
-        <TextField
-          aria-labelledby={'LUIS region'}
-          data-testid={'rootLUISRegion'}
-          errorMessage={errorElement(luisRegionErrorMsg)}
-          label={formatMessage('LUIS region')}
-          placeholder={'Enter LUIS region'}
-          styles={mergeStyleSets({ root: { marginTop: 10 } }, customError)}
-          value={localRootLuisRegion}
-          onBlur={handleRootLuisRegionOnBlur}
-          onChange={handleRootLuisRegionOnChange}
-          onRenderLabel={onRenderLabel}
-        />
-        <TextField
-          aria-labelledby={'QnA Maker Subscription key'}
-          data-testId={'QnASubscriptionKey'}
-          errorMessage={isQnAKeyNeeded ? errorElement(qnaKeyErrorMsg) : ''}
-          id={'qnaKey'}
-          label={formatMessage('QnA Maker Subscription key')}
-          placeholder={'Enter QnA Maker Subscription key'}
-          required={isQnAKeyNeeded}
-          styles={mergeStyleSets({ root: { marginTop: 10 } }, customError)}
-          value={localRootQnAKey}
-          onBlur={handleRootQnAKeyOnBlur}
-          onChange={handleRootQnAKeyOnChange}
-          onRenderLabel={onRenderLabel}
-        />
-      </div>
-    </CollapsableWrapper>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/RuntimeSettings.tsx b/Composer/packages/client/src/pages/botProject/RuntimeSettings.tsx
deleted file mode 100644
index 18e166b7d..000000000
--- a/Composer/packages/client/src/pages/botProject/RuntimeSettings.tsx
+++ /dev/null
@@ -1,37 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React from 'react';
-import { jsx, css } from '@emotion/core';
-import formatMessage from 'format-message';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-
-import { RuntimeSettings as Runtime } from './runtime-settings/RuntimeSettings';
-
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-// -------------------- RuntimeSettings -------------------- //
-
-type RuntimeSettingsProps = {
-  projectId: string;
-};
-
-export const RuntimeSettings: React.FC<RuntimeSettingsProps> = (props) => {
-  const { projectId } = props;
-
-  return (
-    <CollapsableWrapper title={formatMessage('Custom runtime')} titleStyle={titleStyle}>
-      <Runtime projectId={projectId} />
-    </CollapsableWrapper>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/SkillBotExternalService.tsx b/Composer/packages/client/src/pages/botProject/SkillBotExternalService.tsx
deleted file mode 100644
index c9d4a98bb..000000000
--- a/Composer/packages/client/src/pages/botProject/SkillBotExternalService.tsx
+++ /dev/null
@@ -1,161 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React, { useEffect } from 'react';
-import { jsx } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import formatMessage from 'format-message';
-import get from 'lodash/get';
-import { css } from '@emotion/core';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-
-import { isLUISMandatory, isQnAKeyMandatory } from '../../utils/dialogValidator';
-import {
-  dispatcherState,
-  settingsState,
-  luFilesState,
-  qnaFilesState,
-  validateDialogsSelectorFamily,
-} from '../../recoilModel';
-import settingStorage from '../../utils/dialogSettingStorage';
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { TextFieldWithCustomButton } from '../../components/TextFieldWithCustomButton';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const externalServiceContainerStyle = css`
-  display: flex;
-  flex-direction: column;
-`;
-
-// -------------------- ExternalService -------------------- //
-
-type SkillBotExternalServiceProps = {
-  projectId: string;
-  scrollToSectionId?: string;
-};
-
-export const SkillBotExternalService: React.FC<SkillBotExternalServiceProps> = (props) => {
-  const { projectId, scrollToSectionId = '' } = props;
-  const { setSettings, setQnASettings } = useRecoilValue(dispatcherState);
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector) || '';
-  const settings = useRecoilValue(settingsState(projectId));
-  const mergedSettings = mergePropertiesManagedByRootBot(projectId, rootBotProjectId, settings);
-  const sensitiveGroupManageProperty = settingStorage.get(rootBotProjectId);
-
-  const groupLUISAuthoringKey = get(sensitiveGroupManageProperty, 'luis.authoringKey', {});
-  const rootLuisKey = groupLUISAuthoringKey.root;
-  const skillLuisKey = groupLUISAuthoringKey[projectId];
-  const groupLUISRegion = get(sensitiveGroupManageProperty, 'luis.authoringRegion', {});
-  const rootLuisRegion = groupLUISRegion.root;
-  const skillLuisRegion = groupLUISRegion[projectId];
-  const groupQnAKey = get(sensitiveGroupManageProperty, 'qna.subscriptionKey', {});
-  const rootqnaKey = groupQnAKey.root;
-  const skillqnaKey = groupQnAKey[projectId];
-
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
-  const luFiles = useRecoilValue(luFilesState(projectId));
-  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
-  const isLUISKeyNeeded = isLUISMandatory(dialogs, luFiles);
-  const isQnAKeyNeeded = isQnAKeyMandatory(dialogs, qnaFiles);
-
-  const luisKeyFieldRef = React.useRef<HTMLInputElement>(null);
-  const qnaKeyFieldRef = React.useRef<HTMLInputElement>(null);
-
-  useEffect(() => {
-    if (luisKeyFieldRef.current && scrollToSectionId === '#luisKey') {
-      luisKeyFieldRef.current.scrollIntoView({ behavior: 'smooth' });
-    }
-    if (qnaKeyFieldRef.current && scrollToSectionId === '#qnaKey') {
-      qnaKeyFieldRef.current.scrollIntoView({ behavior: 'smooth' });
-    }
-  }, [scrollToSectionId]);
-
-  const handleSkillQnAKeyOnBlur = (key: string) => {
-    if (key) {
-      submitQnASubscripionKey(key);
-    } else {
-      submitQnASubscripionKey(rootqnaKey);
-    }
-  };
-
-  const submitQnASubscripionKey = (key: string) => {
-    if (key) {
-      setSettings(projectId, {
-        ...mergedSettings,
-        qna: { ...mergedSettings.qna, subscriptionKey: key },
-      });
-      setQnASettings(projectId, key);
-    } else {
-      setSettings(projectId, {
-        ...mergedSettings,
-        qna: { ...mergedSettings.qna, subscriptionKey: '', endpointKey: '' },
-      });
-    }
-  };
-
-  const handleLUISRegionOnBlur = (value) => {
-    setSettings(projectId, {
-      ...mergedSettings,
-      luis: { ...mergedSettings.luis, authoringRegion: value ? value : '' },
-    });
-  };
-
-  const handleLUISKeyOnBlur = (value) => {
-    setSettings(projectId, {
-      ...mergedSettings,
-      luis: { ...mergedSettings.luis, authoringKey: value ? value : '' },
-    });
-  };
-
-  return (
-    <CollapsableWrapper title={formatMessage('External services')} titleStyle={titleStyle}>
-      <div css={externalServiceContainerStyle}>
-        <TextFieldWithCustomButton
-          ariaLabelledby={'LUIS key'}
-          buttonText={formatMessage('Use custom LUIS key')}
-          errorMessage={!rootLuisKey ? formatMessage('Root Bot LUIS key is empty') : ''}
-          id={'luisKey'}
-          label={formatMessage('LUIS key')}
-          placeholder={'Enter LUIS key'}
-          placeholderOnDisable={"<---- Same as root bot's LUIS key ---->"}
-          required={isLUISKeyNeeded}
-          value={skillLuisKey}
-          onBlur={handleLUISKeyOnBlur}
-        />
-        <TextFieldWithCustomButton
-          ariaLabelledby={'LUIS region'}
-          buttonText={formatMessage('Use custom LUIS region')}
-          errorMessage={!rootLuisRegion ? formatMessage('Root Bot LUIS region is empty') : ''}
-          label={formatMessage('LUIS region')}
-          placeholder={'Enter LUIS region'}
-          placeholderOnDisable={"<---- Same as root bot's LUIS region ---->"}
-          required={isLUISKeyNeeded}
-          value={skillLuisRegion}
-          onBlur={handleLUISRegionOnBlur}
-        />
-        <TextFieldWithCustomButton
-          ariaLabelledby={'QnA Maker Subscription key'}
-          buttonText={formatMessage('Use custom QnA Maker Subscription key')}
-          errorMessage={!rootqnaKey ? formatMessage('Root Bot QnA Maker Subscription key is empty') : ''}
-          id={'qnaKey'}
-          label={formatMessage('QnA Maker Subscription key')}
-          placeholder={'Enter QnA Maker Subscription key'}
-          placeholderOnDisable={"<---- Same as root bot's QnA Maker Subscription key ---->"}
-          required={isQnAKeyNeeded}
-          value={skillqnaKey}
-          onBlur={handleSkillQnAKeyOnBlur}
-        />
-      </div>
-    </CollapsableWrapper>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/SkillHostEndPoint.tsx b/Composer/packages/client/src/pages/botProject/SkillHostEndPoint.tsx
deleted file mode 100644
index bceb453ca..000000000
--- a/Composer/packages/client/src/pages/botProject/SkillHostEndPoint.tsx
+++ /dev/null
@@ -1,95 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import React from 'react';
-import { jsx, css } from '@emotion/core';
-import { useRecoilValue } from 'recoil';
-import { TextField } from 'office-ui-fabric-react/lib/TextField';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import formatMessage from 'format-message';
-import { FontSizes, FontWeights } from 'office-ui-fabric-react/lib/Styling';
-import { SharedColors } from '@uifabric/fluent-theme';
-
-import { dispatcherState, settingsState } from '../../recoilModel';
-import { CollapsableWrapper } from '../../components/CollapsableWrapper';
-import { rootBotProjectIdSelector } from '../../recoilModel/selectors/project';
-import { mergePropertiesManagedByRootBot } from '../../recoilModel/dispatchers/utils/project';
-// -------------------- Styles -------------------- //
-
-const titleStyle = css`
-  font-size: ${FontSizes.medium};
-  font-weight: ${FontWeights.semibold};
-  margin-left: 22px;
-  margin-top: 6px;
-`;
-
-const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-const customerLabel = css`
-  font-size: ${FontSizes.small};
-  margin-right: 5px;
-`;
-
-const unknownIconStyle = (required) => {
-  return {
-    root: {
-      selectors: {
-        '&::before': {
-          content: required ? " '*'" : '',
-          color: SharedColors.red10,
-          paddingRight: 3,
-        },
-      },
-    },
-  };
-};
-
-// -------------------- SkillHostEndPoint -------------------- //
-
-type SkillHostEndPointProps = {
-  projectId: string;
-};
-
-const onRenderLabel = (props) => {
-  return (
-    <div css={labelContainer}>
-      <div css={customerLabel}> {props.label} </div>
-      <TooltipHost content={props.label}>
-        <Icon iconName="Unknown" styles={unknownIconStyle(props.required)} />
-      </TooltipHost>
-    </div>
-  );
-};
-
-export const SkillHostEndPoint: React.FC<SkillHostEndPointProps> = (props) => {
-  const { projectId } = props;
-  const { setSettings } = useRecoilValue(dispatcherState);
-  const settings = useRecoilValue(settingsState(projectId));
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector);
-  const mergedSettings = mergePropertiesManagedByRootBot(projectId, rootBotProjectId, settings);
-  const { skillHostEndpoint } = useRecoilValue(settingsState(projectId));
-
-  return (
-    <CollapsableWrapper title={formatMessage('Skill host endpoint')} titleStyle={titleStyle}>
-      <TextField
-        aria-labelledby={formatMessage('SkillHostEndPoint')}
-        data-testid={'SkillHostEndPointTextField'}
-        label={formatMessage('Skill host endpoint url')}
-        placeholder={formatMessage('Enter Skill host endpoint url')}
-        value={skillHostEndpoint}
-        onChange={(e, value) => {
-          setSettings(projectId, {
-            ...mergedSettings,
-            skillHostEndpoint: value,
-          });
-        }}
-        onRenderLabel={onRenderLabel}
-      />
-    </CollapsableWrapper>
-  );
-};
diff --git a/Composer/packages/client/src/pages/botProject/runtime-settings/style.ts b/Composer/packages/client/src/pages/botProject/runtime-settings/style.ts
deleted file mode 100644
index b38a7f023..000000000
--- a/Composer/packages/client/src/pages/botProject/runtime-settings/style.ts
+++ /dev/null
@@ -1,73 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { css } from '@emotion/core';
-import { NeutralColors, SharedColors } from '@uifabric/fluent-theme';
-import { FontWeights, FontSizes } from 'office-ui-fabric-react/lib/Styling';
-export const runtimeSettingsStyle = css`
-  display: flex;
-  flex-direction: column;
-  box-sizing: border-box;
-  height: 200px;
-`;
-
-export const runtimeControls = css`
-  color: ${NeutralColors.gray130};
-  font-size: ${FontSizes.smallPlus};
-  & > h1 {
-    margin-top: 0;
-  }
-`;
-
-export const runtimeToggle = css`
-  display: flex;
-  margin-top: 10px;
-  & > * {
-    margin-right: 2rem;
-  }
-`;
-
-export const modalControlGroup = css`
-  border: 1px solid rgb(237, 235, 233);
-  padding: 0.5rem 1rem 1rem 1rem;
-`;
-
-export const runtimeControlsTitle = css`
-  font-size: ${FontSizes.xLarge};
-  font-weight: ${FontWeights.semibold};
-`;
-
-export const breathingSpace = css`
-  margin-bottom: 1rem;
-  font-size: ${FontSizes.smallPlus};
-`;
-
-export const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-export const customerLabel = (disabled) => css`
-  font-size: ${FontSizes.small};
-  margin-right: 5px;
-  color: ${disabled ? NeutralColors.gray90 : NeutralColors.gray160};
-`;
-
-export const iconStyle = (disabled) => {
-  return {
-    root: {
-      color: disabled ? NeutralColors.gray90 : NeutralColors.gray160,
-      selectors: {
-        '&::before': {
-          content: " '*'",
-          color: SharedColors.red10,
-          paddingRight: 3,
-        },
-      },
-    },
-  };
-};
-
-export const textOr = css`
-  font-size: ${FontSizes.smallPlus};
-`;
diff --git a/Composer/packages/client/src/pages/design/DesignPage.tsx b/Composer/packages/client/src/pages/design/DesignPage.tsx
index 7e0f7387c..6572e8fa3 100644
--- a/Composer/packages/client/src/pages/design/DesignPage.tsx
+++ b/Composer/packages/client/src/pages/design/DesignPage.tsx
@@ -8,22 +8,24 @@ import { Breadcrumb, IBreadcrumbItem } from 'office-ui-fabric-react/lib/Breadcru
 import formatMessage from 'format-message';
 import { globalHistory, RouteComponentProps } from '@reach/router';
 import get from 'lodash/get';
-import { DialogInfo, PromptTab, getEditorAPI, registerEditorAPI, Diagnostic } from '@bfc/shared';
+import { DialogInfo, PromptTab, getEditorAPI, registerEditorAPI, checkForPVASchema } from '@bfc/shared';
 import { ActionButton } from 'office-ui-fabric-react/lib/Button';
 import { JsonEditor } from '@bfc/code-editor';
 import { EditorExtension, PluginConfig } from '@bfc/extension-client';
-import { useRecoilValue, useRecoilState } from 'recoil';
+import { useRecoilValue } from 'recoil';
 
 import { LeftRightSplit } from '../../components/Split/LeftRightSplit';
 import { LoadingSpinner } from '../../components/LoadingSpinner';
+import { TestController } from '../../components/TestController/TestController';
 import { DialogDeleting } from '../../constants';
-import { createSelectedPath, deleteTrigger as DialogdeleteTrigger, getDialogData } from '../../utils/dialogUtil';
+import { createSelectedPath, deleteTrigger, TriggerFormData, getDialogData } from '../../utils/dialogUtil';
 import { Conversation } from '../../components/Conversation';
 import { dialogStyle } from '../../components/Modal/dialogStyle';
 import { OpenConfirmModal } from '../../components/Modal/ConfirmDialog';
 import { ProjectTree, TreeLink } from '../../components/ProjectTree/ProjectTree';
 import { Toolbar, IToolbarItem } from '../../components/Toolbar';
-import { createDiagnosticsPageUrl, getFocusPath, navigateTo, createBotSettingUrl } from '../../utils/navigation';
+import { getFocusPath } from '../../utils/navigation';
+import { navigateTo } from '../../utils/navigation';
 import { getFriendlyName } from '../../utils/dialogUtil';
 import { useShell } from '../../shell';
 import plugins, { mergePluginConfigs } from '../../plugins';
@@ -33,31 +35,22 @@ import {
   userSettingsState,
   dispatcherState,
   schemasState,
+  displaySkillManifestState,
   validateDialogsSelectorFamily,
   focusPathState,
   showCreateDialogModalState,
+  showAddSkillDialogModalState,
   localeState,
-  qnaFilesState,
-  skillsStateSelector,
   rootBotProjectIdSelector,
-  projectDialogsMapSelector,
-  skillNameIdentifierByProjectIdSelector,
-  SkillInfo,
-  projectMetaDataState,
-  displaySkillManifestState,
+  qnaFilesState,
 } from '../../recoilModel';
 import { CreateQnAModal } from '../../components/QnA';
 import { triggerNotSupported } from '../../utils/dialogValidator';
 import { undoFunctionState, undoVersionState } from '../../recoilModel/undo/history';
 import { decodeDesignerPathToArrayPath } from '../../utils/convertUtils/designerPathEncoder';
-import { CreationFlowStatus } from '../../constants';
-import { RepairSkillModalOptionKeys } from '../../components/RepairSkillModal';
-import { useBotOperations } from '../../components/BotRuntimeController/useBotOperations';
+import { useTriggerApi } from '../../shell/triggerApi';
 import { undoStatusSelectorFamily } from '../../recoilModel/selectors/undo';
-import { DiagnosticsHeader } from '../../components/DiagnosticsHeader';
-import { createQnAOnState, exportSkillModalInfoState } from '../../recoilModel/atoms/appState';
 
-import CreationModal from './creationModal';
 import { WarningMessage } from './WarningMessage';
 import {
   breadcrumbClass,
@@ -70,7 +63,6 @@ import {
 } from './styles';
 import { VisualEditor } from './VisualEditor';
 import { PropertyEditor } from './PropertyEditor';
-import { ManifestEditor } from './ManifestEditor';
 
 type BreadcrumbItem = {
   key: string;
@@ -80,7 +72,6 @@ type BreadcrumbItem = {
 };
 
 const CreateSkillModal = React.lazy(() => import('../../components/CreateSkillModal'));
-const RepairSkillModal = React.lazy(() => import('../../components/RepairSkillModal'));
 const CreateDialogModal = React.lazy(() => import('./createDialogModal'));
 const DisplayManifestModal = React.lazy(() => import('../../components/Modal/DisplayManifestModal'));
 const ExportSkillModal = React.lazy(() => import('./exportSkillModal'));
@@ -132,46 +123,36 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
   const qnaFiles = useRecoilValue(qnaFilesState(skillId ?? projectId));
   const schemas = useRecoilValue(schemasState(skillId ?? projectId));
   const dialogs = useRecoilValue(validateDialogsSelectorFamily(skillId ?? projectId));
-  const skills = useRecoilValue(skillsStateSelector);
-  const displaySkillManifestNameIdentifier = useRecoilValue(displaySkillManifestState);
-  const skillsByProjectId = useRecoilValue(skillNameIdentifierByProjectIdSelector);
-  const projectDialogsMap = useRecoilValue(projectDialogsMapSelector);
-  const { startSingleBot, stopSingleBot } = useBotOperations();
+  const displaySkillManifest = useRecoilValue(displaySkillManifestState(skillId ?? projectId));
   const focusPath = useRecoilValue(focusPathState(skillId ?? projectId));
-  const showCreateDialogModal = useRecoilValue(showCreateDialogModalState);
+  const showCreateDialogModal = useRecoilValue(showCreateDialogModalState(skillId ?? projectId));
+  const showAddSkillDialogModal = useRecoilValue(showAddSkillDialogModalState(skillId ?? projectId));
   const locale = useRecoilValue(localeState(skillId ?? projectId));
   const undoFunction = useRecoilValue(undoFunctionState(skillId ?? projectId));
   const undoVersion = useRecoilValue(undoVersionState(skillId ?? projectId));
   const rootProjectId = useRecoilValue(rootBotProjectIdSelector) ?? projectId;
-  const [showAddSkillDialogModal, setAddSkillDialogModalVisibility] = useState(false);
-  const visualEditorSelection = useRecoilValue(visualEditorSelectionState);
-  const { undo, redo, commitChanges, clearUndo } = undoFunction;
-  const [canUndo, canRedo] = useRecoilValue(undoStatusSelectorFamily(skillId ?? projectId));
-  const { isRemote: isRemoteSkill } = useRecoilValue(projectMetaDataState(skillId ?? projectId));
 
+  const { undo, redo, commitChanges, clearUndo } = undoFunction;
+  const [canUndo, canRedo] = useRecoilValue(undoStatusSelectorFamily(projectId));
+  const visualEditorSelection = useRecoilValue(visualEditorSelectionState);
   const {
     removeDialog,
     updateDialog,
+    createDialogCancel,
     createDialogBegin,
     createDialog,
     dismissManifestModal,
     setDesignPageLocation,
     navTo,
     selectTo,
+    addSkillDialogCancel,
     exportToZip,
     onboardingAddCoachMarkRef,
-    addRemoteSkillToBotProject,
-    setCreationFlowStatus,
-    setCreationFlowType,
-    removeSkillFromBotProject,
-    updateZoomRate,
     createQnAKBFromUrl,
     createQnAKBFromScratch,
-    createTrigger,
-    deleteTrigger,
-    createQnATrigger,
-    displayManifestModal,
-    createDialogCancel,
+    createQnAFromUrlDialogBegin,
+    addSkill,
+    updateZoomRate,
   } = useRecoilValue(dispatcherState);
 
   const params = new URLSearchParams(location?.search);
@@ -179,38 +160,30 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     dialogs.find((x) => x.id === props.dialogId)?.content,
     params.get('selected') || ''
   );
-
-  const [triggerModalInfo, setTriggerModalInfo] = useState<undefined | { projectId: string; dialogId: string }>(
-    undefined
-  );
-  const creatQnAOnInfo = useRecoilValue(createQnAOnState);
-  const [dialogModalInfo, setDialogModalInfo] = useState<undefined | string>(undefined);
-  const [exportSkillModalInfo, setExportSkillModalInfo] = useRecoilState(exportSkillModalInfoState);
-  const [skillManifestFile, setSkillManifestFile] = useState<undefined | SkillInfo>(undefined);
-  const [brokenSkillInfo, setBrokenSkillInfo] = useState<undefined | TreeLink>(undefined);
-  const [brokenSkillRepairCallback, setBrokenSkillRepairCallback] = useState<undefined | (() => void)>(undefined);
+  const [triggerModalVisible, setTriggerModalVisibility] = useState(false);
   const [dialogJsonVisible, setDialogJsonVisibility] = useState(false);
   const [currentDialog, setCurrentDialog] = useState<DialogInfo>(dialogs[0] as DialogInfo);
+  const [exportSkillModalVisible, setExportSkillModalVisible] = useState(false);
   const [warningIsVisible, setWarningIsVisible] = useState(true);
   const [breadcrumbs, setBreadcrumbs] = useState<Array<BreadcrumbItem>>([]);
 
   const shell = useShell('DesignPage', skillId ?? rootProjectId);
   const shellForFlowEditor = useShell('FlowEditor', skillId ?? rootProjectId);
   const shellForPropertyEditor = useShell('PropertyEditor', skillId ?? rootProjectId);
-
-  useEffect(() => {
-    if (!skillId) return;
-    const skillNameIdentifier = skillsByProjectId[skillId];
-    if (skillNameIdentifier) {
-      setSkillManifestFile(skills[skillNameIdentifier]);
-    }
-  }, [skills, skillId]);
+  const triggerApi = useTriggerApi(skillId ?? rootProjectId);
+  const { createTrigger, createQnATrigger } = shell.api;
 
   useEffect(() => {
     const currentDialog = dialogs.find(({ id }) => id === dialogId) as DialogInfo | undefined;
     if (currentDialog) {
       setCurrentDialog(currentDialog);
     }
+    const rootDialog = dialogs.find(({ isRoot }) => isRoot);
+    if (!currentDialog && rootDialog) {
+      const { search } = location || {};
+      navigateTo(`/bot/${projectId}/dialogs/${rootDialog.id}${search}`);
+      return;
+    }
     setWarningIsVisible(true);
   }, [dialogId, dialogs, location]);
 
@@ -254,7 +227,7 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
           projectId: props.projectId,
           dialogId: props.dialogId,
         },
-        onClick: () => navTo(skillId ?? null, dialogId),
+        onClick: () => navTo(projectId, dialogId),
       });
       if (triggerIndex != null && trigger != null) {
         breadcrumbArray.push({
@@ -265,7 +238,7 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
             dialogId: props.dialogId,
             trigger: triggerIndex,
           },
-          onClick: () => navTo(skillId ?? null, dialogId, `${triggerIndex}`),
+          onClick: () => navTo(projectId, dialogId, `${triggerIndex}`),
         });
       }
 
@@ -318,19 +291,19 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
   }, []);
 
   const onTriggerCreationDismiss = () => {
-    setTriggerModalInfo(undefined);
+    setTriggerModalVisibility(false);
+  };
+
+  const openNewTriggerModal = () => {
+    setTriggerModalVisibility(true);
   };
 
-  const openNewTriggerModal = (projectId: string, dialogId: string) => {
-    setTriggerModalInfo({ projectId, dialogId });
+  const onTriggerCreationSubmit = async (dialogId: string, formData: TriggerFormData) => {
+    createTrigger(dialogId, formData);
   };
 
   function handleSelect(link: TreeLink) {
-    if (link.bot?.error) {
-      setBrokenSkillInfo(link);
-    }
     const { skillId, dialogId, trigger, parentLink } = link;
-
     updateZoomRate({ currentRate: 1 });
     const breadcrumbArray: Array<BreadcrumbItem> = [];
     if (dialogId != null) {
@@ -362,10 +335,9 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     }
   }
 
-  const onCreateDialogComplete = (projectId: string) => (dialogId: string) => {
-    const target = projectId;
+  const onCreateDialogComplete = (dialogId) => {
     if (dialogId) {
-      navTo(target, dialogId);
+      navTo(projectId, dialogId);
     }
   };
 
@@ -417,37 +389,56 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
   const { onFocusFlowEditor, onBlurFlowEditor } = useElectronFeatures(actionSelected, canUndo, canRedo);
   const EditorAPI = getEditorAPI();
 
-  const projectTreeHeaderMenuItems = [
-    {
-      key: 'CreateNewSkill',
-      label: formatMessage('Create a new skill'),
-      onClick: () => {
-        setCreationFlowType('Skill');
-        setCreationFlowStatus(CreationFlowStatus.NEW);
-      },
-    },
-    {
-      key: 'OpenSkill',
-      label: formatMessage('Open a new skill'),
-      onClick: () => {
-        setCreationFlowType('Skill');
-        setCreationFlowStatus(CreationFlowStatus.OPEN);
+  const getMenuItems = () => {
+    const items = [
+      {
+        'data-testid': 'FlyoutNewDialog',
+        key: 'adddialog',
+        text: formatMessage('Add new dialog'),
+        onClick: () => {
+          createDialogBegin([], onCreateDialogComplete, projectId);
+        },
       },
-    },
-    {
-      key: 'ConnectRemoteSkill',
-      label: formatMessage('Connect a remote skill'),
-      onClick: () => {
-        setAddSkillDialogModalVisibility(true);
+      {
+        'data-testid': 'FlyoutNewTrigger',
+        key: 'addtrigger',
+        text: formatMessage(`Add new trigger on {displayName}`, {
+          displayName: currentDialog?.displayName ?? '',
+        }),
+        onClick: () => {
+          openNewTriggerModal();
+        },
       },
-    },
-  ];
+    ];
+
+    // TODO: refactor when Composer can better model the PVA scenarios
+    if (schemas && !checkForPVASchema(schemas.sdk)) {
+      items.push({
+        'data-testid': 'AddNewKnowledgebase',
+        key: 'addKnowledge',
+        text: formatMessage(` Add new knowledge base on {displayName}`, {
+          displayName: currentDialog?.displayName ?? '',
+        }),
+        onClick: () => {
+          createQnAFromUrlDialogBegin({ projectId });
+        },
+      });
+    }
+    return items;
+  };
 
   const toolbarItems: IToolbarItem[] = [
     {
-      type: 'element',
-      element: <DiagnosticsHeader onClick={() => navigateTo(createDiagnosticsPageUrl(rootProjectId))} />,
-      align: 'right',
+      type: 'dropdown',
+      text: formatMessage('Add'),
+      align: 'left',
+      dataTestid: 'AddFlyout',
+      buttonProps: {
+        iconProps: { iconName: 'Add' },
+      },
+      menuProps: {
+        items: getMenuItems(),
+      },
     },
     {
       type: 'dropdown',
@@ -535,6 +526,37 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
         ],
       },
     },
+    {
+      type: 'dropdown',
+      text: formatMessage('Export'),
+      align: 'left',
+      buttonProps: {
+        iconProps: { iconName: 'OpenInNewWindow' },
+      },
+      menuProps: {
+        items: [
+          {
+            key: 'zipexport',
+            text: formatMessage('Export assets to .zip'),
+            onClick: () => {
+              exportToZip(projectId);
+            },
+          },
+          {
+            key: 'exportAsSkill',
+            text: formatMessage('Export as skill'),
+            onClick: () => {
+              setExportSkillModalVisible(true);
+            },
+          },
+        ],
+      },
+    },
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
   ];
 
   const createBreadcrumbItem: (breadcrumb: BreadcrumbItem) => IBreadcrumbItem = (breadcrumb: BreadcrumbItem) => {
@@ -569,13 +591,12 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     </div>
   );
 
-  async function handleCreateDialogSubmit(projectId, dialogName, dialogData) {
-    setDialogModalInfo(undefined);
+  async function handleCreateDialogSubmit(dialogName, dialogData) {
     await createDialog({ id: dialogName, content: dialogData, projectId });
     commitChanges();
   }
 
-  async function handleDeleteDialog(projectId: string, dialogId: string) {
+  async function handleDeleteDialog(dialogId) {
     const refs = getAllRef(dialogId, dialogs);
     let setting: any = {
       confirmBtnText: formatMessage('Yes'),
@@ -601,13 +622,8 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     }
   }
 
-  async function handleDeleteTrigger(projectId: string, dialogId: string, index: number) {
-    const content = DialogdeleteTrigger(
-      projectDialogsMap[projectId],
-      dialogId,
-      index,
-      async (trigger) => await deleteTrigger(projectId, dialogId, trigger)
-    );
+  async function handleDeleteTrigger(dialogId: string, index: number) {
+    const content = deleteTrigger(dialogs, dialogId, index, (trigger) => triggerApi.deleteTrigger(dialogId, trigger));
 
     if (content) {
       updateDialog({ id: dialogId, content, projectId: skillId ?? projectId });
@@ -634,9 +650,8 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
   }, []);
 
   const handleCreateQnA = async (data) => {
-    const { projectId, dialogId } = creatQnAOnInfo;
-    if (!projectId || !dialogId) return;
-    createQnATrigger(projectId, dialogId);
+    if (!dialogId) return;
+    createQnATrigger(dialogId);
 
     const { name, url, multiTurn } = data;
     if (url) {
@@ -646,42 +661,17 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     }
   };
 
-  const handleCreateDialog = (projectId: string) => {
-    createDialogBegin([], onCreateDialogComplete(projectId), projectId);
-    setDialogModalInfo(projectId);
-  };
-
-  const handleDisplayManifestModal = (skillId: string, type: 'create' | 'edit') => {
-    if (type === 'create') {
-      setExportSkillModalInfo(skillId);
-      return;
-    }
-
-    const skillNameIdentifier = skillsByProjectId[skillId];
-    if (!skillNameIdentifier) return;
-    displayManifestModal(skillNameIdentifier);
-  };
-
-  const handleErrorClick = (projectId: string, skillId: string, diagnostic: Diagnostic) => {
-    switch (diagnostic.source) {
-      case 'appsettings.json': {
-        navigateTo(createBotSettingUrl(projectId, skillId, diagnostic.path));
-        break;
-      }
-      case 'manifest.json': {
-        setExportSkillModalInfo(skillId || projectId);
-      }
-    }
-  };
+  if (!dialogId) {
+    return <LoadingSpinner />;
+  }
 
   const selectedTrigger = currentDialog?.triggers.find((t) => t.id === selected);
   const withWarning = triggerNotSupported(currentDialog, selectedTrigger);
-  const dialogCreateSource = dialogModalInfo ?? skillId ?? projectId;
 
   return (
     <React.Fragment>
       <div css={pageRoot}>
-        <LeftRightSplit initialLeftGridWidth="20%" minLeftPixels={200} minRightPixels={800} pageMode={'dialogs'}>
+        <LeftRightSplit initialLeftGridWidth="20%" minLeftPixels={200} minRightPixels={800}>
           <ProjectTree
             defaultSelected={{
               projectId,
@@ -689,19 +679,8 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
               dialogId,
               trigger: parseTriggerId(selectedTrigger?.id),
             }}
-            headerMenu={projectTreeHeaderMenuItems}
-            onBotCreateDialog={handleCreateDialog}
-            onBotDeleteDialog={handleDeleteDialog}
-            onBotEditManifest={handleDisplayManifestModal}
-            onBotExportZip={exportToZip}
-            onBotRemoveSkill={removeSkillFromBotProject}
-            onBotStart={startSingleBot}
-            onBotStop={stopSingleBot}
-            onDialogCreateTrigger={(projectId, dialogId) => {
-              setTriggerModalInfo({ projectId, dialogId });
-            }}
-            onDialogDeleteTrigger={handleDeleteTrigger}
-            onErrorClick={handleErrorClick}
+            onDeleteDialog={handleDeleteDialog}
+            onDeleteTrigger={handleDeleteTrigger}
             onSelect={handleSelect}
           />
           <div css={contentWrapper} role="main">
@@ -715,14 +694,9 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
             </div>
             <Conversation css={editorContainer}>
               <div css={editorWrapper}>
-                <LeftRightSplit
-                  initialLeftGridWidth="65%"
-                  minLeftPixels={500}
-                  minRightPixels={350}
-                  pageMode={'dialogs'}
-                >
+                <LeftRightSplit initialLeftGridWidth="65%" minLeftPixels={500} minRightPixels={350}>
                   <div aria-label={formatMessage('Authoring canvas')} css={visualPanel} role="region">
-                    {!isRemoteSkill ? breadcrumbItems : null}
+                    {breadcrumbItems}
                     {dialogJsonVisible ? (
                       <JsonEditor
                         key={'dialogjson'}
@@ -747,11 +721,7 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
                     ) : (
                       <EditorExtension plugins={pluginConfig} projectId={projectId} shell={shellForFlowEditor}>
                         <VisualEditor
-                          isRemoteSkill={isRemoteSkill}
-                          openNewTriggerModal={() => {
-                            if (!dialogId) return;
-                            openNewTriggerModal(projectId, dialogId);
-                          }}
+                          openNewTriggerModal={openNewTriggerModal}
                           onBlur={() => onBlurFlowEditor()}
                           onFocus={() => onFocusFlowEditor()}
                         />
@@ -759,11 +729,7 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
                     )}
                   </div>
                   <EditorExtension plugins={pluginConfig} projectId={projectId} shell={shellForPropertyEditor}>
-                    {isRemoteSkill && skillManifestFile ? (
-                      <ManifestEditor formData={skillManifestFile} />
-                    ) : (
-                      <PropertyEditor key={focusPath + undoVersion} />
-                    )}
+                    <PropertyEditor key={focusPath + undoVersion} />
                   </EditorExtension>
                 </LeftRightSplit>
               </div>
@@ -773,95 +739,47 @@ const DesignPage: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
       </div>
       <Suspense fallback={<LoadingSpinner />}>
         {showCreateDialogModal && (
-          <EditorExtension plugins={pluginConfig} projectId={dialogCreateSource} shell={shell}>
+          <EditorExtension plugins={pluginConfig} projectId={projectId} shell={shell}>
             <CreateDialogModal
               isOpen={showCreateDialogModal}
-              projectId={dialogCreateSource}
-              onDismiss={() => {
-                createDialogCancel(dialogCreateSource);
-                setDialogModalInfo(undefined);
-              }}
-              onSubmit={(dialogName, dialogData) => {
-                handleCreateDialogSubmit(dialogModalInfo ?? skillId ?? projectId, dialogName, dialogData);
-              }}
+              projectId={projectId}
+              onDismiss={() => createDialogCancel(projectId)}
+              onSubmit={handleCreateDialogSubmit}
             />
           </EditorExtension>
         )}
         {showAddSkillDialogModal && (
           <CreateSkillModal
             projectId={projectId}
-            onDismiss={() => {
-              setAddSkillDialogModalVisibility(false);
-            }}
-            onSubmit={(manifestUrl, endpointName) => {
-              setAddSkillDialogModalVisibility(false);
-              addRemoteSkillToBotProject(manifestUrl, endpointName);
-            }}
+            onDismiss={() => addSkillDialogCancel(projectId)}
+            onSubmit={(skill) => addSkill(projectId, skill)}
           />
         )}
-        {exportSkillModalInfo && (
+        {exportSkillModalVisible && (
           <ExportSkillModal
-            isOpen
-            projectId={exportSkillModalInfo}
-            onDismiss={() => setExportSkillModalInfo(undefined)}
-            onSubmit={() => setExportSkillModalInfo(undefined)}
+            isOpen={exportSkillModalVisible}
+            projectId={projectId}
+            onDismiss={() => setExportSkillModalVisible(false)}
+            onSubmit={() => setExportSkillModalVisible(false)}
           />
         )}
-        {triggerModalInfo && (
+        {triggerModalVisible && (
           <TriggerCreationModal
-            isOpen
-            dialogId={triggerModalInfo.dialogId}
-            projectId={triggerModalInfo.projectId}
+            dialogId={dialogId}
+            isOpen={triggerModalVisible}
+            projectId={projectId}
             onDismiss={onTriggerCreationDismiss}
-            onSubmit={(dialogId, formData) => {
-              createTrigger(triggerModalInfo.projectId, dialogId, formData);
-            }}
+            onSubmit={onTriggerCreationSubmit}
           />
         )}
-
-        <CreateQnAModal
-          dialogId={creatQnAOnInfo.dialogId}
-          projectId={creatQnAOnInfo.projectId}
-          qnaFiles={qnaFiles}
-          onSubmit={handleCreateQnA}
-        />
-
-        {displaySkillManifestNameIdentifier && (
+        <CreateQnAModal dialogId={dialogId} projectId={projectId} qnaFiles={qnaFiles} onSubmit={handleCreateQnA} />
+        {displaySkillManifest && (
           <DisplayManifestModal
-            skillNameIdentifier={displaySkillManifestNameIdentifier}
-            onDismiss={() => dismissManifestModal()}
+            manifestId={displaySkillManifest}
+            projectId={projectId}
+            onDismiss={() => dismissManifestModal(projectId)}
           />
         )}
-        {brokenSkillInfo && (
-          <RepairSkillModal
-            skillItem={brokenSkillInfo}
-            onDismiss={() => {
-              setBrokenSkillInfo(undefined);
-            }}
-            onNext={(option) => {
-              const skillIdToRemove = brokenSkillInfo.skillId;
-              if (!skillIdToRemove) return;
-
-              if (option === RepairSkillModalOptionKeys.repairSkill) {
-                setCreationFlowType('Skill');
-                setCreationFlowStatus(CreationFlowStatus.OPEN);
-                setBrokenSkillRepairCallback(() => {
-                  removeSkillFromBotProject(skillIdToRemove);
-                });
-              } else if (option === RepairSkillModalOptionKeys.removeSkill) {
-                removeSkillFromBotProject(skillIdToRemove);
-              }
-              setBrokenSkillInfo(undefined);
-            }}
-          ></RepairSkillModal>
-        )}
-        <CreationModal
-          onSubmit={() => {
-            if (brokenSkillRepairCallback) {
-              brokenSkillRepairCallback();
-            }
-          }}
-        ></CreationModal>
       </Suspense>
     </React.Fragment>
   );
diff --git a/Composer/packages/client/src/pages/design/ManifestEditor.tsx b/Composer/packages/client/src/pages/design/ManifestEditor.tsx
deleted file mode 100644
index 94354ac6b..000000000
--- a/Composer/packages/client/src/pages/design/ManifestEditor.tsx
+++ /dev/null
@@ -1,181 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import formatMessage from 'format-message';
-import ErrorBoundary from 'react-error-boundary';
-import React from 'react';
-import { LoadingTimeout } from '@bfc/adaptive-form/lib/components/LoadingTimeout';
-import { FieldLabel } from '@bfc/adaptive-form/lib/components/FieldLabel';
-import ErrorInfo from '@bfc/adaptive-form/lib/components/ErrorInfo';
-import { FontSizes, NeutralColors } from '@uifabric/fluent-theme';
-import { FontWeights } from '@uifabric/styling';
-import { DetailsList, DetailsListLayoutMode, SelectionMode } from 'office-ui-fabric-react/lib/DetailsList';
-import { Link } from 'office-ui-fabric-react/lib/Link';
-import get from 'lodash/get';
-
-import { SkillInfo } from '../../recoilModel';
-
-import { formEditor } from './styles';
-import { PropertyEditorHeader } from './PropertyEditorHeader';
-
-const styles = {
-  errorLoading: css`
-    padding: 18px;
-  `,
-
-  banner: css`
-    border-bottom: 1px solid #c8c6c4;
-    padding: 0 18px;
-    margin-bottom: 0px;
-  `,
-
-  title: css`
-    font-size: ${FontSizes.size20};
-    font-weight: ${FontWeights.semibold};
-    margin: 5px 0px;
-  `,
-
-  subtitle: css`
-    height: 15px;
-    line-height: 15px;
-    font-size: ${FontSizes.size12};
-    color: ${NeutralColors.gray130};
-    font-weight: ${FontWeights.semibold};
-    margin: 5px 0;
-  `,
-
-  description: css`
-    margin-top: 0;
-    margin-bottom: 10px;
-    white-space: pre-line;
-    font-size: ${FontSizes.size12};
-  `,
-
-  helplink: css`
-    margin-top: 15px;
-    font-size: ${FontSizes.size12};
-  `,
-
-  body: css`
-    padding: 0 18px;
-    font-size: ${FontSizes.size12};
-    .ms-DetailsHeader {
-      padding-top: 0;
-    }
-  `,
-
-  section: css`
-    padding-top: 20px;
-  `,
-};
-
-const helpLink =
-  'https://docs.microsoft.com/en-us/azure/bot-service/skills-write-manifest-2-1?view=azure-bot-service-4.0';
-
-export interface ManifestEditorProps {
-  formData: SkillInfo;
-}
-
-export const ManifestEditor: React.FC<ManifestEditorProps> = (props) => {
-  const { formData } = props;
-  const { manifest } = formData;
-
-  if (!manifest) {
-    return (
-      <LoadingTimeout timeout={2000}>
-        <div css={styles.errorLoading}>{formatMessage('Manifest could not be loaded')}</div>
-      </LoadingTimeout>
-    );
-  }
-
-  const activities = get(manifest, 'activities', {});
-  const activitiesToDisplay: { name: string; description: string }[] = [];
-
-  for (const key in activities) {
-    activitiesToDisplay.push({
-      name: get(activities, [key, 'name'], key),
-      description: get(activities, [key, 'description'], ''),
-    });
-  }
-
-  return (
-    <div aria-label={formatMessage('manifest editor')} css={formEditor} data-testid="ManifestEditor" role="region">
-      <ErrorBoundary FallbackComponent={ErrorInfo}>
-        <PropertyEditorHeader
-          botName={formData.name}
-          helpLink={helpLink}
-          projectData={{ isRootBot: false, isRemote: true }}
-        />
-        <div css={styles.body}>
-          <section css={styles.section}>
-            <FieldLabel
-              description={formatMessage('Learn more about manifests')}
-              helpLink={helpLink}
-              id={'url'}
-              label={formatMessage('Manifest url')}
-            />
-            <p>
-              <Link aria-label={formData.location} href={formData.location} rel="noopener noreferrer" target="_blank">
-                {formData.location}
-              </Link>
-            </p>
-          </section>
-          <section css={styles.section}>
-            <FieldLabel
-              description={formatMessage('Learn more about endpoints')}
-              helpLink={helpLink}
-              id={'endpoints'}
-              label={formatMessage('Endpoints')}
-            />
-            <DetailsList
-              columns={[
-                { key: 'Name', name: 'Name', fieldName: 'name', minWidth: 100, maxWidth: 200, isResizable: true },
-                {
-                  key: 'EndpointUrl',
-                  name: 'EndpointUrl',
-                  fieldName: 'endpointUrl',
-                  minWidth: 100,
-                  isResizable: true,
-                  onRender: (item) => {
-                    return (
-                      <Link
-                        aria-label={item.endpointUrl}
-                        href={item.endpointUrl}
-                        rel="noopener noreferrer"
-                        target="_blank"
-                      >
-                        {item.endpointUrl}
-                      </Link>
-                    );
-                  },
-                },
-              ]}
-              items={get(manifest, 'endpoints', [])}
-              layoutMode={DetailsListLayoutMode.justified}
-              selectionMode={SelectionMode.none}
-            />
-          </section>
-          <section css={styles.section}>
-            <FieldLabel
-              description={formatMessage('Learn more about activities')}
-              helpLink={helpLink}
-              id={'activities'}
-              label={formatMessage('Activities')}
-            />
-            <DetailsList
-              columns={[
-                { key: 'Name', name: 'Name', fieldName: 'name', minWidth: 100, maxWidth: 200, isResizable: true },
-                { key: 'Description', name: 'Description', fieldName: 'description', minWidth: 100, isResizable: true },
-              ]}
-              items={activitiesToDisplay}
-              layoutMode={DetailsListLayoutMode.justified}
-              selectionMode={SelectionMode.none}
-            />
-          </section>
-        </div>
-      </ErrorBoundary>
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/pages/design/PropertyEditor.tsx b/Composer/packages/client/src/pages/design/PropertyEditor.tsx
index cac6cfbea..d523df8ca 100644
--- a/Composer/packages/client/src/pages/design/PropertyEditor.tsx
+++ b/Composer/packages/client/src/pages/design/PropertyEditor.tsx
@@ -11,20 +11,9 @@ import isEqual from 'lodash/isEqual';
 import debounce from 'lodash/debounce';
 import get from 'lodash/get';
 import { MicrosoftAdaptiveDialog } from '@bfc/shared';
-import { useRecoilValue } from 'recoil';
-import { css } from '@emotion/core';
 
-import { botDisplayNameState, projectMetaDataState } from '../../recoilModel';
-
-import { PropertyEditorHeader } from './PropertyEditorHeader';
 import { formEditor } from './styles';
 
-const propertyEditorWrapperStyle = css`
-  display: flex;
-  flex-direction: column;
-  height: 100%;
-`;
-
 function resolveBaseSchema(schema: JSONSchema7, $kind: string): JSONSchema7 | undefined {
   const defSchema = schema.definitions?.[$kind];
   if (defSchema && typeof defSchema === 'object') {
@@ -37,10 +26,8 @@ function resolveBaseSchema(schema: JSONSchema7, $kind: string): JSONSchema7 | un
 
 const PropertyEditor: React.FC = () => {
   const { shellApi, ...shellData } = useShellApi();
-  const { currentDialog, focusPath, focusedSteps, focusedTab, schemas, projectId } = shellData;
+  const { currentDialog, focusPath, focusedSteps, focusedTab, schemas } = shellData;
   const { onFocusSteps } = shellApi;
-  const botName = useRecoilValue(botDisplayNameState(projectId));
-  const projectData = useRecoilValue(projectMetaDataState(projectId));
 
   const dialogData = useMemo(() => {
     if (currentDialog?.content) {
@@ -133,19 +120,16 @@ const PropertyEditor: React.FC = () => {
   };
 
   return (
-    <div css={propertyEditorWrapperStyle}>
-      {!localData || !$schema ? <PropertyEditorHeader botName={botName} projectData={projectData} /> : null}
-      <div aria-label={formatMessage('form editor')} css={formEditor} data-testid="PropertyEditor" role="region">
-        <AdaptiveForm
-          errors={errors}
-          focusedTab={focusedTab}
-          formData={localData}
-          schema={$schema}
-          uiOptions={$uiOptions}
-          onChange={handleDataChange}
-          onFocusedTab={handleFocusTab}
-        />
-      </div>
+    <div aria-label={formatMessage('form editor')} css={formEditor} data-testid="PropertyEditor" role="region">
+      <AdaptiveForm
+        errors={errors}
+        focusedTab={focusedTab}
+        formData={localData}
+        schema={$schema}
+        uiOptions={$uiOptions}
+        onChange={handleDataChange}
+        onFocusedTab={handleFocusTab}
+      />
     </div>
   );
 };
diff --git a/Composer/packages/client/src/pages/design/PropertyEditorHeader.tsx b/Composer/packages/client/src/pages/design/PropertyEditorHeader.tsx
deleted file mode 100644
index a4dc8eb40..000000000
--- a/Composer/packages/client/src/pages/design/PropertyEditorHeader.tsx
+++ /dev/null
@@ -1,110 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import React, { useMemo } from 'react';
-import { css } from '@emotion/core';
-import { FontSizes, NeutralColors } from '@uifabric/fluent-theme';
-import formatMessage from 'format-message';
-import { Link } from 'office-ui-fabric-react/lib/Link';
-import { FontWeights } from '@uifabric/styling';
-
-const styles = {
-  errorLoading: css`
-    padding: 18px;
-  `,
-
-  propertyEditorHeaderStyle: css`
-    border-top: 1px solid ${NeutralColors.gray10};
-    padding: 0 18px;
-    margin-bottom: 0px;
-    border-bottom: 1px solid ${NeutralColors.gray60};
-  `,
-
-  title: css`
-    font-weight: ${FontWeights.semibold};
-    margin: 5px 0px;
-  `,
-
-  subtitle: css`
-    display: block;
-    height: 15px;
-    line-height: 15px;
-    font-size: ${FontSizes.size12};
-    color: ${NeutralColors.gray130};
-    font-weight: ${FontWeights.semibold};
-  `,
-
-  description: css`
-    margin-top: 0;
-    margin-bottom: 10px;
-    white-space: pre-line;
-    font-size: ${FontSizes.size12};
-    margin-bottom: 10px;
-  `,
-
-  helplink: css`
-    font-size: ${FontSizes.size12};
-  `,
-};
-
-export type PropertyEditorHeaderProps = {
-  projectData: { isRootBot: boolean; isRemote: boolean };
-  botName: string;
-  helpLink?: string;
-};
-
-const PropertyEditorHeader: React.FC<PropertyEditorHeaderProps> = (props) => {
-  const {
-    projectData: { isRootBot, isRemote },
-    botName,
-    helpLink,
-  } = props;
-
-  const botTypeText = useMemo(() => {
-    if (isRootBot) {
-      return formatMessage('Root bot.');
-    } else {
-      if (isRemote) {
-        return formatMessage('Remote Skill.');
-      }
-      return formatMessage('Local Skill.');
-    }
-  }, [isRemote, isRootBot]);
-
-  const botDescriptionText = useMemo(() => {
-    if (isRootBot) {
-      return formatMessage('Root bot of your project that greets users, and can call skills.');
-    } else {
-      if (isRemote) {
-        return formatMessage('This configures a data driven dialog via a collection of events and actions.');
-      }
-      return formatMessage('A skill bot that can be called from a host bot.');
-    }
-  }, [isRemote, isRootBot]);
-
-  return (
-    <div css={styles.propertyEditorHeaderStyle}>
-      <h2 style={{ margin: '7px 0' }}>
-        {botName} {isRemote ? '(Remote)' : ''}
-        <span css={styles.subtitle}>{botTypeText}</span>
-      </h2>
-      <p css={styles.description}>{botDescriptionText}</p>
-      <p css={styles.helplink}>
-        {isRemote ? (
-          <Link
-            aria-label={formatMessage('Learn more about skill manifests')}
-            href={helpLink}
-            rel="noopener noreferrer"
-            target="_blank"
-          >
-            {formatMessage('Learn more')}
-          </Link>
-        ) : null}
-      </p>
-    </div>
-  );
-};
-
-export { PropertyEditorHeader };
diff --git a/Composer/packages/client/src/pages/design/VisualEditor.tsx b/Composer/packages/client/src/pages/design/VisualEditor.tsx
index 6ab43a061..859d1c2a9 100644
--- a/Composer/packages/client/src/pages/design/VisualEditor.tsx
+++ b/Composer/packages/client/src/pages/design/VisualEditor.tsx
@@ -27,16 +27,11 @@ const addIconProps = {
   styles: { root: { fontSize: '12px' } },
 };
 
-function onRenderBlankVisual(isTriggerEmpty, onClickAddTrigger, isRemoteSkill) {
+function onRenderBlankVisual(isTriggerEmpty, onClickAddTrigger) {
   return (
     <div css={middleTriggerContainer}>
       <div css={middleTriggerElements}>
-        {isRemoteSkill ? (
-          <React.Fragment>
-            <img alt={formatMessage('bot framework composer icon gray')} src={grayComposerIcon} />
-            {formatMessage('Remote skill')}
-          </React.Fragment>
-        ) : isTriggerEmpty ? (
+        {isTriggerEmpty ? (
           <React.Fragment>
             {formatMessage(`This dialog has no trigger yet.`)}
             <ActionButton
@@ -63,13 +58,12 @@ interface VisualEditorProps {
   openNewTriggerModal: () => void;
   onFocus?: (event: React.FocusEvent<HTMLDivElement>) => void;
   onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;
-  isRemoteSkill?: boolean;
 }
 
 const VisualEditor: React.FC<VisualEditorProps> = (props) => {
   const { ...shellData } = useShellApi();
   const { projectId, currentDialog } = shellData;
-  const { openNewTriggerModal, onFocus, onBlur, isRemoteSkill } = props;
+  const { openNewTriggerModal, onFocus, onBlur } = props;
   const [triggerButtonVisible, setTriggerButtonVisibility] = useState(false);
   const { onboardingAddCoachMarkRef } = useRecoilValue(dispatcherState);
   const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
@@ -81,8 +75,6 @@ const VisualEditor: React.FC<VisualEditorProps> = (props) => {
 
   const formConfig = useFormConfig();
   const overridedSDKSchema = useMemo(() => {
-    if (!dialogId) return {};
-
     const sdkSchema = cloneDeep(schemas.sdk?.content ?? {});
     const sdkDefinitions = sdkSchema.definitions;
 
@@ -98,7 +90,7 @@ const VisualEditor: React.FC<VisualEditorProps> = (props) => {
 
   useEffect(() => {
     const dialog = dialogs.find((d) => d.id === dialogId);
-    const visible = dialog ? get(dialog, 'triggers', []).length === 0 : false;
+    const visible = get(dialog, 'triggers', []).length === 0;
     setTriggerButtonVisibility(visible);
   }, [dialogs, dialogId]);
 
@@ -110,16 +102,14 @@ const VisualEditor: React.FC<VisualEditorProps> = (props) => {
         css={visualEditor(triggerButtonVisible || !selected)}
         data-testid="VisualEditor"
       >
-        {!isRemoteSkill ? (
-          <VisualDesigner
-            data={currentDialog.content ?? {}}
-            schema={overridedSDKSchema}
-            onBlur={onBlur}
-            onFocus={onFocus}
-          />
-        ) : null}
+        <VisualDesigner
+          data={currentDialog.content ?? {}}
+          schema={overridedSDKSchema}
+          onBlur={onBlur}
+          onFocus={onFocus}
+        />
       </div>
-      {!selected && onRenderBlankVisual(triggerButtonVisible, openNewTriggerModal, isRemoteSkill)}
+      {!selected && onRenderBlankVisual(triggerButtonVisible, openNewTriggerModal)}
     </React.Fragment>
   );
 };
diff --git a/Composer/packages/client/src/pages/design/__tests__/PropertyEditorHeader.test.tsx b/Composer/packages/client/src/pages/design/__tests__/PropertyEditorHeader.test.tsx
deleted file mode 100644
index 11133b826..000000000
--- a/Composer/packages/client/src/pages/design/__tests__/PropertyEditorHeader.test.tsx
+++ /dev/null
@@ -1,51 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import React from 'react';
-import { render } from '@botframework-composer/test-utils';
-
-import { PropertyEditorHeader } from '../PropertyEditorHeader';
-
-describe('<PropertyEditorHeader />', () => {
-  it('renders property editor header without help link if not a remote bot', () => {
-    const metadata = {
-      isRootBot: true,
-      isRemote: false,
-    };
-
-    const { queryAllByText } = render(<PropertyEditorHeader botName={'echo-bot'} projectData={metadata} />);
-    expect(queryAllByText('Learn more')).toEqual([]);
-  });
-
-  it('renders property editor header for a root bot', () => {
-    const metadata = {
-      isRootBot: true,
-      isRemote: false,
-    };
-    const { findByText } = render(<PropertyEditorHeader botName={'echo-bot'} projectData={metadata} />);
-    expect(findByText('Root bot'));
-    expect(findByText('Root bot of your project that greets users, and can call skills.'));
-  });
-
-  it('renders property editor header for a local skill', () => {
-    const metadata = {
-      isRootBot: false,
-      isRemote: false,
-    };
-    const { findByText } = render(<PropertyEditorHeader botName={'echo-bot'} projectData={metadata} />);
-    expect(findByText('Local Skill'));
-  });
-
-  it('renders property editor header for a remote skill', () => {
-    const metadata = {
-      isRootBot: false,
-      isRemote: true,
-    };
-    const helpLink = 'https://botframework-skill/manifest';
-    const { findByText } = render(
-      <PropertyEditorHeader botName={'echo-bot'} helpLink={helpLink} projectData={metadata} />
-    );
-    expect(findByText('Remote Skill'));
-    expect(findByText('Learn more'));
-  });
-});
diff --git a/Composer/packages/client/src/pages/design/creationModal.tsx b/Composer/packages/client/src/pages/design/creationModal.tsx
deleted file mode 100644
index 7113ca5a4..000000000
--- a/Composer/packages/client/src/pages/design/creationModal.tsx
+++ /dev/null
@@ -1,162 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-import Path from 'path';
-
-import React, { Fragment, useEffect, useRef, useState } from 'react';
-import { useRecoilValue } from 'recoil';
-
-import { CreateOptions } from '../../components/CreationFlow/CreateOptions';
-import { OpenProject } from '../../components/CreationFlow/OpenProject';
-import DefineConversation from '../../components/CreationFlow/DefineConversation';
-import {
-  dispatcherState,
-  creationFlowStatusState,
-  storagesState,
-  focusedStorageFolderState,
-  creationFlowTypeState,
-  userSettingsState,
-  filteredTemplatesSelector,
-} from '../../recoilModel';
-import { CreationFlowStatus } from '../../constants';
-
-interface CreationModalProps {
-  onSubmit: () => void;
-  onDismiss?: () => void;
-}
-
-export const CreationModal: React.FC<CreationModalProps> = (props) => {
-  const {
-    fetchStorages,
-    fetchTemplates,
-    fetchFolderItemsByPath,
-    setCreationFlowStatus,
-    createFolder,
-    updateCurrentPathForStorage,
-    updateFolder,
-    saveTemplateId,
-    createNewBot,
-    openProject,
-    addNewSkillToBotProject,
-    addExistingSkillToBotProject,
-  } = useRecoilValue(dispatcherState);
-
-  const templateProjects = useRecoilValue(filteredTemplatesSelector);
-  const creationFlowStatus = useRecoilValue(creationFlowStatusState);
-  const creationFlowType = useRecoilValue(creationFlowTypeState);
-  const focusedStorageFolder = useRecoilValue(focusedStorageFolderState);
-  const { appLocale } = useRecoilValue(userSettingsState);
-  const storages = useRecoilValue(storagesState);
-  const currentStorageIndex = useRef(0);
-  const storage = storages[currentStorageIndex.current];
-  const currentStorageId = storage ? storage.id : 'default';
-  const [templateId, setTemplateId] = useState('');
-
-  useEffect(() => {
-    if (storages && storages.length) {
-      const storageId = storage.id;
-      const path = storage.path;
-      const formattedPath = Path.normalize(path);
-      fetchFolderItemsByPath(storageId, formattedPath);
-    }
-  }, [storages]);
-
-  const fetchResources = async () => {
-    await fetchStorages();
-    fetchTemplates();
-  };
-
-  useEffect(() => {
-    fetchResources();
-  }, []);
-
-  const updateCurrentPath = async (newPath, storageId) => {
-    if (!storageId) {
-      storageId = currentStorageId;
-    }
-    if (newPath) {
-      const formattedPath = Path.normalize(newPath);
-      updateCurrentPathForStorage(formattedPath, storageId);
-    }
-  };
-
-  const handleCreateNew = async (formData, templateId: string) => {
-    const newBotData = {
-      templateId: templateId || '',
-      name: formData.name,
-      description: formData.description,
-      location: formData.location,
-      schemaUrl: formData.schemaUrl,
-      appLocale,
-    };
-    if (creationFlowType === 'Skill') {
-      addNewSkillToBotProject(newBotData);
-    } else {
-      createNewBot(newBotData);
-    }
-  };
-
-  const handleDismiss = () => {
-    setCreationFlowStatus(CreationFlowStatus.CLOSE);
-    props.onDismiss && props.onDismiss();
-  };
-
-  const handleDefineConversationSubmit = async (formData, templateId: string) => {
-    // If selected template is vaCore then route to VA Customization modal
-    if (templateId === 'va-core') {
-      return;
-    }
-
-    handleSubmit(formData, templateId);
-  };
-
-  const handleSubmit = async (formData, templateId: string) => {
-    handleDismiss();
-    saveTemplateId(templateId);
-    await handleCreateNew(formData, templateId);
-  };
-
-  const handleCreateNext = async (templateId: string) => {
-    setCreationFlowStatus(CreationFlowStatus.NEW_FROM_TEMPLATE);
-    setTemplateId(templateId);
-  };
-
-  const openBot = async (botFolder) => {
-    handleDismiss();
-    if (creationFlowType === 'Skill') {
-      addExistingSkillToBotProject(botFolder);
-    } else {
-      openProject(botFolder);
-    }
-  };
-
-  return (
-    <Fragment>
-      {creationFlowStatus === CreationFlowStatus.NEW_FROM_TEMPLATE ? (
-        <DefineConversation
-          createFolder={createFolder}
-          focusedStorageFolder={focusedStorageFolder}
-          templateId={templateId}
-          updateFolder={updateFolder}
-          onCurrentPathUpdate={updateCurrentPath}
-          onDismiss={handleDismiss}
-          onSubmit={handleDefineConversationSubmit}
-        />
-      ) : null}
-
-      {creationFlowStatus === CreationFlowStatus.NEW ? (
-        <CreateOptions templates={templateProjects} onDismiss={handleDismiss} onNext={handleCreateNext} />
-      ) : null}
-
-      {creationFlowStatus === CreationFlowStatus.OPEN ? (
-        <OpenProject
-          focusedStorageFolder={focusedStorageFolder}
-          onCurrentPathUpdate={updateCurrentPath}
-          onDismiss={handleDismiss}
-          onOpen={openBot}
-        />
-      ) : null}
-    </Fragment>
-  );
-};
-
-export default CreationModal;
diff --git a/Composer/packages/client/src/pages/design/exportSkillModal/constants.tsx b/Composer/packages/client/src/pages/design/exportSkillModal/constants.tsx
index 1fa550ebb..c99ddd7e7 100644
--- a/Composer/packages/client/src/pages/design/exportSkillModal/constants.tsx
+++ b/Composer/packages/client/src/pages/design/exportSkillModal/constants.tsx
@@ -4,7 +4,7 @@
 import formatMessage from 'format-message';
 import { JSONSchema7 } from '@bfc/extension-client';
 import { resolveRef } from '@bfc/adaptive-form';
-import { SkillManifestFile } from '@bfc/shared';
+import { SkillManifest } from '@bfc/shared';
 import startCase from 'lodash/startCase';
 import { SDKKinds } from '@bfc/shared';
 
@@ -88,14 +88,14 @@ export interface ContentProps {
   completeStep: () => void;
   errors: { [key: string]: any };
   editJson: () => void;
-  manifest: Partial<SkillManifestFile>;
+  manifest: Partial<SkillManifest>;
   setErrors: (errors: { [key: string]: any }) => void;
   setSchema: (_: JSONSchema7) => void;
   setSelectedDialogs: (dialogs: any[]) => void;
   setSelectedTriggers: (selectedTriggers: any[]) => void;
-  setSkillManifest: (_: Partial<SkillManifestFile>) => void;
+  setSkillManifest: (_: Partial<SkillManifest>) => void;
   schema: JSONSchema7;
-  skillManifests: SkillManifestFile[];
+  skillManifests: SkillManifest[];
   value: { [key: string]: any };
   onChange: (_: any) => void;
   projectId: string;
@@ -113,7 +113,7 @@ interface ValidationDetails {
   editingId?: string;
   id?: string;
   schema: any;
-  skillManifests: SkillManifestFile[];
+  skillManifests: SkillManifest[];
 }
 
 interface EditorStep {
diff --git a/Composer/packages/client/src/pages/design/exportSkillModal/content/SaveManifest.tsx b/Composer/packages/client/src/pages/design/exportSkillModal/content/SaveManifest.tsx
index c014758ad..41567316d 100644
--- a/Composer/packages/client/src/pages/design/exportSkillModal/content/SaveManifest.tsx
+++ b/Composer/packages/client/src/pages/design/exportSkillModal/content/SaveManifest.tsx
@@ -5,7 +5,7 @@
 import { css, jsx } from '@emotion/core';
 import React, { useEffect } from 'react';
 import { Label } from 'office-ui-fabric-react/lib/Label';
-import { SkillManifestFile } from '@bfc/shared';
+import { SkillManifest } from '@bfc/shared';
 import { TextField } from 'office-ui-fabric-react/lib/TextField';
 import { useRecoilValue } from 'recoil';
 import formatMessage from 'format-message';
@@ -22,8 +22,8 @@ const styles = {
 
 export const getManifestId = (
   botName: string,
-  skillManifests: SkillManifestFile[],
-  { content: { $schema } = {} }: Partial<SkillManifestFile>
+  skillManifests: SkillManifest[],
+  { content: { $schema } = {} }: Partial<SkillManifest>
 ): string => {
   const [version] = VERSION_REGEX.exec($schema) || [''];
 
diff --git a/Composer/packages/client/src/pages/design/exportSkillModal/generateSkillManifest.ts b/Composer/packages/client/src/pages/design/exportSkillModal/generateSkillManifest.ts
index 0990531c1..cd893c8e2 100644
--- a/Composer/packages/client/src/pages/design/exportSkillModal/generateSkillManifest.ts
+++ b/Composer/packages/client/src/pages/design/exportSkillModal/generateSkillManifest.ts
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 
 import get from 'lodash/get';
-import { DialogInfo, DialogSchemaFile, ITrigger, SDKKinds, SkillManifestFile, LuFile, QnAFile } from '@bfc/shared';
+import { DialogInfo, DialogSchemaFile, ITrigger, SDKKinds, SkillManifest, LuFile, QnAFile } from '@bfc/shared';
 import { JSONSchema7 } from '@bfc/extension-client';
 
 import { Activities, Activity, activityHandlerMap, ActivityTypes, DispatchModels } from './constants';
@@ -13,7 +13,7 @@ export const isSupportedTrigger = ({ type }: ITrigger) => Object.keys(activityHa
 
 export const generateSkillManifest = (
   schema: JSONSchema7,
-  skillManifest: Partial<SkillManifestFile>,
+  skillManifest: Partial<SkillManifest>,
   dialogs: DialogInfo[],
   dialogSchemas: DialogSchemaFile[],
   luFiles: LuFile[],
diff --git a/Composer/packages/client/src/pages/design/exportSkillModal/index.tsx b/Composer/packages/client/src/pages/design/exportSkillModal/index.tsx
index 41be8bcf9..644e97d97 100644
--- a/Composer/packages/client/src/pages/design/exportSkillModal/index.tsx
+++ b/Composer/packages/client/src/pages/design/exportSkillModal/index.tsx
@@ -10,7 +10,7 @@ import { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button'
 import { JSONSchema7 } from '@bfc/extension-client';
 import { Link } from 'office-ui-fabric-react/lib/components/Link';
 import { useRecoilValue } from 'recoil';
-import { SkillManifestFile } from '@bfc/shared';
+import { SkillManifest } from '@bfc/shared';
 
 import {
   dispatcherState,
@@ -45,7 +45,7 @@ const ExportSkillModal: React.FC<ExportSkillModalProps> = ({ onSubmit, onDismiss
   const [errors, setErrors] = useState({});
   const [schema, setSchema] = useState<JSONSchema7>({});
 
-  const [skillManifest, setSkillManifest] = useState<Partial<SkillManifestFile>>({});
+  const [skillManifest, setSkillManifest] = useState<Partial<SkillManifest>>({});
 
   const { content = {}, id } = skillManifest;
 
@@ -79,7 +79,7 @@ const ExportSkillModal: React.FC<ExportSkillModalProps> = ({ onSubmit, onDismiss
 
   const handleSave = () => {
     if (skillManifest.content && skillManifest.id) {
-      updateSkillManifest(skillManifest as SkillManifestFile, projectId);
+      updateSkillManifest(skillManifest as SkillManifest, projectId);
     }
   };
 
diff --git a/Composer/packages/client/src/pages/design/styles.ts b/Composer/packages/client/src/pages/design/styles.ts
index d114b93ce..98733aa47 100644
--- a/Composer/packages/client/src/pages/design/styles.ts
+++ b/Composer/packages/client/src/pages/design/styles.ts
@@ -64,8 +64,8 @@ export const assetTree = css`
 export const editorContainer = css`
   display: flex;
   flex-direction: column;
-  height: 0;
-  flex-grow: 1;
+  height: 100%;
+  flex-grow: 4;
 `;
 
 export const editorWrapper = css`
diff --git a/Composer/packages/client/src/pages/diagnostics/DiagnosticFilter.tsx b/Composer/packages/client/src/pages/diagnostics/DiagnosticFilter.tsx
deleted file mode 100644
index a7f9fb5fb..000000000
--- a/Composer/packages/client/src/pages/diagnostics/DiagnosticFilter.tsx
+++ /dev/null
@@ -1,54 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import { Dropdown, IDropdownOption, IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';
-import formatMessage from 'format-message';
-
-import { DiagnosticSeverity } from './types';
-
-export const dropdownStyles: Partial<IDropdownStyles> = {
-  dropdown: { width: 180, marginLeft: 'auto' },
-};
-
-const createOptions = (): IDropdownOption[] => {
-  const defaultOptions: IDropdownOption[] = [
-    {
-      key: formatMessage('Show All Diagnostics'),
-      text: formatMessage('All'),
-      ariaLabel: formatMessage('Show All Diagnostics'),
-      data: '',
-      isSelected: true,
-    },
-  ];
-  DiagnosticSeverity.forEach((item) => {
-    defaultOptions.push({
-      key: item,
-      text: item,
-      data: item,
-      ariaLabel: formatMessage('Show {item} Diagnostics', { item: item }),
-    });
-  });
-  return defaultOptions;
-};
-
-export interface IDiagnosticFilter {
-  onChange: (text: string) => void;
-}
-
-export const DiagnosticFilter: React.FC<IDiagnosticFilter> = (props) => {
-  const { onChange } = props;
-
-  return (
-    <Dropdown
-      ariaLabel={formatMessage('Diagnostic type')}
-      data-testid="notifications-dropdown"
-      options={createOptions()}
-      styles={dropdownStyles}
-      onChange={(event, option) => {
-        if (option) onChange(option.data);
-      }}
-    />
-  );
-};
diff --git a/Composer/packages/client/src/pages/diagnostics/Diagnostics.tsx b/Composer/packages/client/src/pages/diagnostics/Diagnostics.tsx
deleted file mode 100644
index e5ec6e227..000000000
--- a/Composer/packages/client/src/pages/diagnostics/Diagnostics.tsx
+++ /dev/null
@@ -1,63 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import { useState } from 'react';
-import { RouteComponentProps } from '@reach/router';
-import formatMessage from 'format-message';
-import { useRecoilValue, useSetRecoilState } from 'recoil';
-import { IToolbarItem } from '@bfc/ui-shared';
-
-import { navigateTo } from '../../utils/navigation';
-import { Page } from '../../components/Page';
-import { diagnosticNavLinksSelector } from '../../recoilModel/selectors/diagnosticsPageSelector';
-import { exportSkillModalInfoState } from '../../recoilModel';
-import { DiagnosticsHeader } from '../../components/DiagnosticsHeader';
-
-import { DiagnosticList } from './DiagnosticList';
-import { DiagnosticFilter } from './DiagnosticFilter';
-import { IDiagnosticInfo } from './types';
-
-const Diagnostics: React.FC<RouteComponentProps<{ projectId: string; skillId: string }>> = (props) => {
-  const [showType, setShowType] = useState('');
-  const setExportSkillModalInfo = useSetRecoilState(exportSkillModalInfoState);
-  const navLinks = useRecoilValue(diagnosticNavLinksSelector);
-
-  const { projectId = '', skillId } = props;
-  const toolbarItems: IToolbarItem[] = [
-    {
-      type: 'element',
-      element: <DiagnosticsHeader />,
-      align: 'right',
-    },
-  ];
-
-  const handleItemClick = (item: IDiagnosticInfo) => {
-    navigateTo(item.getUrl());
-    if (item.location === 'manifest.json') {
-      setExportSkillModalInfo(item.projectId);
-    }
-  };
-
-  const onRenderHeaderContent = () => {
-    return <DiagnosticFilter onChange={setShowType} />;
-  };
-
-  return (
-    <Page
-      data-testid="LUPage"
-      mainRegionName={formatMessage('Diagnostic List')}
-      navLinks={navLinks}
-      navRegionName={formatMessage('Diagnostics Pane')}
-      pageMode={'diagnostics'}
-      title={formatMessage('Diagnostics')}
-      toolbarItems={toolbarItems}
-      onRenderHeaderContent={onRenderHeaderContent}
-    >
-      <DiagnosticList showType={showType} skillId={skillId ?? projectId} onItemClick={handleItemClick} />
-    </Page>
-  );
-};
-
-export default Diagnostics;
diff --git a/Composer/packages/client/src/pages/diagnostics/types.ts b/Composer/packages/client/src/pages/diagnostics/types.ts
deleted file mode 100644
index ee6829fdf..000000000
--- a/Composer/packages/client/src/pages/diagnostics/types.ts
+++ /dev/null
@@ -1,220 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-import { createSingleMessage, isDiagnosticWithInRange } from '@bfc/indexers';
-import { Diagnostic, DialogInfo, LuFile, LgFile, LgNamePattern } from '@bfc/shared';
-import get from 'lodash/get';
-
-import { getBaseName } from '../../utils/fileUtil';
-import { replaceDialogDiagnosticLabel } from '../../utils/dialogUtil';
-import { convertPathToUrl, createBotSettingUrl } from '../../utils/navigation';
-export const DiagnosticSeverity = ['Error', 'Warning']; //'Information', 'Hint'
-
-export enum DiagnosticType {
-  DIALOG,
-  LG,
-  LU,
-  QNA,
-  SKILL,
-  SETTING,
-  GENERAL,
-}
-
-export interface IDiagnosticInfo {
-  rootProjectId: string;
-  projectId: string;
-  id: string;
-  severity: string;
-  type: DiagnosticType;
-  location: string;
-  message: string;
-  diagnostic: any;
-  dialogPath?: string; //the data path in dialog
-  resourceId: string; // id without locale
-  getUrl: () => string;
-}
-
-export abstract class DiagnosticInfo implements IDiagnosticInfo {
-  rootProjectId: string;
-  projectId: string;
-  id: string;
-  severity: string;
-  type = DiagnosticType.GENERAL;
-  location: string;
-  message = '';
-  diagnostic: Diagnostic;
-  dialogPath?: string;
-  resourceId: string;
-  getUrl = () => '';
-
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    this.rootProjectId = rootProjectId;
-    this.projectId = projectId;
-    this.id = id;
-    this.resourceId = getBaseName(id);
-    this.severity = DiagnosticSeverity[diagnostic.severity] || '';
-    this.diagnostic = diagnostic;
-    this.location = location;
-  }
-}
-
-export class BotDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.GENERAL;
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.message = diagnostic.message;
-  }
-
-  getUrl = () => {
-    let url = '';
-    switch (this.location) {
-      case 'manifest.json': {
-        const { rootProjectId, projectId } = this;
-        url = convertPathToUrl(rootProjectId, rootProjectId === projectId ? null : projectId, null);
-        break;
-      }
-    }
-
-    return url;
-  };
-}
-
-export class DialogDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.DIALOG;
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.message = `In ${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
-    this.dialogPath = diagnostic.path;
-  }
-
-  getUrl = () => {
-    //path is like main.trigers[0].actions[0]
-    //uri = id?selected=triggers[0]&focused=triggers[0].actions[0]
-    const { rootProjectId, projectId, id, dialogPath = '' } = this;
-    return convertPathToUrl(rootProjectId, rootProjectId === projectId ? null : projectId, id, dialogPath);
-  };
-}
-
-export class SkillSettingDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.SKILL;
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.message = `${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
-    this.dialogPath = diagnostic.path;
-  }
-  getUrl = () => {
-    const { rootProjectId, projectId, id } = this;
-
-    if (this.location === 'appsettings.json') {
-      return createBotSettingUrl(rootProjectId, projectId);
-    }
-
-    return convertPathToUrl(rootProjectId, rootProjectId === projectId ? null : projectId, id);
-  };
-}
-
-export class SettingDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.SETTING;
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.message = `${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
-    this.dialogPath = diagnostic.path;
-  }
-  getUrl = () => {
-    return createBotSettingUrl(this.rootProjectId, this.projectId);
-  };
-}
-
-export class LgDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.LG;
-  constructor(
-    rootProjectId: string,
-    projectId: string,
-    id: string,
-    location: string,
-    diagnostic: Diagnostic,
-    lgFile: LgFile,
-    dialogs: DialogInfo[]
-  ) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.message = createSingleMessage(diagnostic);
-    this.dialogPath = this.findDialogPath(lgFile, dialogs, diagnostic);
-  }
-  private findDialogPath(lgFile: LgFile, dialogs: DialogInfo[], diagnostic: Diagnostic) {
-    const mappedTemplate = lgFile.templates.find(
-      (t) =>
-        get(diagnostic, 'range.start.line') >= get(t, 'range.start.line') &&
-        get(diagnostic, 'range.end.line') <= get(t, 'range.end.line')
-    );
-    if (mappedTemplate && mappedTemplate.name.match(LgNamePattern)) {
-      //should navigate to design page
-      const lgTemplateName = mappedTemplate.name;
-      const dialog = dialogs.find((d) => d.lgFile === this.resourceId);
-      const lgTemplate = dialog ? dialog.lgTemplates.find((lg) => lg.name === lgTemplateName) : null;
-      const path = lgTemplate ? lgTemplate.path : '';
-      return path;
-    }
-  }
-
-  getUrl = () => {
-    const { rootProjectId, projectId, resourceId, diagnostic, dialogPath } = this;
-    let uri = `/bot/${rootProjectId}/language-generation/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
-    //the format of item.id is lgFile#inlineTemplateId
-    if (dialogPath) {
-      uri = convertPathToUrl(rootProjectId, rootProjectId === projectId ? null : projectId, resourceId, dialogPath);
-    }
-
-    return uri;
-  };
-}
-
-export class LuDiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.LU;
-  constructor(
-    rootProjectId: string,
-    projectId: string,
-    id: string,
-    location: string,
-    diagnostic: Diagnostic,
-    luFile: LuFile,
-    dialogs: DialogInfo[]
-  ) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.dialogPath = this.findDialogPath(luFile, dialogs, diagnostic);
-    this.message = createSingleMessage(diagnostic);
-  }
-
-  private findDialogPath(luFile: LuFile, dialogs: DialogInfo[], d: Diagnostic) {
-    const intentName = luFile.intents.find((intent) => {
-      const { range } = intent;
-      if (!range) return false;
-      return isDiagnosticWithInRange(d, range);
-    })?.Name;
-
-    return dialogs
-      .find((dialog) => dialog.id === this.resourceId)
-      ?.referredLuIntents.find((lu) => lu.name === intentName)?.path;
-  }
-
-  getUrl = () => {
-    const { rootProjectId, projectId, resourceId, diagnostic, dialogPath } = this;
-    let uri = `/bot/${projectId}/language-understanding/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
-    if (dialogPath) {
-      uri = convertPathToUrl(rootProjectId, rootProjectId === projectId ? null : projectId, resourceId, dialogPath);
-    }
-    return uri;
-  };
-}
-
-export class QnADiagnostic extends DiagnosticInfo {
-  type = DiagnosticType.QNA;
-  constructor(rootProjectId: string, projectId: string, id: string, location: string, diagnostic: Diagnostic) {
-    super(rootProjectId, projectId, id, location, diagnostic);
-    this.dialogPath = '';
-    this.message = createSingleMessage(diagnostic);
-  }
-
-  getUrl = () => {
-    const { rootProjectId, resourceId, diagnostic } = this;
-    return `/bot/${rootProjectId}/knowledge-base/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
-  };
-}
diff --git a/Composer/packages/client/src/pages/form-dialog/FormDialogPage.tsx b/Composer/packages/client/src/pages/form-dialog/FormDialogPage.tsx
index 8c21868ed..943f073b1 100644
--- a/Composer/packages/client/src/pages/form-dialog/FormDialogPage.tsx
+++ b/Composer/packages/client/src/pages/form-dialog/FormDialogPage.tsx
@@ -116,7 +116,7 @@ const FormDialogPage: React.FC<Props> = React.memo((props: Props) => {
   return (
     <>
       <Stack horizontal verticalFill>
-        <LeftRightSplit initialLeftGridWidth={320} minLeftPixels={320} minRightPixels={800} pageMode={'forms'}>
+        <LeftRightSplit initialLeftGridWidth={320} minLeftPixels={320} minRightPixels={800}>
           <FormDialogSchemaList
             items={formDialogSchemaIds}
             loading={formDialogGenerationProgressing}
diff --git a/Composer/packages/client/src/pages/home/Home.tsx b/Composer/packages/client/src/pages/home/Home.tsx
index 3bd96446a..f80c5a932 100644
--- a/Composer/packages/client/src/pages/home/Home.tsx
+++ b/Composer/packages/client/src/pages/home/Home.tsx
@@ -60,14 +60,9 @@ const Home: React.FC<RouteComponentProps> = () => {
   const botName = useRecoilValue(botDisplayNameState(projectId));
   const recentProjects = useRecoilValue(recentProjectsState);
   const templateId = useRecoilValue(templateIdState);
-  const {
-    openProject,
-    setCreationFlowStatus,
-    onboardingAddCoachMarkRef,
-    saveTemplateId,
-    setCreationFlowType,
-  } = useRecoilValue(dispatcherState);
-
+  const { openProject, setCreationFlowStatus, onboardingAddCoachMarkRef, saveTemplateId } = useRecoilValue(
+    dispatcherState
+  );
   const filteredTemplates = useRecoilValue(filteredTemplatesSelector);
 
   const onItemChosen = async (item) => {
@@ -95,7 +90,6 @@ const Home: React.FC<RouteComponentProps> = () => {
           iconName: 'CirclePlus',
         },
         onClick: () => {
-          setCreationFlowType('Bot');
           setCreationFlowStatus(CreationFlowStatus.NEW);
           navigate(`projects/create`);
         },
diff --git a/Composer/packages/client/src/pages/knowledge-base/QnAPage.tsx b/Composer/packages/client/src/pages/knowledge-base/QnAPage.tsx
index ecefcfc74..c53392b19 100644
--- a/Composer/packages/client/src/pages/knowledge-base/QnAPage.tsx
+++ b/Composer/packages/client/src/pages/knowledge-base/QnAPage.tsx
@@ -4,60 +4,118 @@
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
 import { useRecoilValue } from 'recoil';
-import React, { Fragment, useCallback, Suspense, useEffect } from 'react';
+import React, { Fragment, useMemo, useCallback, Suspense, useEffect, useState } from 'react';
 import formatMessage from 'format-message';
 import { ActionButton } from 'office-ui-fabric-react/lib/Button';
 import { RouteComponentProps, Router } from '@reach/router';
 
 import { LoadingSpinner } from '../../components/LoadingSpinner';
 import { navigateTo } from '../../utils/navigation';
+import { TestController } from '../../components/TestController/TestController';
+import { INavTreeItem } from '../../components/NavTree';
 import { Page } from '../../components/Page';
-import { dialogsSelectorFamily, qnaFilesState, dispatcherState, createQnAOnState } from '../../recoilModel';
+import { dialogsSelectorFamily, qnaFilesState } from '../../recoilModel';
+import { dispatcherState } from '../../recoilModel';
 import { CreateQnAModal } from '../../components/QnA';
 
 import TableView from './table-view';
 
 const CodeEditor = React.lazy(() => import('./code-editor'));
 
-const QnAPage: React.FC<RouteComponentProps<{
-  dialogId: string;
-  projectId: string;
-  skillId: string;
-}>> = (props) => {
-  const { dialogId = '', projectId = '', skillId } = props;
+interface QnAPageProps extends RouteComponentProps<{}> {
+  projectId?: string;
+  dialogId?: string;
+}
 
-  const actualProjectId = skillId ?? projectId;
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
+const QnAPage: React.FC<QnAPageProps> = (props) => {
+  const { dialogId = '', projectId = '' } = props;
 
   const actions = useRecoilValue(dispatcherState);
-  const dialogs = useRecoilValue(dialogsSelectorFamily(actualProjectId));
-  const qnaFiles = useRecoilValue(qnaFilesState(actualProjectId));
+  const dialogs = useRecoilValue(dialogsSelectorFamily(projectId));
+  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
   //To do: support other languages
   const locale = 'en-us';
   //const locale = useRecoilValue(localeState);
-  const creatQnAOnInfo = useRecoilValue(createQnAOnState);
+  const [createOnDialogId, setCreateOnDialogId] = useState('');
 
   const path = props.location?.pathname ?? '';
 
   const edit = /\/edit(\/)?$/.test(path);
   const isRoot = dialogId === 'all';
+  const navLinks: INavTreeItem[] = useMemo(() => {
+    const newDialogLinks: INavTreeItem[] = dialogs.map((dialog) => {
+      return {
+        id: dialog.id,
+        name: dialog.displayName,
+        ariaLabel: formatMessage('qna file'),
+        url: `/bot/${projectId}/knowledge-base/${dialog.id}`,
+        menuIconProps: {
+          iconName: 'Add',
+        },
+        menuItems: [
+          {
+            name: formatMessage('Create KB from scratch'),
+            key: 'Create KB from scratch',
+            onClick: () => {
+              setCreateOnDialogId(dialog.id);
+              actions.createQnAFromScratchDialogBegin({ projectId });
+            },
+          },
+          {
+            name: formatMessage('Create KB from URL or file'),
+            key: 'Create KB from URL or file',
+            onClick: () => {
+              setCreateOnDialogId(dialog.id);
+              actions.createQnAFromUrlDialogBegin({ projectId });
+            },
+          },
+        ],
+      };
+    });
+    const mainDialogIndex = newDialogLinks.findIndex((link) => link.id === 'Main');
+
+    if (mainDialogIndex > -1) {
+      const mainDialog = newDialogLinks.splice(mainDialogIndex, 1)[0];
+      newDialogLinks.splice(0, 0, mainDialog);
+    }
+    newDialogLinks.splice(0, 0, {
+      id: 'all',
+      name: 'All',
+      ariaLabel: formatMessage('all qna files'),
+      url: `/bot/${projectId}/knowledge-base/all`,
+    });
+    return newDialogLinks;
+  }, [dialogs]);
 
   useEffect(() => {
+    setCreateOnDialogId('');
     const activeDialog = dialogs.find(({ id }) => id === dialogId);
     if (!activeDialog && dialogs.length && dialogId !== 'all') {
-      navigateTo(`${baseURL}knowledge-base/${dialogId}`);
+      navigateTo(`/bot/${projectId}/knowledge-base/${dialogId}`);
     }
-  }, [dialogId, dialogs, actualProjectId]);
+  }, [dialogId, dialogs, projectId]);
 
   const onToggleEditMode = useCallback(
     (_e) => {
-      let url = `${baseURL}knowledge-base/${dialogId}`;
+      let url = `/bot/${projectId}/knowledge-base/${dialogId}`;
       if (!edit) url += `/edit`;
       navigateTo(url);
     },
-    [dialogId, actualProjectId, edit]
+    [dialogId, projectId, edit]
   );
 
+  useEffect(() => {
+    actions.setCurrentPageMode('qna');
+  }, []);
+
+  const toolbarItems = [
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
+  ];
+
   const onRenderHeaderContent = () => {
     if (!isRoot) {
       return (
@@ -71,41 +129,40 @@ const QnAPage: React.FC<RouteComponentProps<{
 
   return (
     <Page
-      useNewTree
       data-testid="QnAPage"
       mainRegionName={formatMessage('QnA editor')}
+      navLinks={navLinks}
       navRegionName={formatMessage('Qna Navigation Pane')}
-      pageMode={'knowledge-base'}
       title={formatMessage('QnA')}
-      toolbarItems={[]}
+      toolbarItems={toolbarItems}
       onRenderHeaderContent={onRenderHeaderContent}
     >
       <Suspense fallback={<LoadingSpinner />}>
         <Router component={Fragment} primary={false}>
-          <CodeEditor dialogId={dialogId} path="/edit" projectId={projectId} skillId={skillId} />
-          <TableView path="/" projectId={projectId} />
+          <CodeEditor dialogId={dialogId} path="/edit" projectId={projectId} />
+          <TableView dialogId={dialogId} path="/" projectId={projectId} />
         </Router>
         <CreateQnAModal
-          dialogId={creatQnAOnInfo.dialogId}
-          projectId={creatQnAOnInfo.projectId}
+          dialogId={createOnDialogId || dialogId}
+          projectId={projectId}
           qnaFiles={qnaFiles}
           onDismiss={() => {
-            actions.createQnAFromUrlDialogCancel({ projectId: creatQnAOnInfo.projectId });
+            actions.createQnAFromUrlDialogCancel({ projectId });
           }}
           onSubmit={async ({ name, url, multiTurn = false }) => {
             if (url) {
               await actions.createQnAKBFromUrl({
-                id: `${creatQnAOnInfo.dialogId}.${locale}`,
+                id: `${createOnDialogId || dialogId}.${locale}`,
                 name,
                 url,
                 multiTurn,
-                projectId: creatQnAOnInfo.projectId,
+                projectId,
               });
             } else {
               await actions.createQnAKBFromScratch({
-                id: `${creatQnAOnInfo.dialogId}.${locale}`,
+                id: `${createOnDialogId || dialogId}.${locale}`,
                 name,
-                projectId: creatQnAOnInfo.projectId,
+                projectId,
               });
             }
           }}
diff --git a/Composer/packages/client/src/pages/knowledge-base/code-editor.tsx b/Composer/packages/client/src/pages/knowledge-base/code-editor.tsx
index 5fdc828f4..5abad40aa 100644
--- a/Composer/packages/client/src/pages/knowledge-base/code-editor.tsx
+++ b/Composer/packages/client/src/pages/knowledge-base/code-editor.tsx
@@ -19,16 +19,16 @@ import { getBaseName } from '../../utils/fileUtil';
 
 import { backIcon } from './styles';
 
-const lspServerPath = '/lu-language-server';
-const CodeEditor: React.FC<RouteComponentProps<{ dialogId: string; projectId: string; skillId?: string }>> = (
-  props
-) => {
-  const { projectId = '', dialogId = '', skillId } = props;
-  const actualProjectId = skillId ?? projectId;
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
+interface CodeEditorProps extends RouteComponentProps<{}> {
+  dialogId: string;
+  projectId: string;
+}
 
+const lspServerPath = '/lu-language-server';
+const CodeEditor: React.FC<CodeEditorProps> = (props) => {
+  const { projectId = '', dialogId = '' } = props;
   const actions = useRecoilValue(dispatcherState);
-  const qnaFiles = useRecoilValue(qnaFilesState(actualProjectId));
+  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
   //To do: support other languages
   const locale = 'en-us';
   //const locale = useRecoilValue(localeState);
@@ -63,7 +63,7 @@ const CodeEditor: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
     if (!file || isEmpty(file) || content) return;
     const value = file.content;
     setContent(value);
-  }, [file, actualProjectId]);
+  }, [file, projectId]);
 
   const editorDidMount: EditorDidMount = (_getValue, qnaEditor) => {
     setQnAEditor(qnaEditor);
@@ -76,9 +76,9 @@ const CodeEditor: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
   const onChangeContent = useMemo(
     () =>
       debounce((newContent: string) => {
-        actions.updateQnAFile({ id: targetFileId, content: newContent, projectId: actualProjectId });
+        actions.updateQnAFile({ id: targetFileId, content: newContent, projectId });
       }, 500),
-    [actualProjectId]
+    [projectId]
   );
 
   return (
@@ -90,7 +90,7 @@ const CodeEditor: React.FC<RouteComponentProps<{ dialogId: string; projectId: st
           }}
           styles={backIcon}
           onClick={() => {
-            navigateTo(`${baseURL}knowledge-base/${dialogId}`);
+            navigateTo(`/bot/${projectId}/knowledge-base/${dialogId}`);
           }}
         >
           {searchContainerName}
diff --git a/Composer/packages/client/src/pages/knowledge-base/table-view.tsx b/Composer/packages/client/src/pages/knowledge-base/table-view.tsx
index 2046b803f..f509dacb3 100644
--- a/Composer/packages/client/src/pages/knowledge-base/table-view.tsx
+++ b/Composer/packages/client/src/pages/knowledge-base/table-view.tsx
@@ -58,7 +58,6 @@ interface QnASectionItem extends QnASection {
   dialogId: string | undefined;
   used: boolean;
   usedIn: { id: string; displayName: string }[];
-  sectionId: string;
 }
 
 const createQnASectionItem = (fileId: string): QnASectionItem => {
@@ -74,16 +73,17 @@ const createQnASectionItem = (fileId: string): QnASectionItem => {
   };
 };
 
-const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: string; skillId?: string }>> = (props) => {
-  const { dialogId = '', projectId = '', skillId } = props;
-
-  const actualProjectId = skillId ?? projectId;
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
+interface TableViewProps extends RouteComponentProps<{}> {
+  dialogId: string;
+  projectId: string;
+}
 
+const TableView: React.FC<TableViewProps> = (props) => {
+  const { dialogId = '', projectId = '' } = props;
   const actions = useRecoilValue(dispatcherState);
-  const dialogs = useRecoilValue(dialogsSelectorFamily(actualProjectId));
-  const qnaFiles = useRecoilValue(qnaFilesState(actualProjectId));
-  const locale = useRecoilValue(localeState(actualProjectId));
+  const dialogs = useRecoilValue(dialogsSelectorFamily(projectId));
+  const qnaFiles = useRecoilValue(qnaFilesState(projectId));
+  const locale = useRecoilValue(localeState(projectId));
   const {
     removeQnAImport,
     removeQnAFile,
@@ -143,7 +143,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
   const allSourceFiles = qnaFiles.filter(({ id }) => id.endsWith('.source'));
 
   const initializeQnASections = (qnaFiles, dialogId) => {
-    if (isEmpty(qnaFiles)) return [];
+    if (isEmpty(qnaFiles)) return;
 
     const allSections = qnaFiles
       .filter(({ id }) => id.endsWith('.source'))
@@ -177,7 +177,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
 
       setQnASections(dialogSections);
     }
-  }, [qnaFiles, dialogId, actualProjectId]);
+  }, [qnaFiles, dialogId, projectId]);
 
   const onUpdateQnAQuestion = (fileId: string, sectionId: string, questionId: string, content: string) => {
     if (!fileId) return;
@@ -187,7 +187,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
       sectionId,
       questionId,
       content,
-      projectId: actualProjectId,
+      projectId,
     });
   };
 
@@ -198,7 +198,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
       id: fileId,
       sectionId,
       content,
-      projectId: actualProjectId,
+      projectId,
     });
   };
 
@@ -209,7 +209,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
     removeQnAPairs({
       id: fileId,
       sectionId,
-      projectId: actualProjectId,
+      projectId,
     });
     // update expand status
     if (expandedIndex) {
@@ -226,7 +226,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
     if (!Question || !Answer) return;
     const createdQnAPair = qnaUtil.generateQnAPair(Question, Answer);
     setCreatQnAPairSettings({ groupKey: '', sectionIndex: -1 });
-    createQnAPairs({ id: fileId, content: createdQnAPair, projectId: actualProjectId });
+    createQnAPairs({ id: fileId, content: createdQnAPair, projectId });
   };
 
   const onCreateNewQnAPairsStart = (fileId: string | undefined) => {
@@ -253,7 +253,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
       id: fileId,
       sectionId,
       content: content || 'Add new question',
-      projectId: actualProjectId,
+      projectId,
     };
     createQnAQuestion(payload);
   };
@@ -261,14 +261,9 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
   const onSubmitEditKB = async ({ name }: { name: string }) => {
     if (!editQnAFile) return;
     const newId = `${name}.source`;
-    await actions.renameQnAKB({ id: editQnAFile.id, name: newId, projectId: actualProjectId });
+    await actions.renameQnAKB({ id: editQnAFile.id, name: newId, projectId });
     if (!qnaFile) return;
-    await actions.updateQnAImport({
-      id: qnaFile.id,
-      sourceId: editQnAFile.id,
-      newSourceId: newId,
-      projectId: actualProjectId,
-    });
+    await actions.updateQnAImport({ id: qnaFile.id, sourceId: editQnAFile.id, newSourceId: newId, projectId });
     setEditQnAFile(undefined);
   };
 
@@ -347,7 +342,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
                         name: formatMessage('Show code'),
                         iconProps: { iconName: 'CodeEdit' },
                         onClick: () => {
-                          navigateTo(`${baseURL}knowledge-base/${dialogId}/edit?C=${containerId}`);
+                          navigateTo(`/bot/${projectId}/knowledge-base/${dialogId}/edit?C=${containerId}`);
                         },
                       },
                       {
@@ -357,8 +352,8 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
                         disabled: dialogId === 'all',
                         onClick: async () => {
                           if (!qnaFile) return;
-                          await removeQnAImport({ id: qnaFile.id, sourceId: containerId, projectId: actualProjectId });
-                          await removeQnAFile({ id: containerId, projectId: actualProjectId });
+                          await removeQnAImport({ id: qnaFile.id, sourceId: containerId, projectId });
+                          await removeQnAFile({ id: containerId, projectId });
                         },
                       },
                     ] as IOverflowSetItemProps[]
@@ -634,7 +629,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
                   <Link
                     key={id}
                     onClick={() => {
-                      navigateTo(`${baseURL}knowledge-base/${id}`);
+                      navigateTo(`/bot/${projectId}/knowledge-base/${id}`);
                     }}
                   >
                     {displayName}
@@ -776,7 +771,7 @@ const TableView: React.FC<RouteComponentProps<{ dialogId: string; projectId: str
             data-testid={'createKnowledgeBase'}
             text={formatMessage('Create new KB')}
             onClick={() => {
-              actions.createQnAFromUrlDialogBegin({ projectId: actualProjectId, dialogId });
+              actions.createQnAFromUrlDialogBegin({ projectId });
             }}
           />
         </div>
diff --git a/Composer/packages/client/src/pages/language-generation/LGPage.tsx b/Composer/packages/client/src/pages/language-generation/LGPage.tsx
index af734692f..b3f914871 100644
--- a/Composer/packages/client/src/pages/language-generation/LGPage.tsx
+++ b/Composer/packages/client/src/pages/language-generation/LGPage.tsx
@@ -3,7 +3,7 @@
 
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
-import React, { Fragment, useCallback, Suspense, useEffect } from 'react';
+import React, { Fragment, useMemo, useCallback, Suspense, useEffect } from 'react';
 import formatMessage from 'format-message';
 import { ActionButton } from 'office-ui-fabric-react/lib/Button';
 import { RouteComponentProps, Router } from '@reach/router';
@@ -11,42 +11,84 @@ import { useRecoilValue } from 'recoil';
 
 import { LoadingSpinner } from '../../components/LoadingSpinner';
 import { navigateTo } from '../../utils/navigation';
+import { TestController } from '../../components/TestController/TestController';
+import { INavTreeItem } from '../../components/NavTree';
 import { Page } from '../../components/Page';
 import { validateDialogsSelectorFamily } from '../../recoilModel';
 
 import TableView from './table-view';
 const CodeEditor = React.lazy(() => import('./code-editor'));
 
-const LGPage: React.FC<RouteComponentProps<{
+interface LGPageProps {
   dialogId: string;
   projectId: string;
-  skillId: string;
-}>> = (props) => {
-  const { dialogId = '', projectId = '', skillId } = props;
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(skillId ?? projectId ?? ''));
+}
+
+const LGPage: React.FC<RouteComponentProps<LGPageProps>> = (props: RouteComponentProps<LGPageProps>) => {
+  const { dialogId = '', projectId = '' } = props;
+  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
 
   const path = props.location?.pathname ?? '';
 
   const edit = /\/edit(\/)?$/.test(path);
 
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
+  const navLinks: INavTreeItem[] = useMemo(() => {
+    const newDialogLinks: INavTreeItem[] = dialogs.map((dialog) => {
+      let url = `/bot/${projectId}/language-generation/${dialog.id}`;
+      if (edit) {
+        url += `/edit`;
+      }
+      return {
+        id: dialog.id,
+        name: dialog.displayName,
+        ariaLabel: formatMessage('language generation file'),
+        url,
+      };
+    });
+    const mainDialogIndex = newDialogLinks.findIndex((link) => link.id === 'Main');
+
+    if (mainDialogIndex > -1) {
+      const mainDialog = newDialogLinks.splice(mainDialogIndex, 1)[0];
+      newDialogLinks.splice(0, 0, mainDialog);
+    }
+    let commonUrl = `/bot/${projectId}/language-generation/common`;
+    if (edit) {
+      commonUrl += '/edit';
+    }
+
+    newDialogLinks.splice(0, 0, {
+      id: 'common',
+      name: formatMessage('All'),
+      ariaLabel: formatMessage('all language generation files'),
+      url: commonUrl,
+    });
+    return newDialogLinks;
+  }, [dialogs, edit]);
 
   useEffect(() => {
     const activeDialog = dialogs.find(({ id }) => id === dialogId);
     if (!activeDialog && dialogs.length && dialogId !== 'common') {
-      navigateTo(`${baseURL}language-generation/common`);
+      navigateTo(`/bot/${projectId}/language-generation/common`);
     }
   }, [dialogId, dialogs, projectId]);
 
   const onToggleEditMode = useCallback(
     (_e) => {
-      let url = `${baseURL}language-generation/${dialogId}`;
+      let url = `/bot/${projectId}/language-generation/${dialogId}`;
       if (!edit) url += `/edit`;
       navigateTo(url);
     },
     [dialogId, projectId, edit]
   );
 
+  const toolbarItems = [
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
+  ];
+
   const onRenderHeaderContent = () => {
     return (
       <ActionButton data-testid="showcode" onClick={onToggleEditMode}>
@@ -57,18 +99,17 @@ const LGPage: React.FC<RouteComponentProps<{
 
   return (
     <Page
-      useNewTree
       data-testid="LGPage"
       mainRegionName={formatMessage('LG editor')}
+      navLinks={navLinks}
       navRegionName={formatMessage('LG Navigation Pane')}
-      pageMode={'language-generation'}
       title={formatMessage('Bot Responses')}
-      toolbarItems={[]}
+      toolbarItems={toolbarItems}
       onRenderHeaderContent={onRenderHeaderContent}
     >
       <Suspense fallback={<LoadingSpinner />}>
         <Router component={Fragment} primary={false}>
-          <CodeEditor dialogId={dialogId} path="/edit/*" projectId={projectId} skillId={skillId} />
+          <CodeEditor dialogId={dialogId} path="/edit/*" projectId={projectId} />
           <TableView dialogId={dialogId} path="/" projectId={projectId} />
         </Router>
       </Suspense>
diff --git a/Composer/packages/client/src/pages/language-generation/code-editor.tsx b/Composer/packages/client/src/pages/language-generation/code-editor.tsx
index 352a225e7..aa6cfd03a 100644
--- a/Composer/packages/client/src/pages/language-generation/code-editor.tsx
+++ b/Composer/packages/client/src/pages/language-generation/code-editor.tsx
@@ -24,17 +24,14 @@ const lspServerPath = '/lg-language-server';
 interface CodeEditorProps extends RouteComponentProps<{}> {
   dialogId: string;
   projectId: string;
-  skillId?: string;
 }
 
 const CodeEditor: React.FC<CodeEditorProps> = (props) => {
-  const { dialogId, projectId, skillId } = props;
-  const actualProjectId = skillId ?? projectId;
-
+  const { dialogId, projectId } = props;
   const userSettings = useRecoilValue(userSettingsState);
-  const locale = useRecoilValue(localeState(actualProjectId));
-  const lgFiles = useRecoilValue(lgFilesState(actualProjectId));
-  const settings = useRecoilValue(settingsState(actualProjectId));
+  const locale = useRecoilValue(localeState(projectId));
+  const lgFiles = useRecoilValue(lgFilesState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
 
   const { languages, defaultLanguage } = settings;
 
@@ -95,7 +92,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         const { name, parameters } = template;
         const payload = {
           id: file.id,
-          projectId: actualProjectId,
+          projectId,
           templateName: name,
           template: {
             name,
@@ -105,7 +102,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         };
         updateLgTemplateDispatcher(payload);
       }, 500),
-    [file, template, actualProjectId]
+    [file, template, projectId]
   );
 
   const updateLgFile = useMemo(
@@ -115,12 +112,12 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         const { id } = file;
         const payload = {
           id,
-          projectId: actualProjectId,
+          projectId,
           content,
         };
         updateLgFileDispatcher(payload);
       }, 500),
-    [file, actualProjectId]
+    [file, projectId]
   );
 
   const onChange = useCallback(
@@ -137,7 +134,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         updateLgFile(value);
       }
     },
-    [file, template, actualProjectId]
+    [file, template, projectId]
   );
 
   const handleSettingsChange = (settings: Partial<CodeEditorSettings>) => {
@@ -145,7 +142,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
   };
 
   const lgOption = {
-    projectId: actualProjectId,
+    projectId,
     fileId: file?.id || dialogId,
     templateId: template?.name,
   };
@@ -196,7 +193,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
           left={currentLanguageFileEditor}
           locale={locale}
           right={defaultLanguageFileEditor}
-          onLanguageChange={(locale) => setLocale(locale, actualProjectId)}
+          onLanguageChange={(locale) => setLocale(locale, projectId)}
         ></DiffCodeEditor>
       )}
     </Fragment>
diff --git a/Composer/packages/client/src/pages/language-generation/table-view.tsx b/Composer/packages/client/src/pages/language-generation/table-view.tsx
index 94508e90f..744ecda49 100644
--- a/Composer/packages/client/src/pages/language-generation/table-view.tsx
+++ b/Composer/packages/client/src/pages/language-generation/table-view.tsx
@@ -31,21 +31,18 @@ import {
 } from '../../recoilModel';
 import { languageListTemplates } from '../../components/MultiLanguage';
 
-interface TableViewProps extends RouteComponentProps<{ dialogId: string; skillId: string; projectId: string }> {
-  projectId?: string;
-  skillId?: string;
-  dialogId?: string;
+interface TableViewProps extends RouteComponentProps<{ dialogId: string; projectId: string }> {
+  dialogId: string;
+  projectId: string;
 }
 
 const TableView: React.FC<TableViewProps> = (props) => {
-  const { dialogId, projectId, skillId } = props;
+  const { dialogId, projectId } = props;
 
-  const actualProjectId = skillId ?? projectId ?? '';
-
-  const lgFiles = useRecoilValue(lgFilesState(actualProjectId));
-  const locale = useRecoilValue(localeState(actualProjectId));
-  const settings = useRecoilValue(settingsState(actualProjectId));
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(actualProjectId));
+  const lgFiles = useRecoilValue(lgFilesState(projectId));
+  const locale = useRecoilValue(localeState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
+  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
   const { createLgTemplate, copyLgTemplate, removeLgTemplate, setMessage, updateLgTemplate } = useRecoilValue(
     dispatcherState
   );
@@ -66,23 +63,22 @@ const TableView: React.FC<TableViewProps> = (props) => {
     if (!file || isEmpty(file)) return;
 
     setTemplates(file.templates);
-  }, [file, activeDialog, actualProjectId]);
+  }, [file, activeDialog, projectId]);
 
   const moreLabel = formatMessage('Actions');
 
   const onClickEdit = useCallback(
     (name: string) => {
-      const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
-      navigateTo(`${baseURL}language-generation/${dialogId}/edit?t=${encodeURIComponent(name)}`);
+      navigateTo(`/bot/${projectId}/language-generation/${dialogId}/edit?t=${encodeURIComponent(name)}`);
     },
-    [dialogId, projectId, skillId]
+    [dialogId, projectId]
   );
 
   const onCreateNewTemplate = useCallback(() => {
     if (file) {
       const newName = lgUtil.increaseNameUtilNotExist(file.templates, 'TemplateName');
       const payload = {
-        projectId: actualProjectId,
+        projectId,
         id: file.id,
         template: {
           name: newName,
@@ -100,7 +96,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
         const payload = {
           id: file.id,
           templateName: name,
-          projectId: actualProjectId,
+          projectId,
         };
         removeLgTemplate(payload);
         //setFocusedIndex(file.templates.findIndex((item) => item.name === name));
@@ -117,7 +113,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
           id: file.id,
           fromTemplateName: name,
           toTemplateName: resolvedName,
-          projectId: actualProjectId,
+          projectId,
         };
         copyLgTemplate(payload);
         //setFocusedIndex(file.templates.length);
@@ -133,7 +129,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
           id: file.id,
           templateName,
           template,
-          projectId: actualProjectId,
+          projectId,
         };
         updateLgTemplate(payload);
       }
@@ -148,7 +144,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
           id: defaultLangFile.id,
           templateName,
           template,
-          projectId: actualProjectId,
+          projectId,
         };
         updateLgTemplate(payload);
       }
@@ -386,7 +382,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
     }
 
     return tableColums;
-  }, [activeDialog, actualProjectId]);
+  }, [activeDialog, projectId]);
 
   const onRenderDetailsHeader = useCallback((props, defaultRender) => {
     return (
diff --git a/Composer/packages/client/src/pages/language-understanding/LUPage.tsx b/Composer/packages/client/src/pages/language-understanding/LUPage.tsx
index 2b9b51977..8460bac7c 100644
--- a/Composer/packages/client/src/pages/language-understanding/LUPage.tsx
+++ b/Composer/packages/client/src/pages/language-understanding/LUPage.tsx
@@ -2,14 +2,16 @@
 // Licensed under the MIT License.
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
-import React, { Fragment, Suspense, useCallback, useEffect } from 'react';
+import React, { Fragment, useMemo, Suspense, useCallback, useEffect } from 'react';
 import formatMessage from 'format-message';
 import { ActionButton } from 'office-ui-fabric-react/lib/Button';
 import { RouteComponentProps, Router } from '@reach/router';
 import { useRecoilValue } from 'recoil';
 
-import { navigateTo, buildURL } from '../../utils/navigation';
+import { navigateTo } from '../../utils/navigation';
 import { LoadingSpinner } from '../../components/LoadingSpinner';
+import { TestController } from '../../components/TestController/TestController';
+import { INavTreeItem } from '../../components/NavTree';
 import { Page } from '../../components/Page';
 import { validateDialogsSelectorFamily } from '../../recoilModel';
 
@@ -17,29 +19,67 @@ import TableView from './table-view';
 const CodeEditor = React.lazy(() => import('./code-editor'));
 
 const LUPage: React.FC<RouteComponentProps<{
-  dialogId: string;
+  dialogId?: string;
   projectId: string;
-  skillId?: string;
 }>> = (props) => {
-  const { dialogId = '', projectId = '', skillId } = props;
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(skillId ?? projectId ?? ''));
+  const { dialogId = '', projectId = '' } = props;
+  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
 
   const path = props.location?.pathname ?? '';
   const edit = /\/edit(\/)?$/.test(path);
   const isRoot = dialogId === 'all';
 
+  const navLinks: INavTreeItem[] = useMemo(() => {
+    const newDialogLinks: INavTreeItem[] = dialogs.map((dialog) => {
+      let url = `/bot/${projectId}/language-understanding/${dialog.id}`;
+      if (edit) {
+        url += `/edit`;
+      }
+      return {
+        id: dialog.id,
+        url: url,
+        name: dialog.displayName,
+        ariaLabel: formatMessage('language understanding file'),
+      };
+    });
+    const mainDialogIndex = newDialogLinks.findIndex((link) => link.id === 'Main');
+
+    if (mainDialogIndex > -1) {
+      const mainDialog = newDialogLinks.splice(mainDialogIndex, 1)[0];
+      newDialogLinks.splice(0, 0, mainDialog);
+    }
+    newDialogLinks.splice(0, 0, {
+      id: 'all',
+      name: formatMessage('All'),
+      ariaLabel: formatMessage('all language understanding files'),
+      url: `/bot/${projectId}/language-understanding/all`,
+    });
+    return newDialogLinks;
+  }, [dialogs, edit]);
+
   useEffect(() => {
     const activeDialog = dialogs.find(({ id }) => id === dialogId);
     if (!activeDialog && dialogId !== 'all' && dialogs.length) {
-      navigateTo(buildURL('language-understanding', { projectId, skillId }));
+      navigateTo(`/bot/${projectId}/language-understanding/all`);
     }
   }, [dialogId, dialogs, projectId]);
 
-  const onToggleEditMode = useCallback(() => {
-    let url = buildURL('language-understanding', { projectId, skillId, dialogId });
-    if (!edit) url += `/edit`;
-    navigateTo(url);
-  }, [dialogId, projectId, edit]);
+  const onToggleEditMode = useCallback(
+    (_e) => {
+      let url = `/bot/${projectId}/language-understanding/${dialogId}`;
+      if (!edit) url += `/edit`;
+      navigateTo(url);
+    },
+    [dialogId, projectId, edit]
+  );
+
+  const toolbarItems = [
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
+  ];
 
   const onRenderHeaderContent = () => {
     if (!isRoot) {
@@ -54,19 +94,18 @@ const LUPage: React.FC<RouteComponentProps<{
 
   return (
     <Page
-      useNewTree
       data-testid="LUPage"
       mainRegionName={formatMessage('LU editor')}
+      navLinks={navLinks}
       navRegionName={formatMessage('LU Navigation Pane')}
-      pageMode={'language-understanding'}
       title={formatMessage('User Input')}
-      toolbarItems={[]}
+      toolbarItems={toolbarItems}
       onRenderHeaderContent={onRenderHeaderContent}
     >
       <Suspense fallback={<LoadingSpinner />}>
         <Router component={Fragment} primary={false}>
-          <CodeEditor dialogId={dialogId} path="/edit" projectId={projectId} skillId={skillId} />
-          <TableView path="/" />
+          <CodeEditor dialogId={dialogId} path="/edit" projectId={projectId} />
+          <TableView dialogId={dialogId} path="/" projectId={projectId} />
         </Router>
       </Suspense>
     </Page>
diff --git a/Composer/packages/client/src/pages/language-understanding/code-editor.tsx b/Composer/packages/client/src/pages/language-understanding/code-editor.tsx
index 2c33d9785..c695cc5a7 100644
--- a/Composer/packages/client/src/pages/language-understanding/code-editor.tsx
+++ b/Composer/packages/client/src/pages/language-understanding/code-editor.tsx
@@ -22,7 +22,6 @@ const lspServerPath = '/lu-language-server';
 interface CodeEditorProps extends RouteComponentProps<{}> {
   dialogId: string;
   projectId: string;
-  skillId?: string;
 }
 
 const CodeEditor: React.FC<CodeEditorProps> = (props) => {
@@ -33,12 +32,10 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
     updateUserSettings,
     setLocale,
   } = useRecoilValue(dispatcherState);
-  const { dialogId, projectId, skillId } = props;
-  const actualProjectId = skillId ?? projectId;
-
-  const luFiles = useRecoilValue(luFilesState(actualProjectId));
-  const locale = useRecoilValue(localeState(actualProjectId));
-  const settings = useRecoilValue(settingsState(actualProjectId));
+  const { dialogId, projectId } = props;
+  const luFiles = useRecoilValue(luFilesState(projectId));
+  const locale = useRecoilValue(localeState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
 
   const { languages, defaultLanguage } = settings;
 
@@ -90,7 +87,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         const payload = {
           id: file.id,
           intentName: Name,
-          projectId: actualProjectId,
+          projectId,
           intent: {
             Name,
             Body,
@@ -98,7 +95,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         };
         updateLuIntentDispatcher(payload);
       }, 500),
-    [file, intent, actualProjectId]
+    [file, intent, projectId]
   );
 
   const updateLuFile = useMemo(
@@ -107,13 +104,13 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         if (!file) return;
         const { id } = file;
         const payload = {
-          projectId: actualProjectId,
+          projectId,
           id,
           content,
         };
         updateLuFileDispatcher(payload);
       }, 500),
-    [file, actualProjectId]
+    [file, projectId]
   );
 
   const onChange = useCallback(
@@ -125,12 +122,12 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
         updateLuFile(value);
       }
     },
-    [file, intent, actualProjectId]
+    [file, intent, projectId]
   );
 
   const luFeatures = settings?.luFeatures || {};
   const luOption = {
-    projectId: actualProjectId,
+    projectId,
     fileId: file?.id || dialogId,
     sectionId: intent?.Name,
     luFeatures,
@@ -186,7 +183,7 @@ const CodeEditor: React.FC<CodeEditorProps> = (props) => {
           locale={locale}
           right={defaultLanguageFileEditor}
           onLanguageChange={(locale) => {
-            setLocale(locale, actualProjectId);
+            setLocale(locale, projectId);
           }}
         ></DiffCodeEditor>
       )}
diff --git a/Composer/packages/client/src/pages/language-understanding/table-view.tsx b/Composer/packages/client/src/pages/language-understanding/table-view.tsx
index c45824c04..20c34ffc3 100644
--- a/Composer/packages/client/src/pages/language-understanding/table-view.tsx
+++ b/Composer/packages/client/src/pages/language-understanding/table-view.tsx
@@ -33,10 +33,9 @@ import {
 } from '../../recoilModel';
 
 import { formCell, luPhraseCell, tableCell, editableFieldContainer } from './styles';
-interface TableViewProps extends RouteComponentProps<{ dialogId: string; skillId: string; projectId: string }> {
-  projectId?: string;
-  skillId?: string;
-  dialogId?: string;
+interface TableViewProps extends RouteComponentProps<{ dialogId: string; projectId: string }> {
+  dialogId: string;
+  projectId: string;
 }
 
 interface Intent {
@@ -49,17 +48,13 @@ interface Intent {
 }
 
 const TableView: React.FC<TableViewProps> = (props) => {
-  const { dialogId, projectId, skillId } = props;
-
-  const actualProjectId = skillId ?? projectId ?? '';
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
-
+  const { dialogId, projectId } = props;
   const { updateLuIntent } = useRecoilValue(dispatcherState);
 
-  const luFiles = useRecoilValue(luFilesState(actualProjectId));
-  const locale = useRecoilValue(localeState(actualProjectId));
-  const settings = useRecoilValue(settingsState(actualProjectId));
-  const dialogs = useRecoilValue(validateDialogsSelectorFamily(actualProjectId));
+  const luFiles = useRecoilValue(luFilesState(projectId));
+  const locale = useRecoilValue(localeState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
+  const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
 
   const { languages, defaultLanguage } = settings;
 
@@ -113,7 +108,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
       const dialogIntents = allIntents.filter((t) => t.dialogId === activeDialog.id);
       setIntents(dialogIntents);
     }
-  }, [luFiles, activeDialog, actualProjectId]);
+  }, [luFiles, activeDialog, projectId]);
 
   const handleIntentUpdate = useCallback(
     (fileId: string, intentName: string, intent: LuIntentSection) => {
@@ -121,7 +116,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
         id: fileId,
         intentName,
         intent,
-        projectId: actualProjectId,
+        projectId,
       };
       updateLuIntent(payload);
     },
@@ -135,7 +130,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
           id: defaultLangFile.id,
           intentName,
           intent,
-          projectId: actualProjectId,
+          projectId,
         };
         updateLuIntent(payload);
       }
@@ -150,7 +145,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
         name: formatMessage('Edit'),
         onClick: () => {
           const { name, dialogId } = intents[index];
-          navigateTo(`${baseURL}language-understanding/${dialogId}/edit?t=${encodeURIComponent(name)}`);
+          navigateTo(`/bot/${projectId}/language-understanding/${dialogId}/edit?t=${encodeURIComponent(name)}`);
         },
       },
     ];
@@ -312,7 +307,7 @@ const TableView: React.FC<TableViewProps> = (props) => {
               key={id}
               data-is-focusable
               aria-label={formatMessage(`link to where this LUIS intent is defined`)}
-              onClick={() => navigateTo(`${baseURL}dialogs/${id}`)}
+              onClick={() => navigateTo(`/bot/${projectId}/dialogs/${id}`)}
             >
               <Link>{id}</Link>
             </div>
diff --git a/Composer/packages/client/src/pages/notifications/NotificationHeader.tsx b/Composer/packages/client/src/pages/notifications/NotificationHeader.tsx
new file mode 100644
index 000000000..e355e4aab
--- /dev/null
+++ b/Composer/packages/client/src/pages/notifications/NotificationHeader.tsx
@@ -0,0 +1,49 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
+import formatMessage from 'format-message';
+
+import { DiagnosticSeverity } from './types';
+import { notificationHeader, notificationHeaderText, dropdownStyles } from './styles';
+
+const createOptions = (): IDropdownOption[] => {
+  const defaultOptions: IDropdownOption[] = [
+    {
+      key: formatMessage('Show All Notifications'),
+      text: formatMessage('All'),
+      ariaLabel: formatMessage('Show All Notifications'),
+      data: '',
+      isSelected: true,
+    },
+  ];
+  DiagnosticSeverity.forEach((item) => {
+    return defaultOptions.push({ key: item, text: item, data: item, ariaLabel: `Show ${item} Notifications` });
+  });
+  return defaultOptions;
+};
+
+export interface INotificationHeader {
+  onChange: (text: string) => void;
+}
+
+export const NotificationHeader: React.FC<INotificationHeader> = (props) => {
+  const { onChange } = props;
+
+  return (
+    <div css={notificationHeader}>
+      <h1 css={notificationHeaderText}>{formatMessage('Notifications')}</h1>
+      <Dropdown
+        ariaLabel={formatMessage('Notification type')}
+        data-testid="notifications-dropdown"
+        options={createOptions()}
+        styles={dropdownStyles}
+        onChange={(event, option) => {
+          if (option) onChange(option.data);
+        }}
+      />
+    </div>
+  );
+};
diff --git a/Composer/packages/client/src/pages/diagnostics/DiagnosticList.tsx b/Composer/packages/client/src/pages/notifications/NotificationList.tsx
similarity index 53%
rename from Composer/packages/client/src/pages/diagnostics/DiagnosticList.tsx
rename to Composer/packages/client/src/pages/notifications/NotificationList.tsx
index 45fa102ed..9aadd3b14 100644
--- a/Composer/packages/client/src/pages/diagnostics/DiagnosticList.tsx
+++ b/Composer/packages/client/src/pages/notifications/NotificationList.tsx
@@ -16,83 +16,15 @@ import { ScrollablePane, ScrollbarVisibility } from 'office-ui-fabric-react/lib/
 import { FontIcon } from 'office-ui-fabric-react/lib/Icon';
 import { useMemo, useState } from 'react';
 import formatMessage from 'format-message';
-import { RouteComponentProps } from '@reach/router';
-import { useRecoilValue } from 'recoil';
-import { mergeStyleSets } from 'office-ui-fabric-react/lib/Styling';
-import { FontSizes } from '@uifabric/fluent-theme';
-import { css } from '@emotion/core';
 
 import { Pagination } from '../../components/Pagination';
-import { diagnosticsSelectorFamily } from '../../recoilModel/selectors/diagnosticsPageSelector';
 
-import { IDiagnosticInfo } from './types';
+import { INotification } from './types';
+import { notification, typeIcon, listRoot, icons, tableView, detailList, tableCell, content } from './styles';
 
-// -------------------- Styles -------------------- //
-
-const icons = {
-  Error: { iconName: 'ErrorBadge', color: '#A80000', background: '#FED9CC' },
-  Warning: { iconName: 'Warning', color: '#8A8780', background: '#FFF4CE' },
-};
-
-const diagnostic = mergeStyleSets({
-  typeIconHeaderIcon: {
-    padding: 0,
-    fontSize: FontSizes.size16,
-  },
-  typeIconCell: {
-    textAlign: 'center',
-    cursor: 'pointer',
-  },
-  columnCell: {
-    cursor: 'pointer',
-  },
-});
-
-const typeIcon = (icon) => css`
-  vertical-align: middle;
-  font-size: 16px;
-  width: 24px;
-  height: 24px;
-  background: ${icon.background};
-  line-height: 24px;
-  color: ${icon.color};
-  cursor: pointer;
-`;
-
-const listRoot = css`
-  position: relative;
-  overflow-y: auto;
-  flex-grow: 1;
-  display: flex;
-  flex-direction: column;
-  height: 100%;
-`;
-
-const tableView = css`
-  position: relative;
-  flex-grow: 1;
-`;
-
-const detailList = css`
-  overflow-x: hidden;
-`;
-
-const tableCell = css`
-  outline: none;
-  :focus {
-    outline: rgb(102, 102, 102) solid 1px;
-  }
-`;
-
-const content = css`
-  outline: none;
-`;
-
-// -------------------- Diagnosticist -------------------- //
-export interface IDiagnosticListProps extends RouteComponentProps {
-  skillId?: string;
-  showType: string;
-  onItemClick: (item: IDiagnosticInfo) => void;
+export interface INotificationListProps {
+  items: INotification[];
+  onItemClick: (item: INotification) => void;
 }
 
 const itemCount = 10;
@@ -101,32 +33,32 @@ const columns: IColumn[] = [
   {
     key: 'Icon',
     name: '',
-    className: diagnostic.typeIconCell,
-    iconClassName: diagnostic.typeIconHeaderIcon,
+    className: notification.typeIconCell,
+    iconClassName: notification.typeIconHeaderIcon,
     fieldName: 'icon',
     minWidth: 30,
     maxWidth: 30,
-    onRender: (item: IDiagnosticInfo) => {
+    onRender: (item: INotification) => {
       const icon = icons[item.severity];
       return <FontIcon css={typeIcon(icon)} iconName={icon.iconName} />;
     },
   },
 
   {
-    key: 'DiagnosticType',
+    key: 'NotificationType',
     name: formatMessage('Type'),
-    className: diagnostic.columnCell,
+    className: notification.columnCell,
     fieldName: 'type',
     minWidth: 70,
     maxWidth: 90,
     isRowHeader: true,
     isResizable: true,
     data: 'string',
-    onRender: (item: IDiagnosticInfo) => {
+    onRender: (item: INotification) => {
       return (
         <div data-is-focusable css={tableCell}>
           <div
-            aria-label={formatMessage(`This is a {severity} diagnostic`, { severity: item.severity })}
+            aria-label={formatMessage(`This is a {severity} notification`, { severity: item.severity })}
             css={content}
             tabIndex={-1}
           >
@@ -138,15 +70,40 @@ const columns: IColumn[] = [
     isPadded: true,
   },
   {
-    key: 'DiagnosticLocation',
+    key: 'NotificationBotName',
+    name: formatMessage('Bot'),
+    className: notification.columnCell,
+    fieldName: 'botName',
+    minWidth: 70,
+    maxWidth: 90,
+    isRowHeader: true,
+    isResizable: true,
+    data: 'string',
+    onRender: (item: INotification) => {
+      return (
+        <div data-is-focusable css={tableCell}>
+          <div
+            aria-label={formatMessage(`This is a {botName} notification`, { botName: item.botName })}
+            css={content}
+            tabIndex={-1}
+          >
+            {item.botName}
+          </div>
+        </div>
+      );
+    },
+    isPadded: true,
+  },
+  {
+    key: 'NotificationLocation',
     name: formatMessage('Location'),
-    className: diagnostic.columnCell,
+    className: notification.columnCell,
     fieldName: 'location',
     minWidth: 70,
     maxWidth: 90,
     isResizable: true,
     data: 'string',
-    onRender: (item: IDiagnosticInfo) => {
+    onRender: (item: INotification) => {
       return (
         <div data-is-focusable css={tableCell}>
           <div
@@ -162,9 +119,9 @@ const columns: IColumn[] = [
     isPadded: true,
   },
   {
-    key: 'DiagnosticDetail',
+    key: 'NotificationDetail',
     name: formatMessage('Message'),
-    className: diagnostic.columnCell,
+    className: notification.columnCell,
     fieldName: 'message',
     minWidth: 70,
     maxWidth: 90,
@@ -172,11 +129,11 @@ const columns: IColumn[] = [
     isCollapsible: true,
     isMultiline: true,
     data: 'string',
-    onRender: (item: IDiagnosticInfo) => {
+    onRender: (item: INotification) => {
       return (
         <div data-is-focusable css={tableCell}>
           <div
-            aria-label={formatMessage(`Diagnostic Message {msg}`, { msg: item.message })}
+            aria-label={formatMessage(`Notification Message {msg}`, { msg: item.message })}
             css={content}
             tabIndex={-1}
           >
@@ -200,21 +157,19 @@ function onRenderDetailsHeader(props, defaultRender) {
   );
 }
 
-export const DiagnosticList: React.FC<IDiagnosticListProps> = (props) => {
-  const { onItemClick, skillId = '', showType } = props;
-  const diagnostics = useRecoilValue(diagnosticsSelectorFamily(skillId));
-  const availableDiagnostics = showType ? diagnostics.filter((x) => x.severity === showType) : diagnostics;
+export const NotificationList: React.FC<INotificationListProps> = (props) => {
+  const { items, onItemClick } = props;
   const [pageIndex, setPageIndex] = useState<number>(1);
 
   const pageCount: number = useMemo(() => {
-    return Math.ceil(availableDiagnostics.length / itemCount) || 1;
-  }, [availableDiagnostics]);
+    return Math.ceil(items.length / itemCount) || 1;
+  }, [items]);
 
-  const showItems = availableDiagnostics.slice((pageIndex - 1) * itemCount, pageIndex * itemCount);
+  const showItems = items.slice((pageIndex - 1) * itemCount, pageIndex * itemCount);
 
   return (
-    <div css={listRoot} data-testid="diagnostics-table-view" role="main">
-      <div aria-label={formatMessage('Diagnostic list')} css={tableView} role="region">
+    <div css={listRoot} data-testid="notifications-table-view" role="main">
+      <div aria-label={formatMessage('Notification list')} css={tableView} role="region">
         <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>
           <DetailsList
             isHeaderVisible
diff --git a/Composer/packages/client/src/pages/notifications/Notifications.tsx b/Composer/packages/client/src/pages/notifications/Notifications.tsx
new file mode 100644
index 000000000..ea0ff42de
--- /dev/null
+++ b/Composer/packages/client/src/pages/notifications/Notifications.tsx
@@ -0,0 +1,85 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import { useState } from 'react';
+import { RouteComponentProps } from '@reach/router';
+import { Toolbar } from '@bfc/ui-shared';
+
+import { navigateTo } from '../../utils/navigation';
+import { convertPathToUrl } from '../../utils/navigation';
+
+import useNotifications from './useNotifications';
+import { NotificationList } from './NotificationList';
+import { NotificationHeader } from './NotificationHeader';
+import { root } from './styles';
+import { INotification, NotificationType } from './types';
+
+const Notifications: React.FC<RouteComponentProps<{ projectId: string }>> = (props) => {
+  const { projectId = '' } = props;
+  const [filter, setFilter] = useState('');
+  const notifications = useNotifications(projectId, filter);
+  const rootProjectId = projectId;
+
+  const navigations = {
+    [NotificationType.LG]: (item: INotification) => {
+      const { projectId, resourceId, diagnostic, dialogPath } = item;
+      let uri = `/bot/${projectId}/language-generation/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
+      //the format of item.id is lgFile#inlineTemplateId
+      if (dialogPath) {
+        uri =
+          rootProjectId === projectId
+            ? convertPathToUrl(projectId, null, resourceId, dialogPath)
+            : convertPathToUrl(rootProjectId, projectId, resourceId, dialogPath);
+      }
+      navigateTo(uri);
+    },
+    [NotificationType.LU]: (item: INotification) => {
+      const { projectId, resourceId, diagnostic, dialogPath } = item;
+      let uri = `/bot/${projectId}/language-understanding/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
+      if (dialogPath) {
+        uri =
+          rootProjectId === projectId
+            ? convertPathToUrl(projectId, null, resourceId, dialogPath)
+            : convertPathToUrl(rootProjectId, projectId, resourceId, dialogPath);
+      }
+      navigateTo(uri);
+    },
+    [NotificationType.QNA]: (item: INotification) => {
+      const { projectId, resourceId, diagnostic } = item;
+      const uri = `/bot/${projectId}/knowledge-base/${resourceId}/edit#L=${diagnostic.range?.start.line || 0}`;
+      navigateTo(uri);
+    },
+    [NotificationType.DIALOG]: (item: INotification) => {
+      //path is like main.trigers[0].actions[0]
+      //uri = id?selected=triggers[0]&focused=triggers[0].actions[0]
+      const { projectId, id, dialogPath = '' } = item;
+      const uri =
+        rootProjectId === projectId
+          ? convertPathToUrl(projectId, null, id, dialogPath)
+          : convertPathToUrl(rootProjectId, projectId, id, dialogPath);
+      navigateTo(uri);
+    },
+    [NotificationType.SKILL]: (item: INotification) => {
+      const { projectId } = item;
+      navigateTo(`/bot/${projectId}/skills`);
+    },
+    [NotificationType.SETTING]: (item: INotification) => {
+      const { projectId } = item;
+      navigateTo(`/settings/bot/${projectId}/dialog-settings`);
+    },
+  };
+  const handleItemClick = (item: INotification) => {
+    navigations[item.type](item);
+  };
+  return (
+    <div css={root} data-testid="notifications-page">
+      <Toolbar />
+      <NotificationHeader onChange={setFilter} />
+      <NotificationList items={notifications} onItemClick={handleItemClick} />
+    </div>
+  );
+};
+
+export default Notifications;
diff --git a/Composer/packages/client/src/pages/notifications/styles.ts b/Composer/packages/client/src/pages/notifications/styles.ts
new file mode 100644
index 000000000..b8f3f43c4
--- /dev/null
+++ b/Composer/packages/client/src/pages/notifications/styles.ts
@@ -0,0 +1,89 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import { mergeStyleSets, FontWeights, FontSizes } from 'office-ui-fabric-react/lib/Styling';
+import { css } from '@emotion/core';
+import { IDropdownStyles } from 'office-ui-fabric-react/lib/Dropdown';
+
+export const icons = {
+  Error: { iconName: 'ErrorBadge', color: '#A80000', background: '#FED9CC' },
+  Warning: { iconName: 'Warning', color: '#8A8780', background: '#FFF4CE' },
+};
+
+export const notification = mergeStyleSets({
+  typeIconHeaderIcon: {
+    padding: 0,
+    fontSize: '16px',
+  },
+  typeIconCell: {
+    textAlign: 'center',
+    cursor: 'pointer',
+  },
+  columnCell: {
+    cursor: 'pointer',
+  },
+});
+
+export const dropdownStyles: Partial<IDropdownStyles> = {
+  dropdown: { width: 180, marginLeft: 'auto' },
+};
+
+export const typeIcon = (icon) => css`
+  vertical-align: middle;
+  font-size: 16px;
+  width: 24px;
+  height: 24px;
+  background: ${icon.background};
+  line-height: 24px;
+  color: ${icon.color};
+  cursor: pointer;
+`;
+
+export const notificationHeader = css`
+  border-bottom: 1px solid #edebe9;
+  height: 90px;
+  padding: 14px 38px 8px 29px;
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+`;
+
+export const notificationHeaderText = css`
+  font-size: ${FontSizes.xLarge};
+  color: #323130;
+  font-weight: ${FontWeights.semibold};
+`;
+
+export const root = css`
+  display: flex;
+  height: calc(100vh - 50px);
+  flex-direction: column;
+`;
+
+export const listRoot = css`
+  position: relative;
+  overflow-y: auto;
+  flex-grow: 1;
+  display: flex;
+  flex-direction: column;
+`;
+
+export const tableView = css`
+  position: relative;
+  flex-grow: 1;
+`;
+
+export const detailList = css`
+  overflow-x: hidden;
+`;
+
+export const tableCell = css`
+  outline: none;
+  :focus {
+    outline: rgb(102, 102, 102) solid 1px;
+  }
+`;
+
+export const content = css`
+  outline: none;
+`;
diff --git a/Composer/packages/client/src/pages/notifications/types.ts b/Composer/packages/client/src/pages/notifications/types.ts
new file mode 100644
index 000000000..fbde0a273
--- /dev/null
+++ b/Composer/packages/client/src/pages/notifications/types.ts
@@ -0,0 +1,159 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+import { createSingleMessage, isDiagnosticWithInRange } from '@bfc/indexers';
+import { Diagnostic, DialogInfo, LuFile, LgFile, LgNamePattern } from '@bfc/shared';
+import get from 'lodash/get';
+
+import { getBaseName } from '../../utils/fileUtil';
+import { replaceDialogDiagnosticLabel } from '../../utils/dialogUtil';
+export const DiagnosticSeverity = ['Error', 'Warning']; //'Information', 'Hint'
+
+export enum NotificationType {
+  DIALOG,
+  LG,
+  LU,
+  QNA,
+  SKILL,
+  SETTING,
+  GENERAL,
+}
+
+export interface INotification {
+  projectId: string;
+  botName: string;
+  id: string;
+  severity: string;
+  type: NotificationType;
+  location: string;
+  message: string;
+  diagnostic: any;
+  dialogPath?: string; //the data path in dialog
+  resourceId: string; // id without locale
+}
+
+export abstract class Notification implements INotification {
+  projectId: string;
+  botName: string;
+  id: string;
+  severity: string;
+  type = NotificationType.GENERAL;
+  location: string;
+  message = '';
+  diagnostic: Diagnostic;
+  dialogPath?: string;
+  resourceId: string;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    this.projectId = projectId;
+    this.botName = botName;
+    this.id = id;
+    this.resourceId = getBaseName(id);
+    this.severity = DiagnosticSeverity[diagnostic.severity] || '';
+    this.diagnostic = diagnostic;
+    this.location = location;
+  }
+}
+
+export class ServerNotification extends Notification {
+  type = NotificationType.GENERAL;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    super(projectId, botName, id, location, diagnostic);
+    this.message = diagnostic.message;
+  }
+}
+
+export class DialogNotification extends Notification {
+  type = NotificationType.DIALOG;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    super(projectId, botName, id, location, diagnostic);
+    this.message = `In ${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
+    this.dialogPath = diagnostic.path;
+  }
+}
+
+export class SkillNotification extends Notification {
+  type = NotificationType.SKILL;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    super(projectId, botName, id, location, diagnostic);
+    this.message = `${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
+    this.dialogPath = diagnostic.path;
+  }
+}
+
+export class SettingNotification extends Notification {
+  type = NotificationType.SETTING;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    super(projectId, botName, id, location, diagnostic);
+    this.message = `${replaceDialogDiagnosticLabel(diagnostic.path)} ${diagnostic.message}`;
+    this.dialogPath = diagnostic.path;
+  }
+}
+
+export class LgNotification extends Notification {
+  type = NotificationType.LG;
+  constructor(
+    projectId: string,
+    botName: string,
+    id: string,
+    location: string,
+    diagnostic: Diagnostic,
+    lgFile: LgFile,
+    dialogs: DialogInfo[]
+  ) {
+    super(projectId, botName, id, location, diagnostic);
+    this.message = createSingleMessage(diagnostic);
+    this.dialogPath = this.findDialogPath(lgFile, dialogs, diagnostic);
+  }
+  private findDialogPath(lgFile: LgFile, dialogs: DialogInfo[], diagnostic: Diagnostic) {
+    const mappedTemplate = lgFile.templates.find(
+      (t) =>
+        get(diagnostic, 'range.start.line') >= get(t, 'range.start.line') &&
+        get(diagnostic, 'range.end.line') <= get(t, 'range.end.line')
+    );
+    if (mappedTemplate && mappedTemplate.name.match(LgNamePattern)) {
+      //should navigate to design page
+      const lgTemplateName = mappedTemplate.name;
+      const dialog = dialogs.find((d) => d.lgFile === this.resourceId);
+      const lgTemplate = dialog ? dialog.lgTemplates.find((lg) => lg.name === lgTemplateName) : null;
+      const path = lgTemplate ? lgTemplate.path : '';
+      return path;
+    }
+  }
+}
+
+export class LuNotification extends Notification {
+  type = NotificationType.LU;
+  constructor(
+    projectId: string,
+    botName: string,
+    id: string,
+    location: string,
+    diagnostic: Diagnostic,
+    luFile: LuFile,
+    dialogs: DialogInfo[]
+  ) {
+    super(projectId, botName, id, location, diagnostic);
+    this.dialogPath = this.findDialogPath(luFile, dialogs, diagnostic);
+    this.message = createSingleMessage(diagnostic);
+  }
+
+  private findDialogPath(luFile: LuFile, dialogs: DialogInfo[], d: Diagnostic) {
+    const intentName = luFile.intents.find((intent) => {
+      const { range } = intent;
+      if (!range) return false;
+      return isDiagnosticWithInRange(d, range);
+    })?.Name;
+
+    return dialogs
+      .find((dialog) => dialog.id === this.resourceId)
+      ?.referredLuIntents.find((lu) => lu.name === intentName)?.path;
+  }
+}
+
+export class QnANotification extends Notification {
+  type = NotificationType.QNA;
+  constructor(projectId: string, botName: string, id: string, location: string, diagnostic: Diagnostic) {
+    super(projectId, botName, id, location, diagnostic);
+    this.dialogPath = '';
+    this.message = createSingleMessage(diagnostic);
+  }
+}
diff --git a/Composer/packages/client/src/pages/notifications/useNotifications.tsx b/Composer/packages/client/src/pages/notifications/useNotifications.tsx
new file mode 100644
index 000000000..365502a4e
--- /dev/null
+++ b/Composer/packages/client/src/pages/notifications/useNotifications.tsx
@@ -0,0 +1,11 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import { useRecoilValue } from 'recoil';
+
+import { messagersSelector } from '../../recoilModel/selectors';
+
+export default function useNotifications(_projectId: string, filter?: string) {
+  const messagers = useRecoilValue(messagersSelector);
+  return filter ? messagers.filter((x) => x.severity === filter) : messagers;
+}
diff --git a/Composer/packages/client/src/pages/publish/BotStatusList.tsx b/Composer/packages/client/src/pages/publish/BotStatusList.tsx
deleted file mode 100644
index 38e2f0ca1..000000000
--- a/Composer/packages/client/src/pages/publish/BotStatusList.tsx
+++ /dev/null
@@ -1,333 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import moment from 'moment';
-import formatMessage from 'format-message';
-import { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import React, { useState, Fragment } from 'react';
-import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
-import { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';
-import { PublishTarget } from '@bfc/shared';
-import { CheckboxVisibility, DetailsList, IColumn } from 'office-ui-fabric-react/lib/DetailsList';
-import { IconButton } from 'office-ui-fabric-react/lib/Button';
-import { SharedColors } from '@uifabric/fluent-theme';
-import { FontSizes } from '@uifabric/styling';
-
-import { navigateTo } from '../../utils/navigation';
-import { PublishType } from '../../recoilModel/types';
-
-import { IStatus, PublishStatusList } from './PublishStatusList';
-import { detailList, listRoot, tableView } from './styles';
-
-export type IBotStatus = {
-  id: string;
-  name: string;
-  publishTargets?: PublishTarget[];
-  publishTarget?: string;
-  time?: string;
-  status?: number;
-  message?: string;
-  comment?: string;
-};
-export type IBotStatusListProps = {
-  projectId: string;
-  items: IBotStatus[];
-  botPublishHistoryList: { projectId: string; publishHistory: { [key: string]: IStatus[] } }[];
-  botPublishTypesList: { projectId: string; publishTypes: PublishType[] }[];
-  updateItems: (items: IBotStatus[]) => void;
-  updatePublishHistory: (items: IStatus[], item: IBotStatus) => void;
-  updateSelectedBots: (items: IBotStatus[]) => void;
-  changePublishTarget: (PublishTarget: string, item: IBotStatus) => void;
-  onLogClick: (item: IStatus) => void;
-  onRollbackClick: (selectedVersion: IStatus, item: IBotStatus) => void;
-};
-
-export const BotStatusList: React.FC<IBotStatusListProps> = (props) => {
-  const {
-    projectId,
-    items,
-    botPublishHistoryList,
-    botPublishTypesList,
-    updateItems,
-    updatePublishHistory,
-    changePublishTarget,
-    updateSelectedBots,
-    onLogClick,
-    onRollbackClick,
-  } = props;
-  const [selectedBots, setSelectedBots] = useState<IBotStatus[]>([]);
-  const [showHistoryBots, setShowHistoryBots] = useState<string[]>([]);
-
-  const [currentSort, setSort] = useState({ key: 'Bot', descending: true });
-  const sortByName = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {
-    if (column.isSorted) {
-      column.isSortedDescending = !column.isSortedDescending;
-      const newItems: IBotStatus[] = items.reverse();
-      updateItems(newItems);
-    }
-  };
-  const changeSelected = (item: IBotStatus, isChecked?: boolean) => {
-    let newSelectedBots: IBotStatus[];
-    if (isChecked) {
-      newSelectedBots = [...selectedBots, item];
-    } else {
-      newSelectedBots = selectedBots.filter((bot) => bot.id !== item.id);
-    }
-    setSelectedBots(newSelectedBots);
-    updateSelectedBots(newSelectedBots);
-  };
-
-  const publishTargetOptions = (item: IBotStatus): IDropdownOption[] => {
-    const options: IDropdownOption[] = [];
-    item.publishTargets &&
-      item.publishTargets.forEach((target, index) => {
-        options.push({
-          key: target.name,
-          text: target.name,
-        });
-      });
-    options.push({
-      key: 'manageProfiles',
-      text: formatMessage('Manage profiles'),
-      data: { style: { color: '#0078D4' } },
-    });
-    return options;
-  };
-  const onRenderOption = (option?: IDropdownOption): JSX.Element | null => {
-    if (!option) return null;
-    return <div style={option.data && option.data.style}>{option.text}</div>;
-  };
-  const onRenderStatus = (item: IBotStatus): JSX.Element | null => {
-    if (!item.status) {
-      return null;
-    } else if (item.status === 200) {
-      return <Icon iconName="Accept" style={{ color: SharedColors.green10, fontWeight: 600 }} />;
-    } else if (item.status === 202) {
-      return (
-        <div style={{ display: 'flex' }}>
-          <Spinner size={SpinnerSize.small} />
-        </div>
-      );
-    } else {
-      return <Icon iconName="Cancel" style={{ color: SharedColors.red10, fontWeight: 600 }} />;
-    }
-  };
-  const handleChangePublishTarget = (item: IBotStatus, option?: IDropdownOption): void => {
-    if (option) {
-      if (option.key === 'manageProfiles') {
-        const url =
-          item.id === projectId
-            ? `/bot/${projectId}/botProjectsSettings/#addNewPublishProfile`
-            : `bot/${projectId}/skill/${item.id}/botProjectsSettings/#addNewPublishProfile`;
-        navigateTo(url);
-        return;
-      }
-      changePublishTarget(option.text, item);
-    }
-  };
-  const changeShowHistoryBots = (item: IBotStatus) => {
-    let newShowHistoryBots: string[];
-    if (showHistoryBots.includes(item.id)) {
-      newShowHistoryBots = showHistoryBots.filter((id) => id !== item.id);
-    } else {
-      newShowHistoryBots = [...showHistoryBots, item.id];
-    }
-    setShowHistoryBots(newShowHistoryBots);
-  };
-  const columns = [
-    {
-      key: 'Bot',
-      name: formatMessage('Bot'),
-      className: 'publishName',
-      fieldName: 'name',
-      minWidth: 114,
-      maxWidth: 134,
-      isRowHeader: true,
-      isResizable: true,
-      onColumnClick: sortByName,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <Checkbox label={item.name} onChange={(_, isChecked) => changeSelected(item, isChecked)} />;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishTarget',
-      name: formatMessage('Publish target'),
-      className: 'publishTarget',
-      fieldName: 'target',
-      minWidth: 114,
-      maxWidth: 134,
-      isRowHeader: true,
-      isResizable: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return (
-          <Dropdown
-            defaultSelectedKey={item.publishTarget}
-            options={publishTargetOptions(item)}
-            placeholder={formatMessage('Select a publish target')}
-            styles={{ root: { width: '134px' } }}
-            onChange={(_, option?: IDropdownOption) => handleChangePublishTarget(item, option)}
-            onRenderOption={onRenderOption}
-          />
-        );
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishDate',
-      name: formatMessage('Date'),
-      className: 'publishDate',
-      fieldName: 'date',
-      minWidth: 114,
-      maxWidth: 134,
-      isRowHeader: true,
-      isResizable: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <span>{item.time ? moment(item.time).format('MM-DD-YYYY') : null}</span>;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishStatus',
-      name: formatMessage('Status'),
-      className: 'publishStatus',
-      fieldName: 'status',
-      minWidth: 114,
-      maxWidth: 134,
-      isRowHeader: true,
-      isResizable: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return onRenderStatus(item);
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishMessage',
-      name: formatMessage('Message'),
-      className: 'publishMessage',
-      fieldName: 'message',
-      minWidth: 150,
-      maxWidth: 300,
-      isRowHeader: true,
-      isResizable: true,
-      isCollapsible: true,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <span>{item.message}</span>;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishComment',
-      name: formatMessage('Comment'),
-      className: 'comment',
-      fieldName: 'comment',
-      minWidth: 150,
-      maxWidth: 300,
-      isRowHeader: true,
-      isCollapsible: true,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <span>{item.comment}</span>;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'ShowPublishHistory',
-      name: '',
-      className: 'showHistory',
-      fieldName: 'showHistory',
-      minWidth: 150,
-      maxWidth: 300,
-      isRowHeader: true,
-      isCollapsible: true,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return (
-          <IconButton
-            iconProps={{ iconName: showHistoryBots.includes(item.id) ? 'ChevronDown' : 'ChevronRight' }}
-            styles={{ root: { float: 'right' } }}
-            onClick={() => changeShowHistoryBots(item)}
-          />
-        );
-      },
-      isPadded: true,
-    },
-  ];
-  const onRenderRow = (props, defaultRender) => {
-    const { item }: { item: IBotStatus } = props;
-    const publishStatusList: IStatus[] = item.publishTarget
-      ? botPublishHistoryList.find((list) => list.projectId === item.id)?.publishHistory[item.publishTarget] || []
-      : [];
-    const target = item.publishTargets?.find((target) => target.name === item.publishTarget);
-    const publishType = botPublishTypesList
-      .find((type) => type.projectId === item.id)
-      ?.publishTypes?.filter((t) => t.name === target?.type)[0];
-    const isRollbackSupported = !!target && !!publishType?.features?.rollback;
-    const handleRollbackClick = (selectedVersion) => {
-      onRollbackClick(selectedVersion, item);
-    };
-    const hanldeUpdatePublishHistory = (publishHistories) => {
-      updatePublishHistory(publishHistories, item);
-    };
-    return (
-      <Fragment>
-        {defaultRender(props)}
-        <div css={{ display: showHistoryBots.includes(item.id) ? 'block' : 'none' }}>
-          <div css={{ fontSize: '14px', lineHeight: '20px', color: '#323130', fontWeight: 'bold' }}>
-            Publish history
-          </div>
-          {publishStatusList.length === 0 ? (
-            <div style={{ fontSize: FontSizes.small, margin: '20px 0 0 50px' }}>No publish history</div>
-          ) : (
-            <PublishStatusList
-              isRollbackSupported={isRollbackSupported}
-              items={publishStatusList}
-              updateItems={hanldeUpdatePublishHistory}
-              onLogClick={onLogClick}
-              onRollbackClick={handleRollbackClick}
-            />
-          )}
-        </div>
-      </Fragment>
-    );
-  };
-  return (
-    <div css={listRoot} data-testid={'bot-status-list'}>
-      <div css={tableView}>
-        <DetailsList
-          isHeaderVisible
-          checkboxVisibility={CheckboxVisibility.hidden}
-          columns={columns.map((col) => ({
-            ...col,
-            isSorted: col.key === currentSort.key,
-            isSortedDescending: currentSort.descending,
-          }))}
-          css={detailList}
-          items={items}
-          styles={{ root: { selectors: { '.ms-DetailsRow-fields': { display: 'flex', alignItems: 'center' } } } }}
-          onColumnHeaderClick={(_, clickedCol) => {
-            if (!clickedCol) return;
-            if (clickedCol.key === currentSort.key) {
-              clickedCol.isSortedDescending = !currentSort.descending;
-              setSort({ key: clickedCol.key, descending: !currentSort.descending });
-            } else {
-              clickedCol.isSorted = false;
-            }
-          }}
-          onRenderRow={onRenderRow}
-        />
-      </div>
-    </div>
-  );
-};
diff --git a/Composer/packages/client/src/pages/publish/Notifications.tsx b/Composer/packages/client/src/pages/publish/Notifications.tsx
deleted file mode 100644
index b3afc2236..000000000
--- a/Composer/packages/client/src/pages/publish/Notifications.tsx
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-/** @jsx jsx */
-import { jsx, css } from '@emotion/core';
-import formatMessage from 'format-message';
-import { ProgressIndicator } from 'office-ui-fabric-react/lib/ProgressIndicator';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-
-import { CardProps } from '../../components/Notifications/NotificationCard';
-
-import { IBotStatus } from './BotStatusList';
-
-const cardContent = css`
-  display: flex;
-  padding: 0 16px 16px 12px;
-  min-height: 64px;
-  align-items: center;
-`;
-
-const cardDetail = css`
-  margin-left: 8px;
-  flex-grow: 1;
-`;
-
-const infoType = css`
-  margin-top: 4px;
-  color: #0078d4;
-`;
-
-const cardDescription = css`
-  text-size-adjust: none;
-  font-size: 12px;
-  line-height: 16px;
-  margin-right: 16px;
-  word-break: break-word;
-`;
-
-export const getPublishedNotificationCardProps = (item: IBotStatus): CardProps => {
-  const statusIconStyle = css({
-    margin: '12px 0 0 -1px',
-    width: '12px',
-    height: '12px',
-    fontSize: '12px',
-    color: item.status === 200 ? '#27AE60' : 'rgb(161, 159, 157)',
-    transform: item.status !== 200 ? 'rotate(45deg)' : '',
-  });
-  return {
-    title: '',
-    description:
-      item.status === 200
-        ? formatMessage(`You have successfully published {name} to {publishTarget}`, {
-            name: item.name,
-            publishTarget: item.publishTarget,
-          })
-        : formatMessage(`Publishing {name} to {publishTarget} failed.`, {
-            name: item.name,
-            publishTarget: item.publishTarget,
-          }),
-    type: 'pending',
-    onRenderCardContent: (props) => (
-      <div css={cardContent}>
-        <Icon css={infoType} iconName="CloudUpload" />
-        <Icon css={statusIconStyle} iconName={item.status === 200 ? 'SkypeCircleCheck' : 'CircleAdditionSolid'} />
-        <div css={cardDetail}>
-          <div css={cardDescription}>{props.description}</div>
-        </div>
-      </div>
-    ),
-  };
-};
-export const getPendingNotificationCardProps = (items: IBotStatus[]): CardProps => {
-  return {
-    title: '',
-    description: formatMessage(`Publishing {count} bots`, { count: items.length }),
-    type: 'pending',
-    onRenderCardContent: (props) => (
-      <div css={cardContent}>
-        <Icon css={infoType} iconName="CloudUpload" />
-        <div css={cardDetail}>
-          <ProgressIndicator label={props.description} />
-        </div>
-      </div>
-    ),
-  };
-};
diff --git a/Composer/packages/client/src/pages/publish/Publish.tsx b/Composer/packages/client/src/pages/publish/Publish.tsx
index a4d82301d..4de6b20fc 100644
--- a/Composer/packages/client/src/pages/publish/Publish.tsx
+++ b/Composer/packages/client/src/pages/publish/Publish.tsx
@@ -3,136 +3,127 @@
 
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
-import { useState, useEffect, useMemo, Fragment } from 'react';
+import { useState, useEffect, Fragment, useCallback, useMemo } from 'react';
 import { RouteComponentProps } from '@reach/router';
 import formatMessage from 'format-message';
-import { Dialog } from 'office-ui-fabric-react/lib/Dialog';
+import { Dialog, DialogType } from 'office-ui-fabric-react/lib/Dialog';
 import { TextField } from 'office-ui-fabric-react/lib/TextField';
+import { PublishTarget } from '@bfc/shared';
 import { useRecoilValue } from 'recoil';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import { DialogSetting, PublishTarget } from '@bfc/shared';
-
-import { dispatcherState, localBotsDataSelector } from '../../recoilModel';
-import { Toolbar, IToolbarItem } from '../../components/Toolbar';
-import { createNotification } from '../../recoilModel/dispatchers/notification';
-import { Notification, PublishType } from '../../recoilModel/types';
-import { getSensitiveProperties } from '../../recoilModel/dispatchers/utils/project';
-
-import { PublishDialog } from './PublishDialog';
-import { ContentHeaderStyle, HeaderText, ContentStyle, contentEditor } from './styles';
-import { IStatus } from './PublishStatusList';
-import { BotStatusList, IBotStatus } from './BotStatusList';
-import { getPendingNotificationCardProps, getPublishedNotificationCardProps } from './Notifications';
+import { Toolbar, IToolbarItem } from '@bfc/ui-shared';
+
+import { LeftRightSplit } from '../../components/Split/LeftRightSplit';
+import settingsStorage from '../../utils/dialogSettingStorage';
+import { projectContainer } from '../design/styles';
+import {
+  dispatcherState,
+  settingsState,
+  botDisplayNameState,
+  publishTypesState,
+  publishHistoryState,
+} from '../../recoilModel';
+import { navigateTo } from '../../utils/navigation';
+import { OpenConfirmModal } from '../../components/Modal/ConfirmDialog';
+
+import { TargetList } from './targetList';
+import { PublishDialog } from './publishDialog';
+import { ContentHeaderStyle, HeaderText, ContentStyle, contentEditor, overflowSet, targetSelected } from './styles';
+import { CreatePublishTarget } from './createPublishTarget';
+import { PublishStatusList, IStatus } from './publishStatusList';
 import { PullDialog } from './pullDialog';
 
-const publishStatusInterval = 10000;
 const Publish: React.FC<RouteComponentProps<{ projectId: string; targetName?: string }>> = (props) => {
+  const selectedTargetName = props.targetName;
   const { projectId = '' } = props;
-  const botProjectData = useRecoilValue(localBotsDataSelector);
+  const [selectedTarget, setSelectedTarget] = useState<PublishTarget | undefined>();
+  const settings = useRecoilValue(settingsState(projectId));
+  const botName = useRecoilValue(botDisplayNameState(projectId));
+  const publishTypes = useRecoilValue(publishTypesState(projectId));
+  const publishHistory = useRecoilValue(publishHistoryState(projectId));
+
   const {
-    getPublishHistory,
     getPublishStatus,
     getPublishTargetTypes,
+    getPublishHistory,
     setPublishTargets,
     publishToTarget,
     setQnASettings,
     rollbackToVersion: rollbackToVersionDispatcher,
-    addNotification,
-    deleteNotification,
+    setCurrentPageMode,
   } = useRecoilValue(dispatcherState);
 
-  const [selectedBots, setSelectedBots] = useState<IBotStatus[]>([]);
-
-  const [showNotifications, setShowNotifications] = useState<Record<string, boolean>>({});
-  // fill Settings, status, publishType, publish target for bot from botProjectMeta
-  const botSettingList: { projectId: string; setting: DialogSetting }[] = [];
-  const statusList: IBotStatus[] = [];
-  const botPublishTypesList: { projectId: string; publishTypes: PublishType[] }[] = [];
-  const publishHistoryList: { projectId: string; publishHistory: { [key: string]: IStatus[] } }[] = [];
-  const publishTargetsList: { projectId: string; publishTargets: PublishTarget[] }[] = [];
-  const [hasGetPublishHistory, setHasGetPublishHistory] = useState<boolean>(false);
-  botProjectData.forEach((bot) => {
-    const botProjectId = bot.projectId;
-    botSettingList.push({
-      projectId: botProjectId,
-      setting: bot.setting,
-    });
-    botPublishTypesList.push({
-      projectId: botProjectId,
-      publishTypes: bot.publishTypes,
-    });
-    const publishHistory = bot.publishHistory;
-    publishHistoryList.push({
-      projectId: botProjectId,
-      publishHistory,
-    });
-    const publishTargets = bot.setting ? bot.setting.publishTargets || [] : [];
-    publishTargetsList.push({
-      projectId: botProjectId,
-      publishTargets,
-    });
-    const botStatus: IBotStatus = {
-      id: botProjectId,
-      name: bot.name,
-      publishTargets: [],
-    };
-    if (publishTargets.length > 0) {
-      botStatus.publishTarget = publishTargets[0].name as string;
-      botStatus.publishTargets = publishTargets;
-      if (publishHistory[botStatus.publishTarget] && publishHistory[botStatus.publishTarget].length > 0) {
-        const history = publishHistory[botStatus.publishTarget][0];
-        botStatus.time = history.time;
-        botStatus.comment = history.comment;
-        botStatus.message = history.message;
-        botStatus.status = history.status;
-      }
-    }
-    statusList.push(botStatus);
-  });
+  const [addDialogHidden, setAddDialogHidden] = useState(true);
+  const [editDialogHidden, setEditDialogHidden] = useState(true);
 
-  const [botStatusList, setBotStatusList] = useState<IBotStatus[]>(statusList);
-  const [botPublishHistoryList, setBotPublishHistoryList] = useState<
-    { projectId: string; publishHistory: { [key: string]: IStatus[] } }[]
-  >(publishHistoryList);
   const [showLog, setShowLog] = useState(false);
   const [publishDialogHidden, setPublishDialogHidden] = useState(true);
   const [pullDialogHidden, setPullDialogHidden] = useState(true);
 
   // items to show in the list
+  const [thisPublishHistory, setThisPublishHistory] = useState<IStatus[]>([]);
+  const [groups, setGroups] = useState<any[]>([]);
   const [selectedVersion, setSelectedVersion] = useState<IStatus | null>(null);
+  const [dialogProps, setDialogProps] = useState({
+    title: formatMessage('Title'),
+    type: DialogType.normal,
+    children: {},
+  });
+  const [editDialogProps, setEditDialogProps] = useState({
+    title: formatMessage('Title'),
+    type: DialogType.normal,
+    children: {},
+  });
+  const [editTarget, setEditTarget] = useState<{ index: number; item: PublishTarget } | null>(null);
+
+  const isRollbackSupported = useMemo(
+    () => (target, version): boolean => {
+      if (version.id && version.status === 200 && target) {
+        const type = publishTypes?.filter((t) => t.name === target.type)[0];
+        if (type?.features?.rollback) {
+          return true;
+        }
+      }
+      return false;
+    },
+    [projectId, publishTypes]
+  );
 
   const isPullSupported = useMemo(() => {
-    return !!selectedBots.find((bot) => {
-      const publishTypes = botPublishTypesList.find((types) => types.projectId === bot.id)?.publishTypes;
-      const type = publishTypes?.find(
-        (t) => t.name === bot.publishTargets?.find((target) => target.name === bot.publishTarget)?.type
-      );
+    if (selectedTarget) {
+      const type = publishTypes?.find((t) => t.name === selectedTarget.type);
       if (type?.features?.pull) {
         return true;
       }
-      return false;
-    });
-  }, [selectedBots]);
+    }
+    return false;
+  }, [projectId, publishTypes, selectedTarget]);
 
   const toolbarItems: IToolbarItem[] = [
     {
-      type: 'element',
+      type: 'action',
+      text: formatMessage('Add new profile'),
+      buttonProps: {
+        iconProps: {
+          iconName: 'Add',
+        },
+        onClick: () => setAddDialogHidden(false),
+      },
       align: 'left',
-      element: (
-        <ActionButton
-          data-testid="publishPage-Toolbar-Publish"
-          disabled={selectedBots.length === 0}
-          onClick={() => setPublishDialogHidden(false)}
-        >
-          <svg fill="none" height="15" viewBox="0 0 16 15" width="16" xmlns="http://www.w3.org/2000/svg">
-            <path
-              d="M16 4.28906V15H5V0H11.7109L16 4.28906ZM12 4H14.2891L12 1.71094V4ZM15 14V5H11V1H6V14H15ZM0 5H4V6H0V5ZM1 7H4V8H1V7ZM2 9H4V10H2V9Z"
-              fill={selectedBots.length > 0 ? '#0078D4' : 'rgb(161, 159, 157)'}
-            />
-          </svg>
-          <span css={{ marginLeft: '8px' }}>{formatMessage('Publish selected bots')}</span>
-        </ActionButton>
-      ),
+      dataTestid: 'publishPage-Toolbar-Add',
+      disabled: false,
+    },
+    {
+      type: 'action',
+      text: formatMessage('Publish to selected profile'),
+      buttonProps: {
+        iconProps: {
+          iconName: 'CloudUpload',
+        },
+        onClick: () => setPublishDialogHidden(false),
+      },
+      align: 'left',
+      dataTestid: 'publishPage-Toolbar-Publish',
+      disabled: selectedTargetName !== 'all' ? false : true,
     },
     {
       type: 'action',
@@ -147,60 +138,59 @@ const Publish: React.FC<RouteComponentProps<{ projectId: string; targetName?: st
       dataTestid: 'publishPage-Toolbar-Pull',
       disabled: !isPullSupported,
     },
+    {
+      type: 'action',
+      text: formatMessage('See Log'),
+      buttonProps: {
+        iconProps: {
+          iconName: 'ClipboardList',
+        },
+        onClick: () => setShowLog(true),
+      },
+      align: 'left',
+      disabled: selectedVersion ? false : true,
+      dataTestid: 'publishPage-Toolbar-Log',
+    },
+    {
+      type: 'action',
+      text: formatMessage('Rollback'),
+      buttonProps: {
+        iconProps: {
+          iconName: 'ClipboardList',
+        },
+        onClick: () => rollbackToVersion(selectedVersion),
+      },
+      align: 'left',
+      disabled: selectedTarget && selectedVersion ? !isRollbackSupported(selectedTarget, selectedVersion) : true,
+      dataTestid: 'publishPage-Toolbar-Log',
+    },
   ];
-  const getUpdatedStatus = (target, botProjectId) => {
+
+  const onSelectTarget = useCallback(
+    (targetName) => {
+      const url = `/bot/${projectId}/publish/${targetName}`;
+      navigateTo(url);
+    },
+    [projectId]
+  );
+
+  const getUpdatedStatus = (target) => {
     if (target) {
       // TODO: this should use a backoff mechanism to not overload the server with requests
       // OR BETTER YET, use a websocket events system to receive updates... (SOON!)
       setTimeout(async () => {
-        getPublishStatus(botProjectId, target);
-      }, publishStatusInterval);
+        getPublishStatus(projectId, target);
+      }, 10000);
     }
   };
 
-  const [pendingNotification, setPendingNotification] = useState<Notification>();
-  // check history to see if a 202 is found
   useEffect(() => {
-    // most recent item is a 202, which means we should poll for updates...
-    selectedBots.forEach((bot) => {
-      if (bot.publishTarget && bot.publishTargets) {
-        const selectedTarget = bot.publishTargets.find((target) => target.name === bot.publishTarget);
-        const botProjectId = bot.id;
-        if (selectedTarget) {
-          const botPublishHistory = botPublishHistoryList.find(
-            (publishHistory) => publishHistory.projectId === botProjectId
-          )?.publishHistory[bot.publishTarget];
-          if (botPublishHistory && botPublishHistory.length > 0) {
-            if (botPublishHistory[0].status === 202) {
-              getUpdatedStatus(selectedTarget, botProjectId);
-            } else if (botPublishHistory[0].status === 200 || botPublishHistory[0].status === 500) {
-              bot.status = botPublishHistory[0].status;
-              if (showNotifications[bot.id]) {
-                pendingNotification && deleteNotification(pendingNotification.id);
-                addNotification(createNotification(getPublishedNotificationCardProps(bot)));
-                setShowNotifications({ ...showNotifications, [botProjectId]: false });
-              }
-            } else if (selectedTarget && selectedTarget.lastPublished && botPublishHistory.length === 0) {
-              // if the history is EMPTY, but we think we've done a publish based on lastPublished timestamp,
-              // we still poll for the results IF we see that a publish has happened previously
-              getPublishStatus(botProjectId, selectedTarget);
-            }
-            setBotStatusList(
-              botStatusList.map((item) => {
-                if (item.id === botProjectId) {
-                  item.status = botPublishHistory[0].status;
-                  item.comment = botPublishHistory[0].comment;
-                  item.message = botPublishHistory[0].message;
-                  item.time = botPublishHistory[0].time;
-                }
-                return item;
-              })
-            );
-          }
-        }
-      }
-    });
-  }, [botPublishHistoryList, selectedBots]);
+    // if url was wrong, redirect to all profiles page
+    const activeDialog = settings.publishTargets?.find(({ name }) => name === selectedTargetName);
+    if (!activeDialog && selectedTargetName !== 'all') {
+      navigateTo(`/bot/${projectId}/publish/all`);
+    }
+  }, [selectedTargetName, projectId, settings.publishTargets]);
 
   useEffect(() => {
     if (projectId) {
@@ -211,186 +201,290 @@ const Publish: React.FC<RouteComponentProps<{ projectId: string; targetName?: st
   }, [projectId]);
 
   useEffect(() => {
-    // init publishHistoryList
-    if (Object.keys(publishHistoryList).length > 0) {
-      setBotPublishHistoryList(publishHistoryList);
+    if (settings.publishTargets && settings.publishTargets.length > 0) {
+      const selected = settings.publishTargets.find((item) => item.name === selectedTargetName);
+      setSelectedTarget(selected);
+      // load publish histories
+      if (selectedTargetName === 'all') {
+        for (const target of settings.publishTargets) {
+          getPublishHistory(projectId, target);
+        }
+      } else if (selected) {
+        getPublishHistory(projectId, selected);
+      }
     }
-    // get the latest publishHistory when publish bots.
-    if (!hasGetPublishHistory) {
-      publishTargetsList.forEach((botTargets) => {
-        botTargets.publishTargets.forEach((target) => {
-          getPublishHistory(botTargets.projectId, target);
-        });
-      });
-      setHasGetPublishHistory(true);
+  }, [projectId, selectedTargetName]);
+
+  // once history is loaded, display it
+  useEffect(() => {
+    if (settings.publishTargets && selectedTargetName === 'all') {
+      let histories: any[] = [];
+      const groups: any[] = [];
+      let startIndex = 0;
+      for (const target of settings.publishTargets) {
+        if (publishHistory[target.name]) {
+          histories = histories.concat(publishHistory[target.name]);
+          groups.push({
+            key: target.name,
+            name: target.name,
+            startIndex: startIndex,
+            count: publishHistory[target.name].length,
+            level: 0,
+          });
+          startIndex += publishHistory[target.name].length;
+        }
+      }
+      setGroups(groups);
+      setThisPublishHistory(histories);
+    } else if (selectedTargetName && publishHistory[selectedTargetName]) {
+      setThisPublishHistory(publishHistory[selectedTargetName]);
+      setGroups([
+        {
+          key: selectedTargetName,
+          name: selectedTargetName,
+          startIndex: 0,
+          count: publishHistory[selectedTargetName].length,
+          level: 0,
+        },
+      ]);
     }
-  }, [botProjectData]);
+  }, [publishHistory, selectedTargetName, settings.publishTargets]);
+
+  // check history to see if a 202 is found
   useEffect(() => {
-    // init bot status list for the botProjectData is empty array when first mounted
-    setBotStatusList(statusList);
-  }, [botProjectData.length]);
-
-  const rollbackToVersion = (version: IStatus, item: IBotStatus) => {
-    const setting = botSettingList.find((botSetting) => botSetting.projectId === item.id)?.setting;
-    const selectedTarget = item.publishTargets?.find((target) => target.name === item.publishTarget);
-    if (setting) {
-      const sensitiveSettings = getSensitiveProperties(setting);
-      rollbackToVersionDispatcher(item.id, selectedTarget, version.id, sensitiveSettings);
+    // most recent item is a 202, which means we should poll for updates...
+    if (selectedTargetName !== 'all' && thisPublishHistory.length && thisPublishHistory[0].status === 202) {
+      getUpdatedStatus(selectedTarget);
+    } else if (selectedTarget && selectedTarget.lastPublished && thisPublishHistory.length === 0) {
+      // if the history is EMPTY, but we think we've done a publish based on lastPublished timestamp,
+      // we still poll for the results IF we see that a publish has happened previously
+      getPublishStatus(projectId, selectedTarget);
     }
-  };
+  }, [thisPublishHistory, selectedTargetName]);
 
-  const onRollbackToVersion = (selectedVersion: IStatus, item: IBotStatus) => {
-    item.publishTarget && item.publishTargets && rollbackToVersion(selectedVersion, item);
-  };
-  const onShowLog = (selectedVersion) => {
-    setSelectedVersion(selectedVersion);
-    setShowLog(true);
-  };
-  const updateBotStatusList = (statusList: IBotStatus[]) => {
-    setBotStatusList(statusList);
-  };
-  const updatePublishHistory = (publishHistories: IStatus[], botStatus: IBotStatus) => {
-    const newPublishHistory = botPublishHistoryList.map((botPublishHistory) => {
-      if (botPublishHistory.projectId === botStatus.id && botStatus.publishTarget) {
-        botPublishHistory.publishHistory = {
-          ...botPublishHistory.publishHistory,
-          [botStatus.publishTarget]: publishHistories,
-        };
+  const savePublishTarget = useCallback(
+    async (name: string, type: string, configuration: string) => {
+      const targets = (settings.publishTargets || []).concat([
+        {
+          name,
+          type,
+          configuration,
+        },
+      ]);
+      await setPublishTargets(targets, projectId);
+      onSelectTarget(name);
+    },
+    [settings.publishTargets, projectId, botName]
+  );
+
+  const updatePublishTarget = useCallback(
+    async (name: string, type: string, configuration: string) => {
+      if (!editTarget) {
+        return;
       }
-      return botPublishHistory;
+
+      const targets = settings.publishTargets ? [...settings.publishTargets] : [];
+
+      targets[editTarget.index] = {
+        name,
+        type,
+        configuration,
+      };
+
+      await setPublishTargets(targets, projectId);
+
+      onSelectTarget(name);
+    },
+    [settings.publishTargets, projectId, botName, editTarget]
+  );
+
+  useEffect(() => {
+    setDialogProps({
+      title: formatMessage('Add a publish profile'),
+      type: DialogType.normal,
+      children: (
+        <CreatePublishTarget
+          closeDialog={() => setAddDialogHidden(true)}
+          current={null}
+          targets={settings.publishTargets || []}
+          types={publishTypes}
+          updateSettings={savePublishTarget}
+        />
+      ),
     });
-    setBotPublishHistoryList(newPublishHistory);
-  };
-  const updateSelectedBots = (selectedBots) => {
-    const bots: IBotStatus[] = [];
-    selectedBots.forEach((bot) => {
-      bots.push({
-        id: bot.id,
-        name: bot.name,
-        publishTarget: bot.publishTarget,
-        publishTargets: bot.publishTargets,
-      });
+  }, [publishTypes, savePublishTarget, settings.publishTargets]);
+
+  useEffect(() => {
+    setEditDialogProps({
+      title: formatMessage('Edit a publish profile'),
+      type: DialogType.normal,
+      children: (
+        <CreatePublishTarget
+          closeDialog={() => setEditDialogHidden(true)}
+          current={editTarget ? editTarget.item : null}
+          targets={(settings.publishTargets || []).filter((item) => editTarget && item.name != editTarget.item.name)}
+          types={publishTypes}
+          updateSettings={updatePublishTarget}
+        />
+      ),
     });
-    setSelectedBots(bots);
-  };
-  const publish = async (items: IBotStatus[]) => {
-    // notifications
-    setShowNotifications(
-      items.reduce((accumulator, item) => {
-        accumulator[item.id] = true;
-        return accumulator;
-      }, {})
-    );
-    const notification = createNotification(getPendingNotificationCardProps(items));
-    setPendingNotification(notification);
-    addNotification(notification);
-
-    // publish to remote
-    for (const bot of items) {
-      if (bot.publishTarget && bot.publishTargets) {
-        const selectedTarget = bot.publishTargets.find((target) => target.name === bot.publishTarget);
-        const botProjectId = bot.id;
-        const setting = botSettingList.find((botsetting) => botsetting.projectId === bot.id)?.setting;
-        if (setting && setting.publishTargets) {
-          setting.qna.subscriptionKey && (await setQnASettings(botProjectId, setting.qna.subscriptionKey));
-          const sensitiveSettings = getSensitiveProperties(setting);
-          await publishToTarget(botProjectId, selectedTarget, { comment: bot.comment }, sensitiveSettings);
-
-          // update the target with a lastPublished date
-          const updatedPublishTargets = setting.publishTargets.map((profile) => {
-            if (profile.name === selectedTarget?.name) {
-              return {
-                ...profile,
-                lastPublished: new Date(),
-              };
-            } else {
-              return profile;
-            }
-          });
+  }, [editTarget, publishTypes, updatePublishTarget]);
+
+  const rollbackToVersion = useMemo(
+    () => async (version) => {
+      const sensitiveSettings = settingsStorage.get(projectId);
+      await rollbackToVersionDispatcher(projectId, selectedTarget, version.id, sensitiveSettings);
+    },
+    [projectId, selectedTarget]
+  );
 
-          await setPublishTargets(updatedPublishTargets, botProjectId);
+  const publish = useMemo(
+    () => async (comment) => {
+      // publish to remote
+      if (selectedTarget && settings.publishTargets) {
+        if (settings.qna && Object(settings.qna).subscriptionKey) {
+          await setQnASettings(projectId, Object(settings.qna).subscriptionKey);
         }
-      }
-      setBotStatusList(
-        botStatusList.map((bot) => {
-          const item = items.find((i) => i.id === bot.id);
-          if (item) {
-            item.status = 202;
-            return item;
+        const sensitiveSettings = settingsStorage.get(projectId);
+        await publishToTarget(projectId, selectedTarget, { comment: comment }, sensitiveSettings);
+
+        // update the target with a lastPublished date
+        const updatedPublishTargets = settings.publishTargets.map((profile) => {
+          if (profile.name === selectedTarget.name) {
+            return {
+              ...profile,
+              lastPublished: new Date(),
+            };
+          } else {
+            return profile;
           }
-          return bot;
-        })
-      );
-    }
+        });
+
+        await setPublishTargets(updatedPublishTargets, projectId);
+      }
+    },
+    [projectId, selectedTarget, settings.publishTargets]
+  );
+
+  const onEdit = async (index: number, item: PublishTarget) => {
+    const newItem = { item: item, index: index };
+    setEditTarget(newItem);
+    setEditDialogHidden(false);
   };
-  const changePublishTarget = (publishTarget, currentBotStatus) => {
-    const newBotStatusItems = botStatusList.map((botStatus) => {
-      if (currentBotStatus.id === botStatus.id) {
-        botStatus.publishTarget = publishTarget;
-        const botPublishHistory = botPublishHistoryList.find(
-          (publishHistory) => publishHistory.projectId === botStatus.id
-        )?.publishHistory[publishTarget];
-        if (botPublishHistory && botPublishHistory.length > 0) {
-          botStatus.status = botPublishHistory[0].status;
-          botStatus.comment = botPublishHistory[0].comment;
-          botStatus.message = botPublishHistory[0].message;
-          botStatus.time = botPublishHistory[0].time;
-        } else {
-          botStatus = { ...botStatus, status: undefined, comment: '', message: '', time: '' };
+
+  const onDelete = useMemo(
+    () => async (index: number) => {
+      const result = await OpenConfirmModal(
+        formatMessage('This will delete the profile. Do you wish to continue?'),
+        null,
+        {
+          confirmBtnText: formatMessage('Yes'),
+          cancelBtnText: formatMessage('Cancel'),
         }
-      }
-      return botStatus;
-    });
-    setBotStatusList(newBotStatusItems);
-    setSelectedBots(
-      selectedBots.map((selectedBot) => {
-        const bot = newBotStatusItems.find((botStatus) => botStatus.id === selectedBot.id);
-        if (bot) {
-          selectedBot = { ...bot, comment: '', message: '', status: undefined, time: '' };
+      );
+
+      if (result) {
+        if (settings.publishTargets && settings.publishTargets.length > index) {
+          const targets = settings.publishTargets.slice(0, index).concat(settings.publishTargets.slice(index + 1));
+          await setPublishTargets(targets, projectId);
+          // redirect to all profiles
+          setSelectedTarget(undefined);
+          onSelectTarget('all');
         }
-        return selectedBot;
-      })
-    );
-  };
+      }
+    },
+    [settings.publishTargets, projectId, botName]
+  );
+
+  useEffect(() => {
+    setCurrentPageMode('notifications');
+  }, []);
 
   return (
     <Fragment>
+      <Dialog
+        dialogContentProps={dialogProps}
+        hidden={addDialogHidden}
+        minWidth={450}
+        modalProps={{ isBlocking: true }}
+        onDismiss={() => setAddDialogHidden(true)}
+      >
+        {dialogProps.children}
+      </Dialog>
+      <Dialog
+        dialogContentProps={editDialogProps}
+        hidden={editDialogHidden}
+        minWidth={450}
+        modalProps={{ isBlocking: true }}
+        onDismiss={() => setEditDialogHidden(true)}
+      >
+        {editDialogProps.children}
+      </Dialog>
       {!publishDialogHidden && (
-        <PublishDialog items={selectedBots} onDismiss={() => setPublishDialogHidden(true)} onSubmit={publish} />
+        <PublishDialog
+          projectId={projectId}
+          target={selectedTarget}
+          onDismiss={() => setPublishDialogHidden(true)}
+          onSubmit={publish}
+        />
+      )}
+      {!pullDialogHidden && (
+        <PullDialog projectId={projectId} selectedTarget={selectedTarget} onDismiss={() => setPullDialogHidden(true)} />
       )}
-      {!pullDialogHidden &&
-        selectedBots.map((bot, index) => {
-          const selectedTarget = bot.publishTargets?.find((target) => target.name === bot.publishTarget);
-          const botProjectId = bot.id;
-          return (
-            <PullDialog
-              key={index}
-              projectId={botProjectId}
-              selectedTarget={selectedTarget}
-              onDismiss={() => setPullDialogHidden(true)}
-            />
-          );
-        })}
       {showLog && <LogDialog version={selectedVersion} onDismiss={() => setShowLog(false)} />}
       <Toolbar toolbarItems={toolbarItems} />
       <div css={ContentHeaderStyle}>
-        <h1 css={HeaderText}>{formatMessage('Publish your bots')}</h1>
+        <h1 css={HeaderText}>{selectedTarget ? selectedTargetName : formatMessage('Publish Profiles')}</h1>
       </div>
       <div css={ContentStyle} data-testid="Publish" role="main">
-        <div aria-label={formatMessage('List view')} css={contentEditor} role="region">
-          <BotStatusList
-            botPublishHistoryList={botPublishHistoryList}
-            botPublishTypesList={botPublishTypesList}
-            changePublishTarget={changePublishTarget}
-            items={botStatusList}
-            projectId={projectId}
-            updateItems={updateBotStatusList}
-            updatePublishHistory={updatePublishHistory}
-            updateSelectedBots={updateSelectedBots}
-            onLogClick={onShowLog}
-            onRollbackClick={onRollbackToVersion}
-          />
-        </div>
+        <LeftRightSplit initialLeftGridWidth="20%" minLeftPixels={200} minRightPixels={800}>
+          <div
+            aria-label={formatMessage('Navigation panel')}
+            css={projectContainer}
+            data-testid="target-list"
+            role="region"
+          >
+            <div
+              key={'_all'}
+              css={selectedTargetName === 'all' ? targetSelected : overflowSet}
+              style={{
+                height: '36px',
+                cursor: 'pointer',
+              }}
+              onClick={() => {
+                setSelectedTarget(undefined);
+                onSelectTarget('all');
+              }}
+            >
+              {formatMessage('All profiles')}
+            </div>
+            {settings && settings.publishTargets && (
+              <TargetList
+                list={settings.publishTargets}
+                selectedTarget={selectedTargetName}
+                onDelete={async (index) => await onDelete(index)}
+                onEdit={async (item, target) => await onEdit(item, target)}
+                onSelect={(item) => {
+                  setSelectedTarget(item);
+                  onSelectTarget(item.name);
+                }}
+              />
+            )}
+          </div>
+          <div aria-label={formatMessage('List view')} css={contentEditor} role="region">
+            <Fragment>
+              <PublishStatusList
+                groups={groups}
+                items={thisPublishHistory}
+                updateItems={setThisPublishHistory}
+                onItemClick={setSelectedVersion}
+              />
+              {!thisPublishHistory || thisPublishHistory.length === 0 ? (
+                <div style={{ marginLeft: '50px', fontSize: 'smaller', marginTop: '20px' }}>No publish history</div>
+              ) : null}
+            </Fragment>
+          </div>
+        </LeftRightSplit>
       </div>
     </Fragment>
   );
diff --git a/Composer/packages/client/src/pages/publish/PublishDialog.tsx b/Composer/packages/client/src/pages/publish/PublishDialog.tsx
deleted file mode 100644
index db95273c2..000000000
--- a/Composer/packages/client/src/pages/publish/PublishDialog.tsx
+++ /dev/null
@@ -1,124 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-/** @jsx jsx */
-import { jsx } from '@emotion/core';
-import { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';
-import { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button';
-import { Fragment, useState } from 'react';
-import { TextField } from 'office-ui-fabric-react/lib/TextField';
-import formatMessage from 'format-message';
-import { CheckboxVisibility, DetailsList } from 'office-ui-fabric-react/lib/DetailsList';
-
-import { IBotStatus } from './BotStatusList';
-
-export const PublishDialog = (props) => {
-  const { items } = props;
-  const [showItems, setShowItems] = useState<IBotStatus[]>(items);
-  const columns = [
-    {
-      key: 'name',
-      name: formatMessage('Bot'),
-      className: 'botName',
-      fieldName: 'name',
-      minWidth: 70,
-      maxWidth: 90,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <span>{item.name}</span>;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'publishTarget',
-      name: formatMessage('Publish target'),
-      className: 'publishtarget',
-      fieldName: 'publishTarget',
-      minWidth: 70,
-      maxWidth: 90,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        return <span>{item.publishTarget}</span>;
-      },
-      isPadded: true,
-    },
-    {
-      key: 'comment',
-      name: formatMessage('Comments'),
-      className: 'comment',
-      fieldName: 'comment',
-      minWidth: 70,
-      maxWidth: 90,
-      data: 'string',
-      onRender: (item: IBotStatus) => {
-        // message for each publish bot
-        return (
-          <TextField
-            placeholder={formatMessage('Write your message')}
-            value={item.comment}
-            onChange={(e, newValue) => {
-              const newItems = showItems.map((obj) => {
-                if (obj.id === item.id) {
-                  obj.comment = newValue;
-                }
-                return obj;
-              });
-              setShowItems(newItems);
-            }}
-          />
-        );
-      },
-      isPadded: true,
-    },
-  ];
-  const publishDialogProps = {
-    title: formatMessage('Publish'),
-    type: DialogType.normal,
-    subText: formatMessage('You are about to publish your bot to the profile below. Do you want to proceed?'),
-  };
-  const cleanComments = () => {
-    const cleanedItems = showItems.map((item) => {
-      item.comment = '';
-      return item;
-    });
-    setShowItems(cleanedItems);
-  };
-  const submit = async () => {
-    props.onDismiss();
-    await props.onSubmit(showItems);
-    cleanComments();
-  };
-  return showItems && showItems.length > 0 ? (
-    <Dialog
-      dialogContentProps={publishDialogProps}
-      hidden={false}
-      modalProps={{ isBlocking: true, styles: { main: { maxWidth: '1063px !important' } } }}
-      onDismiss={() => {
-        cleanComments();
-        props.onDismiss();
-      }}
-    >
-      <Fragment>
-        <DetailsList
-          checkboxVisibility={CheckboxVisibility.hidden}
-          columns={columns}
-          items={showItems}
-          styles={{ root: { selectors: { '.ms-DetailsRow-fields': { display: 'flex', alignItems: 'center' } } } }}
-        />
-
-        <DialogFooter>
-          <DefaultButton
-            text={formatMessage('Cancel')}
-            onClick={() => {
-              cleanComments();
-              props.onDismiss();
-            }}
-          />
-          <PrimaryButton text={formatMessage('Okay')} onClick={submit} />
-        </DialogFooter>
-      </Fragment>
-    </Dialog>
-  ) : null;
-};
diff --git a/Composer/packages/client/src/pages/publish/publishDialog.tsx b/Composer/packages/client/src/pages/publish/publishDialog.tsx
new file mode 100644
index 000000000..3a45bab86
--- /dev/null
+++ b/Composer/packages/client/src/pages/publish/publishDialog.tsx
@@ -0,0 +1,50 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';
+import { DefaultButton, PrimaryButton } from 'office-ui-fabric-react/lib/Button';
+import { useState, Fragment } from 'react';
+import { TextField } from 'office-ui-fabric-react/lib/TextField';
+import formatMessage from 'format-message';
+
+import { publishDialogText } from './styles';
+
+export const PublishDialog = (props) => {
+  const [comment, setComment] = useState('');
+  const publishDialogProps = {
+    title: formatMessage('Publish'),
+    type: DialogType.normal,
+    subText: formatMessage('You are about to publish your bot to the profile below. Do you want to proceed?'),
+  };
+  const submit = async () => {
+    props.onDismiss();
+    await props.onSubmit(comment);
+  };
+  return props.target ? (
+    <Dialog
+      dialogContentProps={publishDialogProps}
+      hidden={false}
+      modalProps={{ isBlocking: true }}
+      onDismiss={props.onDismiss}
+    >
+      <Fragment>
+        <div css={publishDialogText}>{props.target.name}</div>
+        <form onSubmit={submit}>
+          <TextField
+            multiline
+            label={formatMessage('Comment')}
+            // styles={styles.textarea}
+            placeholder={formatMessage('Provide a brief description. It will appear on the publish history list.')}
+            onChange={(e, newvalue) => setComment(newvalue || '')}
+          />
+        </form>
+        <DialogFooter>
+          <DefaultButton text={formatMessage('Cancel')} onClick={props.onDismiss} />
+          <PrimaryButton text={formatMessage('Okay')} onClick={submit} />
+        </DialogFooter>
+      </Fragment>
+    </Dialog>
+  ) : null;
+};
diff --git a/Composer/packages/client/src/pages/publish/PublishStatusList.tsx b/Composer/packages/client/src/pages/publish/publishStatusList.tsx
similarity index 68%
rename from Composer/packages/client/src/pages/publish/PublishStatusList.tsx
rename to Composer/packages/client/src/pages/publish/publishStatusList.tsx
index 4c975276d..738c1f38b 100644
--- a/Composer/packages/client/src/pages/publish/PublishStatusList.tsx
+++ b/Composer/packages/client/src/pages/publish/publishStatusList.tsx
@@ -3,25 +3,30 @@
 
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
-import { DetailsList, IColumn, CheckboxVisibility } from 'office-ui-fabric-react/lib/DetailsList';
+import {
+  DetailsList,
+  DetailsListLayoutMode,
+  SelectionMode,
+  IColumn,
+  IGroup,
+  CheckboxVisibility,
+} from 'office-ui-fabric-react/lib/DetailsList';
 import { Sticky, StickyPositionType } from 'office-ui-fabric-react/lib/Sticky';
 import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
+import { Selection } from 'office-ui-fabric-react/lib/DetailsList';
 import { Icon } from 'office-ui-fabric-react/lib/Icon';
 import { Link } from 'office-ui-fabric-react/lib/Link';
 import { Spinner, SpinnerSize } from 'office-ui-fabric-react/lib/Spinner';
 import moment from 'moment';
-import { useState } from 'react';
+import { useMemo, useState, useEffect } from 'react';
 import formatMessage from 'format-message';
-import { ActionButton } from 'office-ui-fabric-react/lib/Button';
-import { SharedColors } from '@uifabric/fluent-theme';
 
 import { listRoot, tableView, detailList } from './styles';
 
 export interface IStatusListProps {
   items: IStatus[];
-  isRollbackSupported: boolean;
-  onLogClick: (item: IStatus) => void;
-  onRollbackClick: (item: IStatus) => void;
+  groups: IGroup[];
+  onItemClick: (item: IStatus | null) => void;
   updateItems: (items: IStatus[]) => void;
 }
 
@@ -49,12 +54,16 @@ function onRenderDetailsHeader(props, defaultRender) {
 }
 
 export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
-  const { items, isRollbackSupported, onLogClick, onRollbackClick } = props;
+  const { items, onItemClick, groups } = props;
+  const [selectIndex, setSelectedIndex] = useState<number>();
   const [currentSort, setSort] = useState({ key: 'PublishDate', descending: true });
   const sortByDate = (ev: React.MouseEvent<HTMLElement>, column: IColumn): void => {
-    if (column.isSorted && items) {
+    if (column.isSorted) {
       column.isSortedDescending = !column.isSortedDescending;
-      const newItems: IStatus[] = items.slice().reverse();
+      let newItems: IStatus[] = [];
+      for (const group of groups) {
+        newItems = newItems.concat(items.slice(group.startIndex, group.startIndex + group.count).reverse());
+      }
       props.updateItems(newItems);
     }
   };
@@ -62,7 +71,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
     {
       key: 'PublishTime',
       name: formatMessage('Time'),
-      className: 'publishTime',
+      className: 'publishtime',
       fieldName: 'time',
       minWidth: 70,
       maxWidth: 90,
@@ -77,7 +86,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
     {
       key: 'PublishDate',
       name: formatMessage('Date'),
-      className: 'publishDate',
+      className: 'publishdate',
       fieldName: 'date',
       minWidth: 70,
       maxWidth: 90,
@@ -93,7 +102,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
     {
       key: 'PublishStatus',
       name: formatMessage('Status'),
-      className: 'publishStatus',
+      className: 'publishstatus',
       fieldName: 'status',
       minWidth: 40,
       maxWidth: 40,
@@ -101,7 +110,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
       data: 'string',
       onRender: (item: IStatus) => {
         if (item.status === 200) {
-          return <Icon iconName="Accept" style={{ color: SharedColors.green10, fontWeight: 600 }} />;
+          return <Icon iconName="Accept" style={{ color: 'green', fontWeight: 600 }} />;
         } else if (item.status === 202) {
           return (
             <div style={{ display: 'flex' }}>
@@ -109,7 +118,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
             </div>
           );
         } else {
-          return <Icon iconName="Cancel" style={{ color: SharedColors.red10, fontWeight: 600 }} />;
+          return <Icon iconName="Cancel" style={{ color: 'red', fontWeight: 600 }} />;
         }
       },
       isPadded: true,
@@ -117,7 +126,7 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
     {
       key: 'PublishMessage',
       name: formatMessage('Message'),
-      className: 'publishMessage',
+      className: 'publishmessage',
       fieldName: 'message',
       minWidth: 150,
       maxWidth: 300,
@@ -161,59 +170,30 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
       },
       isPadded: true,
     },
-    {
-      key: 'PublishLog',
-      name: '',
-      className: 'publishLog',
-      minWidth: 70,
-      maxWidth: 90,
-      isResizable: true,
-      isCollapsible: true,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IStatus) => {
-        return (
-          <ActionButton
-            allowDisabledFocus
-            styles={{ root: { color: '#0078D4' } }}
-            onClick={() => {
-              onLogClick(item);
-            }}
-          >
-            {formatMessage('View log')}
-          </ActionButton>
-        );
-      },
-      isPadded: true,
-    },
-    {
-      key: 'PublishRollback',
-      name: '',
-      className: 'publishRollback',
-      fieldName: 'publishRollback',
-      minWidth: 70,
-      maxWidth: 90,
-      isResizable: true,
-      isCollapsible: true,
-      isMultiline: true,
-      data: 'string',
-      onRender: (item: IStatus) => {
-        return (
-          <ActionButton
-            allowDisabledFocus
-            disabled={!(isRollbackSupported && item.status === 200)}
-            styles={{ root: { color: '#0078D4' } }}
-            onClick={() => {
-              onRollbackClick(item);
-            }}
-          >
-            {formatMessage('Rollback')}
-          </ActionButton>
-        );
-      },
-      isPadded: true,
-    },
   ];
+  const selection = useMemo(() => {
+    return new Selection({
+      onSelectionChanged: () => {
+        const selectedIndexs = selection.getSelectedIndices();
+        if (selectedIndexs.length > 0) {
+          setSelectedIndex(selectedIndexs[0]);
+        }
+      },
+    });
+  }, [items, groups]);
+
+  useEffect(() => {
+    // init the selected publish status after switch to another target
+    setSelectedIndex(undefined);
+  }, [groups]);
+
+  useEffect(() => {
+    if (items && typeof selectIndex === 'number' && items.length > selectIndex) {
+      onItemClick(items[selectIndex]);
+    } else {
+      onItemClick(null);
+    }
+  }, [selectIndex, items]);
 
   return (
     <div css={listRoot} data-testid={'publish-status-list'}>
@@ -227,8 +207,19 @@ export const PublishStatusList: React.FC<IStatusListProps> = (props) => {
             isSortedDescending: currentSort.descending,
           }))}
           css={detailList}
+          getKey={(item) => item.id}
+          groupProps={{
+            showEmptyGroups: true,
+          }}
+          groups={groups}
           items={items}
-          styles={{ root: { selectors: { '.ms-DetailsRow-fields': { display: 'flex', alignItems: 'center' } } } }}
+          layoutMode={DetailsListLayoutMode.justified}
+          selection={selection}
+          selectionMode={SelectionMode.single}
+          setKey="none"
+          onActiveItemChanged={(item, index) => {
+            setSelectedIndex(index);
+          }}
           onColumnHeaderClick={(_, clickedCol) => {
             if (!clickedCol) return;
             if (clickedCol.key === currentSort.key) {
diff --git a/Composer/packages/client/src/pages/publish/styles.ts b/Composer/packages/client/src/pages/publish/styles.ts
index e27210ec6..f7b048fcf 100644
--- a/Composer/packages/client/src/pages/publish/styles.ts
+++ b/Composer/packages/client/src/pages/publish/styles.ts
@@ -35,7 +35,7 @@ export const contentEditor = css`
   flex: 4;
   height: calc(100vh - 200px);
   position: relative;
-  overflow: auto;
+  overflow: visible;
 `;
 
 export const publishDialogText = css`
diff --git a/Composer/packages/client/src/pages/setting/SettingsPage.tsx b/Composer/packages/client/src/pages/setting/SettingsPage.tsx
index bf074f28a..0d19491ea 100644
--- a/Composer/packages/client/src/pages/setting/SettingsPage.tsx
+++ b/Composer/packages/client/src/pages/setting/SettingsPage.tsx
@@ -2,7 +2,7 @@
 // Licensed under the MIT License.
 
 /** @jsx jsx */
-import { jsx, css } from '@emotion/core';
+import { jsx } from '@emotion/core';
 import { useMemo, useEffect } from 'react';
 import formatMessage from 'format-message';
 import { RouteComponentProps } from '@reach/router';
@@ -19,6 +19,7 @@ import {
   settingsState,
   currentProjectIdState,
 } from '../../recoilModel';
+import { TestController } from '../../components/TestController/TestController';
 import { OpenConfirmModal } from '../../components/Modal/ConfirmDialog';
 import { navigateTo } from '../../utils/navigation';
 import { Page } from '../../components/Page';
@@ -29,20 +30,12 @@ import { useProjectIdCache } from '../../utils/hooks';
 
 import { SettingsRoutes } from './router';
 
-const header = css`
-  padding: 5px 20px;
-  display: flex;
-  flex-direction: column;
-  flex-shrink: 0;
-  justify-content: space-between;
-  label: PageHeader;
-`;
-
 const getProjectLink = (path: string, id?: string) => {
   return id ? `/settings/bot/${id}/${path}` : `/settings/${path}`;
 };
 
 const SettingPage: React.FC<RouteComponentProps> = () => {
+  const projectId = useRecoilValue(currentProjectIdState);
   const {
     deleteBot: deleteBotProject,
     addLanguageDialogBegin,
@@ -52,8 +45,8 @@ const SettingPage: React.FC<RouteComponentProps> = () => {
     addLanguages,
     deleteLanguages,
     fetchProjectById,
+    setCurrentPageMode,
   } = useRecoilValue(dispatcherState);
-  const projectId = useRecoilValue(currentProjectIdState);
   const locale = useRecoilValue(localeState(projectId));
   const showDelLanguageModal = useRecoilValue(showDelLanguageModalState(projectId));
   const showAddLanguageModal = useRecoilValue(showAddLanguageModalState(projectId));
@@ -66,6 +59,7 @@ const SettingPage: React.FC<RouteComponentProps> = () => {
   // use cached projectId do fetch.
   const cachedProjectId = useProjectIdCache();
   useEffect(() => {
+    setCurrentPageMode('settings');
     if (!projectId && cachedProjectId) {
       fetchProjectById(cachedProjectId);
     }
@@ -80,7 +74,15 @@ const SettingPage: React.FC<RouteComponentProps> = () => {
   };
 
   const links: INavTreeItem[] = [
+    {
+      id: 'dialog-settings',
+      name: settingLabels.botSettings,
+      url: getProjectLink('dialog-settings', projectId),
+      disabled: !projectId,
+    },
     { id: 'application', name: settingLabels.appSettings, url: getProjectLink('application') },
+    { id: 'runtime', name: settingLabels.runtime, url: getProjectLink('runtime', projectId), disabled: !projectId },
+    { id: 'extensions', name: settingLabels.extensions, url: getProjectLink('extensions') },
     { id: 'about', name: settingLabels.about, url: getProjectLink('about') },
   ];
 
@@ -215,6 +217,12 @@ const SettingPage: React.FC<RouteComponentProps> = () => {
       dataTestid: 'AddLanguageFlyout',
       disabled: false,
     },
+
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
   ];
 
   const title = useMemo(() => {
@@ -226,22 +234,13 @@ const SettingPage: React.FC<RouteComponentProps> = () => {
     return settingLabels.appSettings;
   }, [location.pathname]);
 
-  const onRenderHeaderContent = () => {
-    return formatMessage(
-      'This Page contains detailed information about your bot. For security reasons, they are hidden by default. To test your bot or publish to Azure, you may need to provide these settings'
-    );
-  };
-
   return (
     <Page
-      headerStyle={header}
       mainRegionName={formatMessage('Settings editor')}
       navLinks={links}
       navRegionName={formatMessage('Settings menu')}
-      pageMode={'settings'}
       title={title}
       toolbarItems={toolbarItems}
-      onRenderHeaderContent={onRenderHeaderContent}
     >
       <AddLanguageModal
         defaultLanguage={defaultLanguage}
diff --git a/Composer/packages/client/src/pages/setting/app-settings/AppSettings.tsx b/Composer/packages/client/src/pages/setting/app-settings/AppSettings.tsx
index 4fbc92704..82cbcc7d9 100644
--- a/Composer/packages/client/src/pages/setting/app-settings/AppSettings.tsx
+++ b/Composer/packages/client/src/pages/setting/app-settings/AppSettings.tsx
@@ -97,17 +97,6 @@ const AppSettings: React.FC<RouteComponentProps> = () => {
   return (
     <div css={container}>
       <section css={section}>
-        <section css={section}>
-          <h2>{formatMessage('Application Language settings')}</h2>
-          <SettingDropdown
-            description={formatMessage('This is the language used for Composer’s user interface.')}
-            image={images.language}
-            options={languageOptions}
-            selected={userSettings.appLocale}
-            title={formatMessage('Application language')}
-            onChange={onLocaleChange}
-          />
-        </section>
         <h2>{formatMessage('Onboarding')}</h2>
         <SettingToggle
           checked={!complete}
diff --git a/Composer/packages/client/src/pages/setting/app-settings/SettingDropdown.tsx b/Composer/packages/client/src/pages/setting/app-settings/SettingDropdown.tsx
index 711e3b985..69ad3feff 100644
--- a/Composer/packages/client/src/pages/setting/app-settings/SettingDropdown.tsx
+++ b/Composer/packages/client/src/pages/setting/app-settings/SettingDropdown.tsx
@@ -4,12 +4,10 @@
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
 import React from 'react';
+import { Label } from 'office-ui-fabric-react/lib/Label';
 import { useId } from '@uifabric/react-hooks';
 import kebabCase from 'lodash/kebabCase';
 import { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
-import formatMessage from 'format-message';
 
 import * as styles from './styles';
 
@@ -25,31 +23,29 @@ interface ISettingToggleProps {
 }
 
 const SettingDropdown: React.FC<ISettingToggleProps> = (props) => {
-  const { id, title, onChange, options, selected } = props;
+  const { id, title, description, dropdownWidth, image, onChange, options, selected } = props;
   const uniqueId = useId(kebabCase(title));
 
-  const onRenderLabel = (props) => {
-    return (
-      <div css={styles.labelContainer}>
-        <div css={styles.customerLabel}> {props.label} </div>
-        <TooltipHost content={props.label}>
-          <Icon iconName="Unknown" styles={styles.icon} />
-        </TooltipHost>
-      </div>
-    );
-  };
-
   return (
     <div css={styles.settingsContainer}>
-      <Dropdown
-        id={id || uniqueId}
-        label={formatMessage('Composer language is the language of Composer UI')}
-        options={options}
-        selectedKey={selected}
-        styles={{ root: { width: '100%' } }}
-        onChange={(_e, option) => onChange(option?.key?.toString() ?? '')}
-        onRenderLabel={onRenderLabel}
-      />
+      <div aria-hidden="true" css={styles.image} role="presentation">
+        {image && <img aria-hidden alt={''} src={image} />}
+      </div>
+      <div css={styles.settingsContent}>
+        <Label htmlFor={id || uniqueId} styles={{ root: { padding: 0 } }}>
+          {title}
+        </Label>
+        <p css={styles.settingsDescription}>{description}</p>
+      </div>
+      <div>
+        <Dropdown
+          dropdownWidth={dropdownWidth}
+          id={id || uniqueId}
+          options={options}
+          selectedKey={selected}
+          onChange={(_e, option) => onChange(option?.key?.toString() ?? '')}
+        />
+      </div>
     </div>
   );
 };
diff --git a/Composer/packages/client/src/pages/setting/app-settings/styles.ts b/Composer/packages/client/src/pages/setting/app-settings/styles.ts
index 3bbb44832..e1765f855 100644
--- a/Composer/packages/client/src/pages/setting/app-settings/styles.ts
+++ b/Composer/packages/client/src/pages/setting/app-settings/styles.ts
@@ -8,7 +8,6 @@ import { FontWeights } from '@uifabric/styling';
 
 export const container = css`
   label: SettingsContainer;
-  width: 700px;
 `;
 
 export const section = css`
@@ -39,15 +38,14 @@ export const link: ILinkStyles = {
 
 export const settingsContainer = css`
   display: flex;
+  margin-left: 48px;
   border-top: 1px solid ${NeutralColors.gray20};
   padding: 20px 0px;
-  width: 100%;
 `;
 
 export const settingsContent = css`
   width: 245px;
-  margin-left: 32px;
-  margin-right: 300px;
+  margin: 0 32px;
   font-size: ${FontSizes.size14};
 `;
 
@@ -60,22 +58,6 @@ export const image = css`
   width: 86px;
 `;
 
-export const labelContainer = css`
-  display: flex;
-  flex-direction: row;
-`;
-
-export const customerLabel = css`
-  font-size: ${FontSizes.size12};
-  margin-right: 5px;
-`;
-
-export const icon = {
-  root: {
-    fontSize: FontSizes.size12,
-  },
-};
-
 export const featureFlagGroupContainer = css`
   margin-left: 166px;
   font-size: ${FontSizes.size12};
diff --git a/Composer/packages/client/src/pages/setting/router.tsx b/Composer/packages/client/src/pages/setting/router.tsx
index a9ec61322..623612124 100644
--- a/Composer/packages/client/src/pages/setting/router.tsx
+++ b/Composer/packages/client/src/pages/setting/router.tsx
@@ -2,14 +2,16 @@
 // Licensed under the MIT License.
 
 import * as React from 'react';
-import { Router } from '@reach/router';
+import { Router, Redirect } from '@reach/router';
 import { useRecoilValue } from 'recoil';
 
 import { applicationErrorState, dispatcherState } from '../../recoilModel';
 import { ErrorBoundary } from '../../components/ErrorBoundary';
 import { About } from '../about/About';
 
+import { DialogSettings } from './dialog-settings/DialogSettings';
 import { AppSettings } from './app-settings/AppSettings';
+import { RuntimeSettings } from './runtime-settings/RuntimeSettings';
 import { Extensions } from './extensions/Extensions';
 
 export const SettingsRoutes = React.memo(({ projectId }: { projectId: string }) => {
@@ -23,8 +25,15 @@ export const SettingsRoutes = React.memo(({ projectId }: { projectId: string })
       setApplicationLevelError={setApplicationLevelError}
     >
       <Router>
+        <Redirect
+          noThrow
+          from="/"
+          to={projectId ? `/settings/bot/${projectId}/dialog-settings` : '/settings/application'}
+        />
         <AppSettings default path="application" />
         <About path="about" />
+        <DialogSettings path="/bot/:projectId/dialog-settings" />
+        <RuntimeSettings path="/bot/:projectId/runtime" />
         <Extensions path="extensions" />
       </Router>
     </ErrorBoundary>
diff --git a/Composer/packages/client/src/pages/botProject/runtime-settings/RuntimeSettings.tsx b/Composer/packages/client/src/pages/setting/runtime-settings/RuntimeSettings.tsx
similarity index 83%
rename from Composer/packages/client/src/pages/botProject/runtime-settings/RuntimeSettings.tsx
rename to Composer/packages/client/src/pages/setting/runtime-settings/RuntimeSettings.tsx
index 9a8d05ba6..59557a652 100644
--- a/Composer/packages/client/src/pages/botProject/runtime-settings/RuntimeSettings.tsx
+++ b/Composer/packages/client/src/pages/setting/runtime-settings/RuntimeSettings.tsx
@@ -6,10 +6,8 @@ import { jsx } from '@emotion/core';
 import { useState, Fragment, useEffect } from 'react';
 import formatMessage from 'format-message';
 import { Toggle } from 'office-ui-fabric-react/lib/Toggle';
-import { DefaultButton } from 'office-ui-fabric-react/lib/Button';
 import { TextField } from 'office-ui-fabric-react/lib/TextField';
-import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
-import { Icon } from 'office-ui-fabric-react/lib/Icon';
+import { DefaultButton } from 'office-ui-fabric-react/lib/Button';
 import { Link } from 'office-ui-fabric-react/lib/Link';
 import { RouteComponentProps } from '@reach/router';
 import { useRecoilValue } from 'recoil';
@@ -28,16 +26,7 @@ import { LoadingSpinner } from '../../../components/LoadingSpinner';
 
 import { EjectModal } from './ejectModal';
 import { WorkingModal } from './workingModal';
-import {
-  breathingSpace,
-  runtimeSettingsStyle,
-  runtimeControls,
-  runtimeToggle,
-  labelContainer,
-  customerLabel,
-  iconStyle,
-  textOr,
-} from './style';
+import { breathingSpace, runtimeSettingsStyle, runtimeControls, runtimeToggle, controlGroup } from './style';
 
 export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }>> = (props) => {
   const { projectId = '' } = props;
@@ -65,10 +54,10 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
   useEffect(() => {
     // check the status of the boilerplate material and see if it requires an update
     if (projectId) getBoilerplateVersion(projectId);
-  }, [projectId]);
+  }, []);
 
   useEffect(() => {
-    setNeedsUpdate(!!boilerplateVersion.updateRequired);
+    setNeedsUpdate(boilerplateVersion.updateRequired || false);
   }, [boilerplateVersion.updateRequired]);
 
   useEffect(() => {
@@ -78,7 +67,7 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
     }
   }, [ejectedRuntimeExists, templateKey]);
 
-  const toggleCustomRuntime = (_, isOn = false) => {
+  const handleChangeToggle = (_, isOn = false) => {
     setCustomRuntime(projectId, isOn);
   };
 
@@ -101,17 +90,17 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
 
   const header = () => (
     <div css={runtimeControls}>
-      {formatMessage('Configure Composer to start your bot using runtime code you can customize and control.')}
+      <p>{formatMessage('Configure Composer to start your bot using runtime code you can customize and control.')}</p>
     </div>
   );
 
-  const toggleOfCustomRuntime = () => (
+  const toggle = () => (
     <div css={runtimeToggle}>
       <Toggle
         inlineLabel
         checked={settings.runtime?.customRuntime}
         label={formatMessage('Use custom runtime')}
-        onChange={toggleCustomRuntime}
+        onChange={handleChangeToggle}
       />
     </div>
   );
@@ -164,22 +153,11 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
     }
   };
 
-  const onRenderLabel = (props) => {
-    return (
-      <div css={labelContainer}>
-        <div css={customerLabel(props.disabled)}> {props.label} </div>
-        <TooltipHost content={props.label}>
-          <Icon iconName="Unknown" styles={iconStyle(props.disabled)} />
-        </TooltipHost>
-      </div>
-    );
-  };
-
   return botName ? (
     <div css={runtimeSettingsStyle}>
       {header()}
-      {toggleOfCustomRuntime()}
-      <div>
+      {toggle()}
+      <div css={controlGroup}>
         <TextField
           required
           data-testid="runtimeCodeLocation"
@@ -189,9 +167,8 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
           styles={name}
           value={settings.runtime ? settings.runtime.path : ''}
           onChange={updateSetting('path')}
-          onRenderLabel={onRenderLabel}
         />
-        <span css={textOr}>{formatMessage('Or: ')}</span>
+        {formatMessage('Or: ')}
         <Link
           css={breathingSpace}
           disabled={!settings.runtime || !settings.runtime.customRuntime}
@@ -209,12 +186,11 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
           styles={name}
           value={settings.runtime ? settings.runtime.command : ''}
           onChange={updateSetting('command')}
-          onRenderLabel={onRenderLabel}
         />
       </div>
       <br />
       {needsUpdate && (
-        <div>
+        <div css={controlGroup}>
           <p>
             {formatMessage(
               'A newer version of the provisioning scripts has been found, and this project can be updated to the latest.'
@@ -232,8 +208,8 @@ export const RuntimeSettings: React.FC<RouteComponentProps<{ projectId: string }
           </DefaultButton>
         </div>
       )}
-      <WorkingModal isOpen={ejecting} title={formatMessage('Ejecting runtime...')} />
-      <EjectModal ejectRuntime={callEjectRuntime} hidden={!ejectModalVisible} onDismiss={closeEjectModal} />
+      <WorkingModal hidden={!ejecting} title={formatMessage('Ejecting runtime...')} />
+      <EjectModal closeModal={closeEjectModal} ejectRuntime={callEjectRuntime} hidden={!ejectModalVisible} />
     </div>
   ) : (
     <LoadingSpinner />
diff --git a/Composer/packages/client/src/pages/botProject/runtime-settings/ejectModal.tsx b/Composer/packages/client/src/pages/setting/runtime-settings/ejectModal.tsx
similarity index 77%
rename from Composer/packages/client/src/pages/botProject/runtime-settings/ejectModal.tsx
rename to Composer/packages/client/src/pages/setting/runtime-settings/ejectModal.tsx
index 6aa35076a..f93ddf23c 100644
--- a/Composer/packages/client/src/pages/botProject/runtime-settings/ejectModal.tsx
+++ b/Composer/packages/client/src/pages/setting/runtime-settings/ejectModal.tsx
@@ -3,22 +3,22 @@
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
 import { useEffect, useMemo, useState } from 'react';
+import { Dialog, DialogType } from 'office-ui-fabric-react/lib/Dialog';
 import formatMessage from 'format-message';
 import { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';
 import { DialogFooter } from 'office-ui-fabric-react/lib/Dialog';
 import { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';
 import { useRecoilValue } from 'recoil';
-import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
 
 import { runtimeTemplatesState, dispatcherState } from '../../../recoilModel';
 
 import { modalControlGroup } from './style';
 
-export type EjectModalProps = {
+export interface EjectModalProps {
   ejectRuntime: (templateKey: string) => Promise<void>;
   hidden: boolean;
-  onDismiss: () => void;
-};
+  closeModal: () => void;
+}
 
 export const EjectModal: React.FC<EjectModalProps> = (props) => {
   const [selectedTemplate, setSelectedTemplate] = useState<string | undefined>();
@@ -52,22 +52,27 @@ export const EjectModal: React.FC<EjectModalProps> = (props) => {
   };
 
   return (
-    <DialogWrapper
-      dialogType={DialogTypes.Customer}
-      isOpen={!props.hidden}
-      subText={formatMessage('Select runtime version to add')}
-      title={formatMessage('Add custom runtime')}
-      onDismiss={props.onDismiss}
+    <Dialog
+      dialogContentProps={{
+        type: DialogType.normal,
+        title: formatMessage('Add custom runtime'),
+        subText: formatMessage('Select runtime version to add'),
+      }}
+      hidden={props.hidden}
+      modalProps={{
+        isBlocking: false,
+      }}
+      onDismiss={props.closeModal}
     >
       <div css={modalControlGroup}>
         <ChoiceGroup required options={availableRuntimeTemplates} onChange={selectTemplate} />
       </div>
       <DialogFooter>
-        <DefaultButton onClick={props.onDismiss}>{formatMessage('Cancel')}</DefaultButton>
+        <DefaultButton onClick={props.closeModal}>Cancel</DefaultButton>
         <PrimaryButton disabled={!selectedTemplate} onClick={doEject}>
           {formatMessage('Okay')}
         </PrimaryButton>
       </DialogFooter>
-    </DialogWrapper>
+    </Dialog>
   );
 };
diff --git a/Composer/packages/client/src/pages/setting/runtime-settings/style.ts b/Composer/packages/client/src/pages/setting/runtime-settings/style.ts
new file mode 100644
index 000000000..b9b1577d1
--- /dev/null
+++ b/Composer/packages/client/src/pages/setting/runtime-settings/style.ts
@@ -0,0 +1,51 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import { css } from '@emotion/core';
+import { FontWeights, FontSizes } from 'office-ui-fabric-react/lib/Styling';
+export const runtimeSettingsStyle = css`
+  position: absolute;
+  top: 0;
+  bottom: 0;
+  left: 0;
+  right: 0;
+  padding: 1rem;
+  display: flex;
+  flex-direction: column;
+  box-sizing: border-box;
+`;
+
+export const runtimeControls = css`
+  margin-bottom: 18px;
+
+  & > h1 {
+    margin-top: 0;
+  }
+`;
+
+export const runtimeToggle = css`
+  display: flex;
+
+  & > * {
+    margin-right: 2rem;
+  }
+`;
+
+export const controlGroup = css`
+  border: 1px solid rgb(237, 235, 233);
+  padding: 0.5rem 1rem 1rem 1rem;
+`;
+
+export const modalControlGroup = css`
+  border: 1px solid rgb(237, 235, 233);
+  padding: 0.5rem 1rem 1rem 1rem;
+`;
+
+export const runtimeControlsTitle = css`
+  font-size: ${FontSizes.xLarge};
+  font-weight: ${FontWeights.semibold};
+`;
+
+export const breathingSpace = css`
+  margin-bottom: 1rem;
+`;
diff --git a/Composer/packages/client/src/pages/botProject/runtime-settings/workingModal.tsx b/Composer/packages/client/src/pages/setting/runtime-settings/workingModal.tsx
similarity index 55%
rename from Composer/packages/client/src/pages/botProject/runtime-settings/workingModal.tsx
rename to Composer/packages/client/src/pages/setting/runtime-settings/workingModal.tsx
index 4779f8e8d..d00e6dfaf 100644
--- a/Composer/packages/client/src/pages/botProject/runtime-settings/workingModal.tsx
+++ b/Composer/packages/client/src/pages/setting/runtime-settings/workingModal.tsx
@@ -3,22 +3,31 @@
 
 /** @jsx jsx */
 import { jsx } from '@emotion/core';
-import { DialogWrapper, DialogTypes } from '@bfc/ui-shared';
+import { Dialog, DialogType } from 'office-ui-fabric-react/lib/Dialog';
 
 import { LoadingSpinner } from '../../../components/LoadingSpinner';
 
 import { modalControlGroup } from './style';
 
-export type WorkingModalProps = {
-  isOpen: boolean;
+export interface WorkingModalProps {
+  hidden: boolean;
   title: string;
-};
+}
 export const WorkingModal: React.FC<WorkingModalProps> = (props) => {
   return (
-    <DialogWrapper dialogType={DialogTypes.Customer} isOpen={props.isOpen} title={props.title}>
+    <Dialog
+      dialogContentProps={{
+        type: DialogType.normal,
+        title: props.title,
+      }}
+      hidden={props.hidden}
+      modalProps={{
+        isBlocking: false,
+      }}
+    >
       <div css={modalControlGroup}>
         <LoadingSpinner />
       </div>
-    </DialogWrapper>
+    </Dialog>
   );
 };
diff --git a/Composer/packages/client/src/pages/skills/index.tsx b/Composer/packages/client/src/pages/skills/index.tsx
new file mode 100644
index 000000000..b59dedc0a
--- /dev/null
+++ b/Composer/packages/client/src/pages/skills/index.tsx
@@ -0,0 +1,87 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import { RouteComponentProps } from '@reach/router';
+import React, { useCallback, useState } from 'react';
+import formatMessage from 'format-message';
+import { useRecoilValue } from 'recoil';
+import { SkillSetting } from '@bfc/shared';
+import { Toolbar, IToolbarItem } from '@bfc/ui-shared';
+
+import { dispatcherState, settingsState, botDisplayNameState } from '../../recoilModel';
+import { TestController } from '../../components/TestController/TestController';
+import { CreateSkillModal } from '../../components/CreateSkillModal';
+
+import { ContainerStyle, ContentHeaderStyle, HeaderText } from './styles';
+import SkillSettings from './skill-settings';
+import SkillList from './skill-list';
+
+const Skills: React.FC<RouteComponentProps<{ projectId: string }>> = (props) => {
+  const { projectId = '' } = props;
+  const [showAddSkillDialogModal, setShowAddSkillDialogModal] = useState(false);
+
+  const botName = useRecoilValue(botDisplayNameState(projectId));
+  const settings = useRecoilValue(settingsState(projectId));
+  const { addSkill, setSettings } = useRecoilValue(dispatcherState);
+
+  const toolbarItems: IToolbarItem[] = [
+    {
+      type: 'action',
+      text: formatMessage('Connect to a new skill'),
+      buttonProps: {
+        iconProps: {
+          iconName: 'Add',
+        },
+        onClick: () => {
+          setShowAddSkillDialogModal(true);
+        },
+      },
+      align: 'left',
+    },
+    {
+      type: 'element',
+      element: <TestController projectId={projectId} />,
+      align: 'right',
+    },
+  ];
+
+  const onSubmitForm = useCallback(
+    (skill: SkillSetting) => {
+      addSkill(projectId, skill);
+      setShowAddSkillDialogModal(false);
+    },
+    [projectId]
+  );
+
+  const onDismissForm = useCallback(() => {
+    setShowAddSkillDialogModal(false);
+  }, []);
+
+  return (
+    <div css={ContainerStyle} data-testid="skills-page">
+      <Toolbar toolbarItems={toolbarItems} />
+      <div css={ContentHeaderStyle}>
+        <h1 css={HeaderText}>{formatMessage('Skills')}</h1>
+      </div>
+      <div role="main">
+        <SkillSettings
+          botId={settings.MicrosoftAppId}
+          botName={botName}
+          botPassword={settings.MicrosoftAppPassword}
+          projectId={projectId}
+          setSettings={setSettings}
+          settings={settings}
+          skillHostEndpoint={settings.skillHostEndpoint as string | undefined}
+        />
+      </div>
+      <SkillList projectId={projectId} />
+      {showAddSkillDialogModal && (
+        <CreateSkillModal projectId={projectId} onDismiss={onDismissForm} onSubmit={onSubmitForm} />
+      )}
+    </div>
+  );
+};
+
+export default Skills;
diff --git a/Composer/packages/client/src/pages/skills/skill-list.tsx b/Composer/packages/client/src/pages/skills/skill-list.tsx
new file mode 100644
index 000000000..63435f0e8
--- /dev/null
+++ b/Composer/packages/client/src/pages/skills/skill-list.tsx
@@ -0,0 +1,193 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import {
+  DetailsList,
+  DetailsListLayoutMode,
+  SelectionMode,
+  CheckboxVisibility,
+  IColumn,
+} from 'office-ui-fabric-react/lib/DetailsList';
+import React, { useState, useCallback, useMemo } from 'react';
+import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
+import { IconButton } from 'office-ui-fabric-react/lib/Button';
+import { TooltipHost } from 'office-ui-fabric-react/lib/Tooltip';
+import { ScrollablePane, ScrollbarVisibility } from 'office-ui-fabric-react/lib/ScrollablePane';
+import { Sticky, StickyPositionType } from 'office-ui-fabric-react/lib/Sticky';
+import { Stack } from 'office-ui-fabric-react/lib/Stack';
+import { FontSizes } from '@uifabric/fluent-theme';
+import { useRecoilValue } from 'recoil';
+import formatMessage from 'format-message';
+
+import { DisplayManifestModal } from '../../components/Modal/DisplayManifestModal';
+import { dispatcherState, skillsState } from '../../recoilModel';
+
+import { TableView, TableCell } from './styles';
+
+const columns: IColumn[] = [
+  {
+    key: 'name',
+    name: formatMessage('Available Skills'),
+    fieldName: 'name',
+    minWidth: 100,
+    maxWidth: 150,
+    isResizable: true,
+    data: 'string',
+    onRender: ({ skill: { name } }) => {
+      return <div css={TableCell}>{name}</div>;
+    },
+  },
+  {
+    key: 'endpointUrl',
+    name: formatMessage('Skill Endpoint'),
+    fieldName: 'endpointUrl',
+    minWidth: 250,
+    maxWidth: 400,
+    isResizable: true,
+    data: 'string',
+    onRender: ({ skill, onEditSkill }) => {
+      const { endpoints, endpointUrl: selectedEndpointUrl } = skill;
+
+      const options = (endpoints || []).map(({ name, endpointUrl, msAppId }, key) => ({
+        key,
+        text: name,
+        data: {
+          endpointUrl,
+          msAppId,
+        },
+        selected: endpointUrl === selectedEndpointUrl,
+      }));
+
+      const handleChange = (_, option?: IDropdownOption) => {
+        if (option) {
+          onEditSkill({ ...skill, ...option.data });
+        }
+      };
+
+      return <Dropdown options={options} onChange={handleChange} />;
+    },
+  },
+  {
+    key: 'description',
+    name: formatMessage('Description'),
+    fieldName: 'description',
+    minWidth: 200,
+    maxWidth: 400,
+    isResizable: true,
+    data: 'string',
+    onRender: ({ skill: { description } }) => {
+      return <div css={TableCell}>{description}</div>;
+    },
+  },
+  {
+    key: 'buttons',
+    name: '',
+    minWidth: 120,
+    maxWidth: 120,
+    fieldName: 'buttons',
+    data: 'string',
+    onRender: ({ onDelete, onViewManifest }) => {
+      return (
+        <div>
+          <Stack horizontal tokens={{ childrenGap: 8 }}>
+            <IconButton
+              ariaLabel={formatMessage('Delete')}
+              data-testid="DeleteSkill"
+              iconProps={{
+                iconName: 'Delete',
+              }}
+              title={formatMessage('Delete')}
+              onClick={() => onDelete()}
+            />
+            <IconButton
+              ariaLabel={formatMessage('View')}
+              data-testid="ViewManifest"
+              iconProps={{ iconName: 'ContextMenu' }}
+              title={formatMessage('View')}
+              onClick={() => onViewManifest()}
+            />
+          </Stack>
+        </div>
+      );
+    },
+  },
+];
+
+interface SkillListProps {
+  projectId: string;
+}
+
+const SkillList: React.FC<SkillListProps> = ({ projectId }) => {
+  const { removeSkill, updateSkill } = useRecoilValue(dispatcherState);
+  const skills = useRecoilValue(skillsState(projectId));
+
+  const [selectedSkillUrl, setSelectedSkillUrl] = useState<string | null>(null);
+
+  const handleViewManifest = (item) => {
+    if (item && item.name && item.content) {
+      setSelectedSkillUrl(item.manifestUrl);
+    }
+  };
+
+  const handleEditSkill = (projectId: string, skillId: string) => (skillData) => {
+    updateSkill(projectId, skillId, skillData);
+  };
+
+  const items = useMemo(
+    () =>
+      skills.map((skill) => ({
+        skill,
+        onDelete: () => removeSkill(projectId, skill.id),
+        onViewManifest: () => handleViewManifest(skill),
+        onEditSkill: handleEditSkill(projectId, skill.id),
+      })),
+    [skills, projectId]
+  );
+
+  const onDismissManifest = () => {
+    setSelectedSkillUrl(null);
+  };
+
+  const onRenderDetailsHeader = useCallback((props, defaultRender) => {
+    return (
+      <div data-testid="tableHeader">
+        <Sticky isScrollSynced stickyPosition={StickyPositionType.Header}>
+          {defaultRender({
+            ...props,
+            onRenderColumnHeaderTooltip: (tooltipHostProps) => <TooltipHost {...tooltipHostProps} />,
+          })}
+        </Sticky>
+      </div>
+    );
+  }, []);
+
+  return (
+    <React.Fragment>
+      <div aria-label={formatMessage('List view')} css={TableView} role="region">
+        <ScrollablePane scrollbarVisibility={ScrollbarVisibility.auto}>
+          <DetailsList
+            isHeaderVisible
+            checkboxVisibility={CheckboxVisibility.hidden}
+            columns={columns}
+            items={items}
+            layoutMode={DetailsListLayoutMode.justified}
+            selectionMode={SelectionMode.single}
+            styles={{ contentWrapper: { fontSize: FontSizes.size16 } }}
+            onRenderDetailsHeader={onRenderDetailsHeader}
+          />
+        </ScrollablePane>
+      </div>
+      <DisplayManifestModal
+        isDraggable={false}
+        isModeless={false}
+        manifestId={selectedSkillUrl}
+        projectId={projectId}
+        onDismiss={onDismissManifest}
+      />
+    </React.Fragment>
+  );
+};
+
+export default SkillList;
diff --git a/Composer/packages/client/src/pages/skills/skill-settings.tsx b/Composer/packages/client/src/pages/skills/skill-settings.tsx
new file mode 100644
index 000000000..cb14016c1
--- /dev/null
+++ b/Composer/packages/client/src/pages/skills/skill-settings.tsx
@@ -0,0 +1,97 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+/** @jsx jsx */
+import { jsx } from '@emotion/core';
+import React, { useState, useEffect } from 'react';
+import formatMessage from 'format-message';
+import { TextField } from 'office-ui-fabric-react/lib/TextField';
+import { DialogSetting } from '@bfc/shared';
+
+import { FormFieldAlignHorizontalBotSettings } from './styles';
+
+export interface ISkillFormProps {
+  botId?: string;
+  skillHostEndpoint?: string;
+  botPassword?: string;
+  setSettings: (projectId: string, settings: DialogSetting) => Promise<void>;
+  projectId: string;
+  botName: string;
+  settings: DialogSetting;
+}
+
+const SkillSettings: React.FC<ISkillFormProps> = (props) => {
+  const [skillSettings, setSkillSettings] = useState({
+    botId: props.botId,
+    skillHostEndpoint: props.skillHostEndpoint,
+    botPassword: props.botPassword,
+  });
+  useEffect(() => {
+    setSkillSettings({
+      botId: props.botId,
+      skillHostEndpoint: props.skillHostEndpoint,
+      botPassword: props.botPassword,
+    });
+  }, [props.botId, props.botPassword, props.skillHostEndpoint]);
+
+  const handleFieldChange = (event) => {
+    const localSettings = {
+      ...skillSettings,
+      [event.target.id]: event.target.value,
+    };
+
+    // auto fill `botId` with `MicrosoftAppId`
+    if (event.target.id === 'MicrosoftAppId') {
+      localSettings.botId = event.target.value;
+    }
+
+    setSkillSettings({ ...localSettings });
+    props.setSettings(props.projectId, { ...props.settings, ...localSettings });
+  };
+
+  return (
+    <div css={FormFieldAlignHorizontalBotSettings}>
+      <div style={{ marginLeft: '20px' }}>
+        <TextField
+          underlined
+          aria-labelledby={'microsoftAppId'}
+          data-testid="SkillBotId"
+          description={formatMessage('The Microsoft App Id that will be calling the skill.')}
+          id={'MicrosoftAppId'}
+          label={formatMessage('Microsoft App Id')}
+          style={{ maxWidth: '300px' }}
+          value={skillSettings.botId}
+          onChange={handleFieldChange}
+        />
+      </div>
+      <div style={{ marginLeft: '20px' }}>
+        <TextField
+          underlined
+          aria-labelledby={'microsoftAppPassword'}
+          data-testid="SkillBotPassword"
+          description={formatMessage('The Microsoft App Password that will be calling the skill.')}
+          id={'MicrosoftAppPassword'}
+          label={formatMessage('Microsoft App Password')}
+          style={{ maxWidth: '300px' }}
+          value={skillSettings.botPassword}
+          onChange={handleFieldChange}
+        />
+      </div>
+      <div style={{ marginLeft: '20px' }}>
+        <TextField
+          underlined
+          aria-labelledby={'skillHostEndpoint'}
+          data-testid="SkillHostEndpoint"
+          description={formatMessage('The callback url for the skill host.')}
+          id={'skillHostEndpoint'}
+          label={formatMessage('Skill Host Endpoint')}
+          style={{ width: '400px' }}
+          value={skillSettings.skillHostEndpoint}
+          onChange={handleFieldChange}
+        />
+      </div>
+    </div>
+  );
+};
+
+export default SkillSettings;
diff --git a/Composer/packages/client/src/pages/skills/styles.ts b/Composer/packages/client/src/pages/skills/styles.ts
new file mode 100644
index 000000000..9221fa0a0
--- /dev/null
+++ b/Composer/packages/client/src/pages/skills/styles.ts
@@ -0,0 +1,72 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+import { FontWeights, FontSizes } from 'office-ui-fabric-react/lib/Styling';
+import { css } from '@emotion/core';
+
+export const ContainerStyle = css`
+  display: flex;
+  flex-direction: column;
+  height: 100%;
+`;
+
+export const ContentHeaderStyle = css`
+  padding: 5px 20px;
+  height: 60px;
+  display: flex;
+  flex-shrink: 0;
+  justify-content: space-between;
+  align-items: center;
+`;
+
+export const HeaderText = css`
+  font-size: ${FontSizes.xLarge};
+  font-weight: ${FontWeights.semibold};
+`;
+
+export const ContentStyle = css`
+  margin-left: 2px;
+  display: flex;
+  border-top: 1px solid #dddddd;
+  flex: 1;
+  position: relative;
+  nav {
+    ul {
+      margin-top: 0px;
+    }
+  }
+`;
+
+export const TableView = css`
+  flex: 4;
+  margin: 20px;
+  position: relative;
+  overflow: visible;
+  fontsize: 16px;
+`;
+
+export const TableCell = css`
+  white-space: pre-wrap;
+  font-size: 14px;
+  textarea,
+  input {
+    border: 1px solid #dddddd;
+  }
+`;
+
+export const FormFieldAlignHorizontalBotSettings = css`
+  max-width: 1500px;
+  margin-top: 20px;
+  align-items: flex-start;
+  display: flex;
+  flex-wrap: wrap;
+  flex-direction: row;
+  padding-bottom: 15px;
+`;
+
+export const ManifestModalHeaderStyle = css`
+  margin: 14px 0 0 16px;
+  font-size: 20px;
+  font-weight: bolder;
+  align-items: left;
+`;
diff --git a/Composer/packages/client/src/recoilModel/DispatcherWrapper.tsx b/Composer/packages/client/src/recoilModel/DispatcherWrapper.tsx
index 9b9cf4b4d..2dc625e09 100644
--- a/Composer/packages/client/src/recoilModel/DispatcherWrapper.tsx
+++ b/Composer/packages/client/src/recoilModel/DispatcherWrapper.tsx
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { useRef, useState, Fragment, useLayoutEffect, MutableRefObject } from 'react';
+import { useRef, useState, Fragment, useLayoutEffect } from 'react';
 // eslint-disable-next-line @typescript-eslint/camelcase
 import { atom, useRecoilTransactionObserver_UNSTABLE, Snapshot, useRecoilState } from 'recoil';
 import once from 'lodash/once';
@@ -26,38 +26,39 @@ import {
   jsonSchemaFilesState,
   crossTrainConfigState,
 } from './atoms';
-import { localBotsWithoutErrorsSelector, formDialogSchemasSelectorFamily } from './selectors';
+import { botsForFilePersistenceSelector, formDialogSchemasSelectorFamily } from './selectors';
 import { Recognizer } from './Recognizers';
 import { recognizersSelectorFamily } from './selectors/recognizers';
 
 const getBotAssets = async (projectId, snapshot: Snapshot): Promise<BotAssets> => {
-  const dialogs = await snapshot.getPromise(dialogsSelectorFamily(projectId));
-  const luFiles = await snapshot.getPromise(luFilesState(projectId));
-  const lgFiles = await snapshot.getPromise(lgFilesState(projectId));
-  const skillManifests = await snapshot.getPromise(skillManifestsState(projectId));
-  const setting = await snapshot.getPromise(settingsState(projectId));
-  const botProjectFile = await snapshot.getPromise(botProjectFileState(projectId));
-  const dialogSchemas = await snapshot.getPromise(dialogSchemasState(projectId));
-  const formDialogSchemas = await snapshot.getPromise(formDialogSchemasSelectorFamily(projectId));
-  const jsonSchemaFiles = await snapshot.getPromise(jsonSchemaFilesState(projectId));
-  const recognizers = await snapshot.getPromise(recognizersSelectorFamily(projectId));
-  const crossTrainConfig = await snapshot.getPromise(crossTrainConfigState(projectId));
-  const qnaFiles = await snapshot.getPromise(qnaFilesState(projectId));
-
+  const result = await Promise.all([
+    snapshot.getPromise(dialogsSelectorFamily(projectId)),
+    snapshot.getPromise(luFilesState(projectId)),
+    snapshot.getPromise(qnaFilesState(projectId)),
+    snapshot.getPromise(lgFilesState(projectId)),
+    snapshot.getPromise(skillManifestsState(projectId)),
+    snapshot.getPromise(settingsState(projectId)),
+    snapshot.getPromise(dialogSchemasState(projectId)),
+    snapshot.getPromise(botProjectFileState(projectId)),
+    snapshot.getPromise(formDialogSchemasSelectorFamily(projectId)),
+    snapshot.getPromise(jsonSchemaFilesState(projectId)),
+    snapshot.getPromise(recognizersSelectorFamily(projectId)),
+    snapshot.getPromise(crossTrainConfigState(projectId)),
+  ]);
   return {
     projectId,
-    dialogs,
-    luFiles,
-    qnaFiles,
-    lgFiles,
-    skillManifests,
-    setting,
-    dialogSchemas,
-    botProjectFile,
-    formDialogSchemas,
-    jsonSchemaFiles,
-    recognizers,
-    crossTrainConfig,
+    dialogs: result[0],
+    luFiles: result[1],
+    qnaFiles: result[2],
+    lgFiles: result[3],
+    skillManifests: result[4],
+    setting: result[5],
+    dialogSchemas: result[6],
+    botProjectFile: result[7],
+    formDialogSchemas: result[8],
+    jsonSchemaFiles: result[9],
+    recognizers: result[10],
+    crossTrainConfig: result[11],
   };
 };
 
@@ -74,7 +75,7 @@ const wrapDispatcher = (dispatchers, forceUpdate) => {
     };
     boundDispatchers[dispatcherName] = dispatcher;
     return boundDispatchers;
-  }, {} as Dispatcher);
+  }, {} as any);
 };
 
 const InitDispatcher = ({ onLoad }) => {
@@ -82,7 +83,7 @@ const InitDispatcher = ({ onLoad }) => {
   const prepareAxiosWithRecoil = once(prepareAxios);
 
   // Use a ref to ensure the dispatcher is only created once
-  const dispatcherRef: MutableRefObject<Dispatcher> = useRef(wrapDispatcher(createDispatchers(), forceUpdate));
+  const dispatcherRef = useRef(wrapDispatcher(createDispatchers(), forceUpdate));
 
   const [currentDispatcherState, setDispatcher] = useRecoilState(dispatcherState);
 
@@ -99,10 +100,10 @@ const InitDispatcher = ({ onLoad }) => {
 
 export const DispatcherWrapper = ({ children }) => {
   const [loaded, setLoaded] = useState(false);
-  const botProjects = useRecoilValue(localBotsWithoutErrorsSelector);
+  const botProjects = useRecoilValue(botsForFilePersistenceSelector);
 
   useRecoilTransactionObserver_UNSTABLE(async ({ snapshot, previousSnapshot }) => {
-    const botsForFilePersistence = await snapshot.getPromise(localBotsWithoutErrorsSelector);
+    const botsForFilePersistence = await snapshot.getPromise(botsForFilePersistenceSelector);
     for (const projectId of botsForFilePersistence) {
       const assets = await getBotAssets(projectId, snapshot);
       const previousAssets = await getBotAssets(projectId, previousSnapshot);
diff --git a/Composer/packages/client/src/recoilModel/atoms/appState.ts b/Composer/packages/client/src/recoilModel/atoms/appState.ts
index a9b13456d..2efaed6ce 100644
--- a/Composer/packages/client/src/recoilModel/atoms/appState.ts
+++ b/Composer/packages/client/src/recoilModel/atoms/appState.ts
@@ -16,7 +16,7 @@ import {
 } from '../../recoilModel/types';
 import { getUserSettings } from '../utils';
 import onboardingStorage from '../../utils/onboardingStorage';
-import { CreationFlowStatus, AppUpdaterStatus, CreationFlowType } from '../../constants';
+import { CreationFlowStatus, AppUpdaterStatus } from '../../constants';
 
 export type BotProject = {
   readonly id: string;
@@ -31,20 +31,17 @@ export type CurrentUser = {
   sessionExpired: boolean;
 };
 
-// These values should align with the paths in the app's router
 export type PageMode =
-  | 'dialogs' // used for the design page
-  | 'language-understanding'
-  | 'language-generation'
-  | 'knowledge-base'
+  | 'home'
+  | 'design'
+  | 'lg'
+  | 'lu'
+  | 'qna'
+  | 'notifications'
   | 'publish'
-  | 'botProjectsSettings'
-  | 'forms'
-  | 'diagnostics'
+  | 'skills'
   | 'settings'
-  | 'projects'
-  | 'home'
-  | 'botProjectsSettings';
+  | 'about';
 
 const getFullyQualifiedKey = (value: string) => {
   return `App_${value}_State`;
@@ -102,7 +99,7 @@ export const onboardingState = atom<{
   },
 });
 
-export const clipboardActionsState = atomFamily<any[], string>({
+export const clipboardActionsState = atom<any[]>({
   key: getFullyQualifiedKey('clipboardActions'),
   default: [],
 });
@@ -141,11 +138,6 @@ export const creationFlowStatusState = atom<CreationFlowStatus>({
   default: CreationFlowStatus.CLOSE,
 });
 
-export const creationFlowTypeState = atom<CreationFlowType>({
-  key: getFullyQualifiedKey('creationFlowTpye'),
-  default: 'Bot',
-});
-
 export const logEntryListState = atom<string[]>({
   key: getFullyQualifiedKey('logEntryList'),
   default: [],
@@ -206,9 +198,9 @@ export const currentProjectIdState = atom<string>({
   default: '',
 });
 
-export const createQnAOnState = atom<{ projectId: string; dialogId: string }>({
-  key: getFullyQualifiedKey('createQnAOn'),
-  default: { projectId: '', dialogId: '' },
+export const currentModeState = atom<PageMode>({
+  key: getFullyQualifiedKey('currentMode'),
+  default: 'home',
 });
 
 export const botProjectSpaceLoadedState = atom<boolean>({
@@ -239,10 +231,10 @@ export const formDialogGenerationProgressingState = atom({
 export const pageElementState = atom<{ [page in PageMode]?: { [key: string]: any } }>({
   key: getFullyQualifiedKey('pageElement'),
   default: {
-    dialogs: {},
-    'language-generation': {},
-    'language-understanding': {},
-    'knowledge-base': {},
+    design: {},
+    lg: {},
+    lu: {},
+    qna: {},
   },
 });
 
@@ -254,18 +246,3 @@ export const ServerSettingsState = atom<ServerSettings>({
     },
   },
 });
-
-export const showCreateDialogModalState = atom<boolean>({
-  key: getFullyQualifiedKey('showCreateDialogModal'),
-  default: false,
-});
-
-export const exportSkillModalInfoState = atom<undefined | string>({
-  key: getFullyQualifiedKey('exportSkillModalInfo'),
-  default: undefined,
-});
-
-export const displaySkillManifestState = atom<undefined | string>({
-  key: getFullyQualifiedKey('displaySkillManifest'),
-  default: undefined,
-});
diff --git a/Composer/packages/client/src/recoilModel/atoms/botState.ts b/Composer/packages/client/src/recoilModel/atoms/botState.ts
index 5db49b69c..b08851b3c 100644
--- a/Composer/packages/client/src/recoilModel/atoms/botState.ts
+++ b/Composer/packages/client/src/recoilModel/atoms/botState.ts
@@ -15,13 +15,12 @@ import {
   LgFile,
   LuFile,
   QnAFile,
-  SkillManifestFile,
   RecognizerFile,
   Skill,
 } from '@bfc/shared';
 import { atomFamily } from 'recoil';
 
-import { BotRuntimeError, DesignPageLocation } from '../../recoilModel/types';
+import { BotLoadError, DesignPageLocation } from '../../recoilModel/types';
 import FilePersistence from '../persistence/FilePersistence';
 
 import { BotStatus } from './../../constants';
@@ -107,7 +106,7 @@ export const localeState = atomFamily<string, string>({
 export const botStatusState = atomFamily<BotStatus, string>({
   key: getFullyQualifiedKey('botStatus'),
   default: (id) => {
-    return BotStatus.inactive;
+    return BotStatus.unConnected;
   },
 });
 
@@ -118,7 +117,7 @@ export const botDiagnosticsState = atomFamily<Diagnostic[], string>({
   },
 });
 
-export const botRuntimeErrorState = atomFamily<BotRuntimeError, string>({
+export const botLoadErrorState = atomFamily<BotLoadError, string>({
   key: getFullyQualifiedKey('botLoadErrorMsg'),
   default: (id) => {
     return { title: '', message: '' };
@@ -139,6 +138,13 @@ export const luFilesState = atomFamily<LuFile[], string>({
   },
 });
 
+export const skillsState = atomFamily<Skill[], string>({
+  key: getFullyQualifiedKey('skills'),
+  default: (id) => {
+    return [];
+  },
+});
+
 export const recognizerIdsState = atomFamily<string[], string>({
   key: getFullyQualifiedKey('recognizerIds'),
   default: (id) => {
@@ -167,13 +173,20 @@ export const actionsSeedState = atomFamily<any, string>({
   },
 });
 
-export const skillManifestsState = atomFamily<SkillManifestFile[], string>({
+export const skillManifestsState = atomFamily<any, string>({
   key: getFullyQualifiedKey('skillManifests'),
   default: (id) => {
     return [];
   },
 });
 
+export const showCreateDialogModalState = atomFamily<boolean, string>({
+  key: getFullyQualifiedKey('showCreateDialogModal'),
+  default: (id) => {
+    return false;
+  },
+});
+
 export const showAddSkillDialogModalState = atomFamily<boolean, string>({
   key: getFullyQualifiedKey('showAddSkillDialogModal'),
   default: false,
@@ -226,6 +239,11 @@ export const onAddSkillDialogCompleteState = atomFamily<any, string>({
   default: { func: undefined },
 });
 
+export const displaySkillManifestState = atomFamily<any, string>({
+  key: getFullyQualifiedKey('displaySkillManifest'),
+  default: undefined,
+});
+
 export const showAddLanguageModalState = atomFamily<boolean, string>({
   key: getFullyQualifiedKey('showAddLanguageModal'),
   default: false,
@@ -337,19 +355,6 @@ export const botNameIdentifierState = atomFamily<string, string>({
   default: '',
 });
 
-// TODO: Currently always setting to 0 as we dont support more than 1 manifest. This index would need to change based on the default manifest chosen in the future.
-export const currentSkillManifestIndexState = atomFamily<number, string>({
-  key: getFullyQualifiedKey('currentSkillManifestIndex'),
-  default: 0,
-});
-
-export const skillsState = atomFamily<Skill[], string>({
-  key: getFullyQualifiedKey('skills'),
-  default: (id) => {
-    return [];
-  },
-});
-
 export const canUndoState = atomFamily<boolean, string>({
   key: getFullyQualifiedKey('canUndoState'),
   default: false,
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/botProjectFile.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/botProjectFile.test.tsx
index 0afea4b0c..f6e49a076 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/botProjectFile.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/botProjectFile.test.tsx
@@ -4,10 +4,8 @@
 import { selector, useRecoilValue, selectorFamily, useRecoilState } from 'recoil';
 import { act, RenderHookResult, HookResult } from '@botframework-composer/test-utils/lib/hooks';
 import noop from 'lodash/noop';
-import { BotProjectFile, Skill } from '@bfc/shared';
 
 import { botProjectFileDispatcher } from '../botProjectFile';
-import { settingsDispatcher } from '../setting';
 import { renderRecoilHook } from '../../../../__tests__/testUtils';
 import {
   botDisplayNameState,
@@ -18,7 +16,6 @@ import {
   currentProjectIdState,
   locationState,
   projectMetaDataState,
-  settingsState,
 } from '../../atoms';
 import { dispatcherState } from '../../DispatcherWrapper';
 import { Dispatcher } from '..';
@@ -62,11 +59,10 @@ describe('Bot Project File dispatcher', () => {
 
   const useRecoilTestHook = () => {
     const botName = useRecoilValue(botDisplayNameState(rootBotProjectId));
-    const [botProjectFile, setBotProjectFile] = useRecoilState(botProjectFileState(rootBotProjectId));
+    const botProjectFile = useRecoilValue(botProjectFileState(rootBotProjectId));
     const currentDispatcher = useRecoilValue(dispatcherState);
     const botStates = useRecoilValue(botStatesSelector);
     const [skillsData, setSkillsData] = useRecoilState(skillsDataSelector(testSkillId));
-    const [settings, setSettings] = useRecoilState(settingsState(rootBotProjectId));
 
     return {
       botName,
@@ -75,11 +71,6 @@ describe('Bot Project File dispatcher', () => {
       botStates,
       skillsData,
       setSkillsData,
-      settings,
-      setters: {
-        setBotProjectFile,
-        setSettings,
-      },
     };
   };
 
@@ -116,7 +107,6 @@ describe('Bot Project File dispatcher', () => {
           recoilState: dispatcherState,
           initialValue: {
             botProjectFileDispatcher,
-            settingsDispatcher,
           },
         },
       }
@@ -175,203 +165,9 @@ describe('Bot Project File dispatcher', () => {
     });
     expect(renderedComponent.current.botProjectFile.content.skills.oneNoteSkill.manifest).toBe(manifestUrl);
 
-    await act(async () => {
-      renderedComponent.current.setters.setSettings({
-        ...renderedComponent.current.settings,
-        skill: {
-          oneNoteSkill: {
-            endpointUrl: 'https://test/api/messages',
-            msAppId: '1234-2312-23432-32432',
-          },
-        },
-      });
-    });
-    expect(renderedComponent.current.settings.skill?.oneNoteSkill).toBeDefined();
-
     await act(async () => {
       dispatcher.removeSkillFromBotProjectFile(testSkillId);
     });
     expect(renderedComponent.current.botProjectFile.content.skills.oneNoteSkill).toBeUndefined();
-    expect(renderedComponent.current.settings.skill?.oneNoteSkill).toBeUndefined();
-  });
-
-  it('should update endpoint name of skill in Botproject file', async () => {
-    const mockFile: BotProjectFile = {
-      id: '',
-      content: {
-        name: 'TesterBot',
-        skills: {
-          googleSkill: {
-            workspace: '../googleSkill',
-            remote: false,
-            endpointName: 'default',
-          },
-        },
-      },
-      lastModified: '',
-    };
-    await act(async () => {
-      renderedComponent.current.setters.setBotProjectFile(mockFile);
-    });
-
-    await act(async () => {
-      dispatcher.updateEndpointNameInBotProjectFile('googleSkill', 'remote');
-    });
-
-    expect(renderedComponent.current.botProjectFile.content.skills.googleSkill.endpointName).toBe('remote');
-  });
-
-  it('should delete endpoint in BotProject file if Local Composer endpoint is chosen', async () => {
-    const googleKeepSkill: Skill = {
-      id: '12a-asd',
-      manifest: undefined,
-      name: 'googleSkill',
-      remote: false,
-    };
-
-    const mockFile: BotProjectFile = {
-      id: '',
-      content: {
-        name: 'TesterBot',
-        skills: {
-          googleSkill: {
-            workspace: '../googleSkill',
-            remote: false,
-            endpointName: 'default',
-          },
-        },
-      },
-      lastModified: '',
-    };
-
-    await act(async () => {
-      renderedComponent.current.setters.setSettings({
-        ...renderedComponent.current.settings,
-        skill: {
-          googleSkill: {
-            endpointUrl: 'https://test/api/messages',
-            msAppId: '1234-2312-23432-32432',
-          },
-        },
-      });
-    });
-
-    await act(async () => {
-      renderedComponent.current.setters.setBotProjectFile(mockFile);
-    });
-
-    await act(async () => {
-      await dispatcher.updateSkillsDataInBotProjectFile('googleSkill', googleKeepSkill, -1);
-    });
-
-    expect(renderedComponent.current.botProjectFile.content.skills.googleSkill.endpointName).toBeUndefined();
-
-    expect(renderedComponent.current.settings.skill).toEqual({
-      googleSkill: {
-        endpointUrl: '',
-        msAppId: '',
-      },
-    });
-  });
-
-  it('should update manifest in BotProject file', async () => {
-    await act(async () => {
-      renderedComponent.current.setSkillsData({
-        location: '/Users/tester/Desktop/LoadedBotProject/Google-Skill',
-        botNameIdentifier: 'googleSkill',
-      });
-    });
-
-    const mockFile: BotProjectFile = {
-      id: '',
-      content: {
-        name: 'TesterBot',
-        skills: {
-          googleSkill: {
-            workspace: '../googleSkill',
-            remote: false,
-            endpointName: 'default',
-          },
-        },
-      },
-      lastModified: '',
-    };
-    await act(async () => {
-      renderedComponent.current.setters.setBotProjectFile(mockFile);
-    });
-
-    await act(async () => {
-      await dispatcher.updateManifestInBotProjectFile(testSkillId, 'googleKeepManifest');
-    });
-    expect(renderedComponent.current.botProjectFile.content.skills.googleSkill.manifest).toBe('googleKeepManifest');
-  });
-
-  fit('should update endpoint in BotProject file', async () => {
-    await act(async () => {
-      renderedComponent.current.setters.setSettings({
-        ...renderedComponent.current.settings,
-        skill: {},
-      });
-    });
-    const googleKeepSkill: Skill = {
-      id: '12a.asd',
-      manifest: {
-        name: 'google-keep-manifest',
-        version: '1.0',
-        description: 'Manifest',
-        endpoints: [
-          {
-            name: 'local',
-            endpointUrl: 'http://localhost:3978/api/messages',
-            msAppId: '1232-1233-1234-1231',
-            description: 'Local endpoint skill',
-          },
-          {
-            name: 'remote',
-            endpointUrl: 'http://azure.websites/api/messages',
-            msAppId: '6734-1233-1234-1231',
-            description: 'Remote endpoint skill',
-          },
-        ],
-      },
-      name: 'googleSkill',
-      remote: false,
-    };
-
-    await act(async () => {
-      renderedComponent.current.setSkillsData({
-        location: '/Users/tester/Desktop/LoadedBotProject/Todo-Skill',
-        botNameIdentifier: 'todoSkill',
-      });
-    });
-
-    const mockFile: BotProjectFile = {
-      id: '',
-      content: {
-        name: 'TesterBot',
-        skills: {
-          googleSkill: {
-            workspace: '../googleSkill',
-            remote: false,
-            endpointName: 'default',
-          },
-        },
-      },
-      lastModified: '',
-    };
-    await act(async () => {
-      renderedComponent.current.setters.setBotProjectFile(mockFile);
-    });
-
-    await act(async () => {
-      await dispatcher.updateSkillsDataInBotProjectFile('googleSkill', googleKeepSkill, 1);
-    });
-    expect(renderedComponent.current.botProjectFile.content.skills.googleSkill.endpointName).toBe('remote');
-    expect(renderedComponent.current.settings.skill).toEqual({
-      googleSkill: {
-        endpointUrl: 'http://azure.websites/api/messages',
-        msAppId: '6734-1233-1234-1231',
-      },
-    });
   });
 });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/dialog.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/dialog.test.tsx
index ebb5b3a54..2cff90f10 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/dialog.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/dialog.test.tsx
@@ -111,7 +111,7 @@ describe('dialog dispatcher', () => {
       const lgFiles = useRecoilValue(lgFilesState(projectId));
       const actionsSeed = useRecoilValue(actionsSeedState(projectId));
       const onCreateDialogComplete = useRecoilValue(onCreateDialogCompleteState(projectId));
-      const showCreateDialogModal = useRecoilValue(showCreateDialogModalState);
+      const showCreateDialogModal = useRecoilValue(showCreateDialogModalState(projectId));
       const qnaFiles = useRecoilValue(qnaFilesState(projectId));
       const currentDispatcher = useRecoilValue(dispatcherState);
 
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/editor.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/editor.test.tsx
index fddeb362b..c18a592d2 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/editor.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/editor.test.tsx
@@ -15,7 +15,7 @@ describe('Editor dispatcher', () => {
   beforeEach(() => {
     const useRecoilTestHook = () => {
       const [visualEditorState, setVisualEditorState] = useRecoilState(visualEditorSelectionState);
-      const [clipboardState, setClipboardActionsState] = useRecoilState(clipboardActionsState('test'));
+      const [clipboardState, setClipboardActionsState] = useRecoilState(clipboardActionsState);
       const currentDispatcher = useRecoilValue(dispatcherState);
 
       return {
@@ -30,7 +30,7 @@ describe('Editor dispatcher', () => {
     const { result } = renderRecoilHook(useRecoilTestHook, {
       states: [
         { recoilState: visualEditorSelectionState, initialValue: [{ action1: 'initialVisualEditorValue' }] },
-        { recoilState: clipboardActionsState('test'), initialValue: [{ action1: 'initialClipboardVal' }] },
+        { recoilState: clipboardActionsState, initialValue: [{ action1: 'initialClipboardVal' }] },
       ],
       dispatcher: {
         recoilState: dispatcherState,
@@ -45,7 +45,7 @@ describe('Editor dispatcher', () => {
 
   it('should set clipboard state correctly', () => {
     act(() => {
-      dispatcher.setVisualEditorClipboard([{ action2: 'updatedVal' }], 'test');
+      dispatcher.setVisualEditorClipboard([{ action2: 'updatedVal' }]);
     });
     expect(renderedComponent.current.clipboardState).toEqual([{ action2: 'updatedVal' }]);
   });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/lg.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/lg.test.tsx
index 913b182e2..6aa4aca10 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/lg.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/lg.test.tsx
@@ -38,7 +38,7 @@ jest.mock('../../parsers/lgWorker', () => {
 });
 const lgFiles = [
   {
-    id: 'common.en-us',
+    id: 'a.en-us',
     content: `\r\n# Hello\r\n-hi`,
     templates: [{ name: 'Hello', body: '-hi', parameters: [] }],
     diagnostics: [],
@@ -87,7 +87,7 @@ describe('Lg dispatcher', () => {
   it('should create a lg template', async () => {
     await act(async () => {
       await dispatcher.createLgTemplate({
-        id: 'common.en-us',
+        id: 'a.en-us',
         template: getLgTemplate('Test', '-add'),
         projectId,
       });
@@ -98,7 +98,7 @@ describe('Lg dispatcher', () => {
 
   it('should update a lg file', async () => {
     await act(async () => {
-      await dispatcher.updateLgFile({ id: 'common.en-us', content: `test`, projectId });
+      await dispatcher.updateLgFile({ id: 'a.en-us', content: `test`, projectId });
     });
 
     expect(renderedComponent.current.lgFiles[0].content).toBe(`test`);
@@ -107,7 +107,7 @@ describe('Lg dispatcher', () => {
   it('should update a lg template', async () => {
     await act(async () => {
       await dispatcher.updateLgTemplate({
-        id: 'common.en-us',
+        id: 'a.en-us',
         templateName: 'Hello',
         template: getLgTemplate('Hello', '-TemplateValue'),
         projectId,
@@ -120,7 +120,7 @@ describe('Lg dispatcher', () => {
   it('should remove a lg template', async () => {
     await act(async () => {
       await dispatcher.removeLgTemplate({
-        id: 'common.en-us',
+        id: 'a.en-us',
         templateName: 'Hello',
         projectId,
       });
@@ -132,7 +132,7 @@ describe('Lg dispatcher', () => {
   it('should remove lg templates', async () => {
     await act(async () => {
       await dispatcher.removeLgTemplates({
-        id: 'common.en-us',
+        id: 'a.en-us',
         templateNames: ['Hello'],
         projectId,
       });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/mocks/mockBotProjectFile.json b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/mocks/mockBotProjectFile.json
index 7fe333a56..b1bf6ae90 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/mocks/mockBotProjectFile.json
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/mocks/mockBotProjectFile.json
@@ -1,15 +1,16 @@
 {
   "$schema": "",
   "name": "TesterBot",
+  "workspace": "file:///Users/tester/Desktop/LoadedBotProject/TesterBot",
   "skills": {
     "todoSkill": {
-      "workspace": "../Todo-Skill",
+      "workspace": "file:///Users/tester/Desktop/LoadedBotProject/Todo-Skill",
       "manifest": "Todo-Skill-2-1-preview-1-manifest",
       "remote": false,
       "endpointName": "default"
     },
     "googleKeepSync": {
-      "workspace": "../GoogleKeepSync",
+      "workspace": "file:///Users/tester/Desktop/LoadedBotProject/GoogleKeepSync",
       "remote": false
     }
   }
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/navigation.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/navigation.test.tsx
index b1d9633c4..1ae9e0ca0 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/navigation.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/navigation.test.tsx
@@ -171,6 +171,14 @@ describe('navigation dispatcher', () => {
       expectNavTo(`/bot/${projectId}/dialogs/dialogId`);
       expect(mockConvertPathToUrl).toBeCalledWith(projectId, projectId, 'dialogId');
     });
+
+    it("doesn't navigate to a destination where we already are", async () => {
+      mockCheckUrl.mockReturnValue(true);
+      await act(async () => {
+        await dispatcher.navTo(projectId, 'dialogId');
+      });
+      expect(mockNavigateTo).not.toBeCalled();
+    });
   });
 
   describe('selectTo', () => {
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/project.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/project.test.tsx
index 8e1e6df41..f55ad6b51 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/project.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/project.test.tsx
@@ -12,7 +12,6 @@ import findIndex from 'lodash/findIndex';
 import httpClient from '../../../utils/httpUtil';
 import { projectDispatcher } from '../project';
 import { botProjectFileDispatcher } from '../botProjectFile';
-import { publisherDispatcher } from '../publisher';
 import { renderRecoilHook } from '../../../../__tests__/testUtils';
 import {
   recentProjectsState,
@@ -32,6 +31,7 @@ import {
   localeState,
   schemasState,
   locationState,
+  skillsState,
   botStatusState,
   botDisplayNameState,
   botOpeningState,
@@ -112,6 +112,7 @@ describe('Project dispatcher', () => {
   const useRecoilTestHook = () => {
     const schemas = useRecoilValue(schemasState(projectId));
     const location = useRecoilValue(locationState(projectId));
+    const skills = useRecoilValue(skillsState(projectId));
     const botName = useRecoilValue(botDisplayNameState(projectId));
     const skillManifests = useRecoilValue(skillManifestsState(projectId));
     const luFiles = useRecoilValue(luFilesState(projectId));
@@ -145,6 +146,7 @@ describe('Project dispatcher', () => {
       botEnvironment,
       botName,
       botStatus,
+      skills,
       location,
       schemas,
       diagnostics,
@@ -183,7 +185,6 @@ describe('Project dispatcher', () => {
           initialValue: {
             projectDispatcher,
             botProjectFileDispatcher,
-            publisherDispatcher,
           },
         },
       }
@@ -219,6 +220,7 @@ describe('Project dispatcher', () => {
     expect(renderedComponent.current.lgFiles.length).toBe(1);
     expect(renderedComponent.current.luFiles.length).toBe(1);
     expect(renderedComponent.current.botEnvironment).toBe(mockProjectResponse.botEnvironment);
+    expect(renderedComponent.current.skills.length).toBe(0);
     expect(renderedComponent.current.botOpening).toBeFalsy();
     expect(renderedComponent.current.schemas.sdk).toBeDefined();
     expect(renderedComponent.current.schemas.default).toBeDefined();
@@ -271,6 +273,7 @@ describe('Project dispatcher', () => {
     expect(renderedComponent.current.lgFiles.length).toBe(0);
     expect(renderedComponent.current.luFiles.length).toBe(0);
     expect(renderedComponent.current.botEnvironment).toBe('production');
+    expect(renderedComponent.current.skills.length).toBe(0);
     expect(renderedComponent.current.botOpening).toBeFalsy();
     expect(renderedComponent.current.schemas.sdk).toBeUndefined();
     expect(renderedComponent.current.schemas.default).toBeUndefined();
@@ -279,7 +282,7 @@ describe('Project dispatcher', () => {
 
   it('should set bot status', async () => {
     await act(async () => {
-      await dispatcher.setBotStatus(projectId, BotStatus.pending);
+      await dispatcher.setBotStatus(BotStatus.pending, projectId);
     });
 
     expect(renderedComponent.current.botStatus).toEqual(BotStatus.pending);
@@ -358,33 +361,19 @@ describe('Project dispatcher', () => {
 
     expect(renderedComponent.current.botStates.echoSkill2).toBeDefined();
     expect(renderedComponent.current.botStates.echoSkill2.botDisplayName).toBe('Echo-Skill-2');
-    const skillId = '1234.1123213';
-    const mockImplementation = (httpClient.get as jest.Mock).mockImplementation((url: string) => {
-      if (endsWith(url, '/projects/generateProjectId')) {
-        return {
-          data: skillId,
-        };
-      } else {
-        return {
-          data: {},
-        };
-      }
-    });
 
     await act(async () => {
       await dispatcher.addRemoteSkillToBotProject('https://test.net/api/manifest/test', 'remote');
     });
 
-    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/skill/${skillId}`);
-    mockImplementation.mockClear();
+    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/dialogs/emptybot-1`);
   });
 
   it('should be able to add a remote skill to Botproject', async () => {
-    const skillId = '1234.1123213';
     const mockImplementation = (httpClient.get as jest.Mock).mockImplementation((url: string) => {
       if (endsWith(url, '/projects/generateProjectId')) {
         return {
-          data: skillId,
+          data: '1234.1123213',
         };
       } else {
         return {
@@ -411,7 +400,7 @@ describe('Project dispatcher', () => {
     expect(renderedComponent.current.botStates.oneNoteSync.location).toBe(
       'https://test-dev.azurewebsites.net/manifests/onenote-2-1-preview-1-manifest.json'
     );
-    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/skill/${skillId}`);
+    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/dialogs/emptybot-1`);
     mockImplementation.mockClear();
   });
 
@@ -452,7 +441,6 @@ describe('Project dispatcher', () => {
   });
 
   it('should be able to add a new skill to Botproject', async () => {
-    const skillId = projectId;
     await act(async () => {
       (httpClient.put as jest.Mock).mockResolvedValueOnce({
         data: mockProjectResponse,
@@ -473,12 +461,13 @@ describe('Project dispatcher', () => {
         location: '/Users/tester/Desktop/samples',
         templateId: 'InterruptionSample',
         locale: 'us-en',
+        qnaKbUrls: [],
       });
     });
 
     expect(renderedComponent.current.botStates.newBot).toBeDefined();
     expect(renderedComponent.current.botStates.newBot.botDisplayName).toBe('new-bot');
-    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/skill/${skillId}/dialogs/emptybot-1`);
+    expect(navigateTo).toHaveBeenLastCalledWith(`/bot/${projectId}/dialogs/emptybot-1`);
   });
 
   it('should be able to open a project and its skills in Bot project file', async (done) => {
@@ -520,40 +509,4 @@ describe('Project dispatcher', () => {
       done();
     });
   });
-
-  it('should migrate skills from existing bots and add them to botproject file', async () => {
-    const newProjectDataClone = cloneDeep(mockProjectResponse);
-    newProjectDataClone.botName = 'new-bot';
-    newProjectDataClone.settings = {
-      ...newProjectDataClone.settings,
-      skill: {
-        'one-note-sync': {
-          endpointUrl: 'https://azure-webservice.net/oneNoteSync/api/messages',
-          manifestUrl: 'https://azure-webservice.net/oneNoteSnyc-manifest.json',
-          msAppId: '123-234-234',
-        },
-      },
-    };
-
-    await act(async () => {
-      (httpClient.put as jest.Mock).mockResolvedValueOnce({
-        data: newProjectDataClone,
-      });
-      await dispatcher.openProject('../test/empty-bot', 'default');
-    });
-
-    expect(renderedComponent.current.settings.skill).toEqual({
-      oneNoteSync: {
-        endpointUrl: 'https://azure-webservice.net/oneNoteSync/api/messages',
-        msAppId: '123-234-234',
-      },
-    });
-
-    expect(renderedComponent.current.botProjectFile.content.skills).toEqual({
-      oneNoteSync: {
-        manifest: 'https://azure-webservice.net/oneNoteSnyc-manifest.json',
-        remote: true,
-      },
-    });
-  });
 });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/setting.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/setting.test.tsx
index f4587e120..596b22a2f 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/setting.test.tsx
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/setting.test.tsx
@@ -5,10 +5,11 @@ import { useRecoilValue } from 'recoil';
 import { act } from '@botframework-composer/test-utils/lib/hooks';
 
 import { renderRecoilHook } from '../../../../__tests__/testUtils';
-import { settingsState, currentProjectIdState } from '../../atoms';
+import { settingsState, currentProjectIdState, skillsState } from '../../atoms';
 import { dispatcherState } from '../../../recoilModel/DispatcherWrapper';
 import { Dispatcher } from '..';
 import { settingsDispatcher } from '../setting';
+import httpClient from '../../../utils/httpUtil';
 
 jest.mock('../../../utils/httpUtil');
 
@@ -70,6 +71,7 @@ const settings = {
     maxUtteranceAllowed: 15000,
   },
   skill: {},
+  customizedFunctions: [],
 };
 
 describe('setting dispatcher', () => {
@@ -77,9 +79,11 @@ describe('setting dispatcher', () => {
   beforeEach(() => {
     const useRecoilTestHook = () => {
       const settings = useRecoilValue(settingsState(projectId));
+      const skills = useRecoilValue(skillsState(projectId));
       const currentDispatcher = useRecoilValue(dispatcherState);
       return {
         settings,
+        skills,
         currentDispatcher,
       };
     };
@@ -88,6 +92,7 @@ describe('setting dispatcher', () => {
       states: [
         { recoilState: settingsState(projectId), initialValue: settings },
         { recoilState: currentProjectIdState, initialValue: projectId },
+        { recoilState: skillsState(projectId), initialValue: [] },
       ],
       dispatcher: {
         recoilState: dispatcherState,
@@ -156,4 +161,38 @@ describe('setting dispatcher', () => {
     });
     expect(renderedComponent.current.settings.runtime.customRuntime).toBeTruthy();
   });
+
+  it('should update skills state', async () => {
+    (httpClient.get as jest.Mock).mockResolvedValue({
+      data: { description: 'description', endpoints: [{ endpointUrl: 'https://test' }] },
+    });
+
+    await act(async () => {
+      await dispatcher.setSettings(projectId, {
+        skill: {
+          foo: {
+            msAppId: '00000000-0000',
+            endpointUrl: 'https://skill-manifest/api/messages',
+            name: 'foo',
+            manifestUrl: 'https://skill-manifest',
+          },
+        },
+      } as any);
+    });
+
+    expect(renderedComponent.current.skills).toEqual(
+      expect.arrayContaining([
+        {
+          id: 'foo',
+          name: 'foo',
+          manifestUrl: 'https://skill-manifest',
+          msAppId: '00000000-0000',
+          endpointUrl: 'https://skill-manifest/api/messages',
+          description: 'description',
+          endpoints: expect.any(Array),
+          content: expect.any(Object),
+        },
+      ])
+    );
+  });
 });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/skill.test.ts b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/skill.test.ts
index 7261af0c3..ffeced8fc 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/skill.test.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/skill.test.ts
@@ -1,29 +1,23 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { selectorFamily, useRecoilState, useRecoilValue } from 'recoil';
+import { useRecoilValue } from 'recoil';
 import { act } from '@botframework-composer/test-utils/lib/hooks';
+import { Skill } from '@bfc/shared';
 
 import { skillDispatcher } from '../skill';
-import { botProjectFileDispatcher } from '../botProjectFile';
 import { renderRecoilHook } from '../../../../__tests__/testUtils';
 import {
   skillManifestsState,
   onAddSkillDialogCompleteState,
+  skillsState,
   settingsState,
   showAddSkillDialogModalState,
-  botProjectFileState,
-  botNameIdentifierState,
-  locationState,
-  projectMetaDataState,
-  botDisplayNameState,
+  displaySkillManifestState,
 } from '../../atoms/botState';
 import { dispatcherState } from '../../DispatcherWrapper';
-import { botEndpointsState, botProjectIdsState, currentProjectIdState, displaySkillManifestState } from '../../atoms';
+import { currentProjectIdState } from '../../atoms';
 import { Dispatcher } from '..';
-import { skillsStateSelector } from '../../selectors';
-
-import mockBotProjectFileData from './mocks/mockBotProjectFile.json';
 
 jest.mock('../../../utils/httpUtil', () => {
   return {
@@ -39,28 +33,23 @@ jest.mock('../../../utils/httpUtil', () => {
 
 const mockDialogComplete = jest.fn();
 const projectId = '42345.23432';
-const skillIds = ['1234.123', '234.234'];
+
+const makeTestSkill: (number) => Skill = (n) => ({
+  id: 'id' + n,
+  manifestUrl: 'url' + n,
+  name: 'skill' + n,
+  description: 'test skill' + n,
+  endpointUrl: 'url',
+  endpoints: [{ test: 'foo' }],
+  msAppId: 'ID',
+  content: {
+    description: 'test skill' + n,
+    endpoints: [{ test: 'foo' }],
+  },
+});
 
 describe('skill dispatcher', () => {
   let renderedComponent, dispatcher: Dispatcher;
-
-  const skillsDataSelector = selectorFamily({
-    key: 'skillSelector-skill',
-    get: (skillId: string) => ({ get }) => {
-      return {
-        skillNameIdentifier: get(botNameIdentifierState(skillId)),
-        location: get(locationState(skillId)),
-      };
-    },
-    set: (skillId: string) => ({ set }, stateUpdater: any) => {
-      const { botNameIdentifier, location, displayName, settings } = stateUpdater;
-      set(botNameIdentifierState(skillId), botNameIdentifier);
-      set(locationState(skillId), location);
-      set(settingsState(skillId), settings);
-      set(botDisplayNameState(skillId), displayName);
-    },
-  });
-
   beforeEach(() => {
     mockDialogComplete.mockClear();
 
@@ -68,33 +57,22 @@ describe('skill dispatcher', () => {
       const projectId = useRecoilValue(currentProjectIdState);
       const skillManifests = useRecoilValue(skillManifestsState(projectId));
       const onAddSkillDialogComplete = useRecoilValue(onAddSkillDialogCompleteState(projectId));
+      const skills: Skill[] = useRecoilValue(skillsState(projectId));
       const settings = useRecoilValue(settingsState(projectId));
       const showAddSkillDialogModal = useRecoilValue(showAddSkillDialogModalState(projectId));
-      const displaySkillManifest = useRecoilValue(displaySkillManifestState);
-      const skills = useRecoilValue(skillsStateSelector);
-      const [botEndpoints, setBotEndpoints] = useRecoilState(botEndpointsState);
-      const currentDispatcher = useRecoilValue(dispatcherState);
+      const displaySkillManifest = useRecoilValue(displaySkillManifestState(projectId));
 
-      const [todoSkillData, setTodoSkillData] = useRecoilState(skillsDataSelector(skillIds[0]));
-      const [googleKeepData, setGoogleKeepData] = useRecoilState(skillsDataSelector(skillIds[1]));
+      const currentDispatcher = useRecoilValue(dispatcherState);
 
       return {
         projectId,
         skillManifests,
         onAddSkillDialogComplete,
+        skills,
         settings,
         showAddSkillDialogModal,
         displaySkillManifest,
         currentDispatcher,
-        skills,
-        botEndpoints,
-        todoSkillData,
-        googleKeepData,
-        setters: {
-          setBotEndpoints,
-          setTodoSkillData,
-          setGoogleKeepData,
-        },
       };
     };
 
@@ -108,30 +86,19 @@ describe('skill dispatcher', () => {
           ],
         },
         { recoilState: onAddSkillDialogCompleteState(projectId), initialValue: { func: undefined } },
+        {
+          recoilState: skillsState(projectId),
+          initialValue: [makeTestSkill(1), makeTestSkill(2)],
+        },
         { recoilState: settingsState(projectId), initialValue: {} },
         { recoilState: showAddSkillDialogModalState(projectId), initialValue: false },
-        { recoilState: displaySkillManifestState, initialValue: undefined },
+        { recoilState: displaySkillManifestState(projectId), initialValue: undefined },
         { recoilState: currentProjectIdState, initialValue: projectId },
-        { recoilState: botProjectIdsState, initialValue: [projectId, ...skillIds] },
-        { recoilState: settingsState(projectId), initialValue: {} },
-        {
-          recoilState: botProjectFileState(projectId),
-          initialValue: {
-            content: mockBotProjectFileData,
-          },
-        },
-        {
-          recoilState: projectMetaDataState(projectId),
-          initialValue: {
-            isRootBot: true,
-          },
-        },
       ],
       dispatcher: {
         recoilState: dispatcherState,
         initialValue: {
           skillDispatcher,
-          botProjectFileDispatcher,
         },
       },
     });
@@ -168,56 +135,72 @@ describe('skill dispatcher', () => {
     ]);
   });
 
-  it('displayManifestModal', async () => {
+  it('addsSkill', async () => {
     await act(async () => {
-      dispatcher.displayManifestModal('foo');
+      dispatcher.addSkill(projectId, makeTestSkill(3));
     });
-    expect(renderedComponent.current.displaySkillManifest).toEqual('foo');
+    expect(renderedComponent.current.showAddSkillDialogModal).toBe(false);
+    expect(renderedComponent.current.onAddSkillDialogComplete.func).toBeUndefined();
+    expect(renderedComponent.current.skills).toContainEqual(makeTestSkill(3));
   });
 
-  it('dismissManifestModal', async () => {
+  it('updateSkill', async () => {
     await act(async () => {
-      dispatcher.dismissManifestModal();
+      dispatcher.updateSkill(projectId, 'id1', {
+        msAppId: 'test',
+        manifestUrl: 'test',
+        endpointUrl: 'test',
+        name: 'test',
+      });
     });
-    expect(renderedComponent.current.displaySkillManifest).toBeUndefined();
+
+    expect(renderedComponent.current.skills[0]).toEqual(
+      expect.objectContaining({
+        id: 'id1',
+        content: {},
+        name: 'test',
+        msAppId: 'test',
+        manifestUrl: 'test',
+        endpointUrl: 'test',
+        endpoints: [],
+      })
+    );
   });
 
-  fit('should update setting.skill on local skills with "Composer Local" chosen as endpoint', async () => {
+  it('removeSkill', async () => {
     await act(async () => {
-      const botEndpoints = {};
-      botEndpoints[`${skillIds[0]}`] = 'http://localhost:3978/api/messages';
-      botEndpoints[`${skillIds[1]}`] = 'http://localhost:3979/api/messages';
-      renderedComponent.current.setters.setBotEndpoints(botEndpoints);
-      renderedComponent.current.setters.setTodoSkillData({
-        location: '/Users/tester/Desktop/LoadedBotProject/Todo-Skill',
-        botNameIdentifier: 'todoSkill',
-        settings: {
-          MicrosoftAppId: 'abc-defg-3431-sdfd',
-        },
-        displayName: 'todo-skill',
-      });
+      dispatcher.removeSkill(projectId, makeTestSkill(1).id);
+    });
+    expect(renderedComponent.current.skills).not.toContain(makeTestSkill(1));
+  });
 
-      renderedComponent.current.setters.setGoogleKeepData({
-        location: '/Users/tester/Desktop/LoadedBotProject/GoogleKeep-Skill',
-        botNameIdentifier: 'googleKeepSync',
-        settings: {
-          MicrosoftAppId: '1231-1231-1231-1231',
-        },
-        displayName: 'google-keep',
-      });
+  it('addSkillDialogBegin', async () => {
+    await act(async () => {
+      dispatcher.addSkillDialogBegin(mockDialogComplete, projectId);
     });
+    expect(renderedComponent.current.showAddSkillDialogModal).toBe(true);
+    expect(renderedComponent.current.onAddSkillDialogComplete.func).toBe(mockDialogComplete);
+  });
 
+  it('addSkillDialogCancel', async () => {
     await act(async () => {
-      dispatcher.updateSettingsForSkillsWithoutManifest();
+      dispatcher.addSkillDialogCancel(projectId);
     });
-    // Only skills with no endpoint name in BotProject file use the Local Composer endpoint
-    expect(renderedComponent.current.settings).toEqual({
-      skill: {
-        googleKeepSync: {
-          endpointUrl: 'http://localhost:3979/api/messages',
-          msAppId: '1231-1231-1231-1231',
-        },
-      },
+    expect(renderedComponent.current.showAddSkillDialogModal).toBe(false);
+    expect(renderedComponent.current.onAddSkillDialogComplete.func).toBe(undefined);
+  });
+
+  it('displayManifestModal', async () => {
+    await act(async () => {
+      dispatcher.displayManifestModal('foo', projectId);
+    });
+    expect(renderedComponent.current.displaySkillManifest).toEqual('foo');
+  });
+
+  it('dismissManifestModal', async () => {
+    await act(async () => {
+      dispatcher.dismissManifestModal(projectId);
     });
+    expect(renderedComponent.current.displaySkillManifest).toBeUndefined();
   });
 });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/trigger.test.tsx b/Composer/packages/client/src/recoilModel/dispatchers/__tests__/trigger.test.tsx
deleted file mode 100644
index a6257c6a3..000000000
--- a/Composer/packages/client/src/recoilModel/dispatchers/__tests__/trigger.test.tsx
+++ /dev/null
@@ -1,216 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { useRecoilValue } from 'recoil';
-import { act } from '@botframework-composer/test-utils/lib/hooks';
-
-import { dialogsDispatcher } from '../dialogs';
-import { triggerDispatcher } from '../trigger';
-import { lgDispatcher } from '../lg';
-import { luDispatcher } from '../lu';
-import { navigationDispatcher } from '../navigation';
-import { renderRecoilHook } from '../../../../__tests__/testUtils';
-import {
-  lgFilesState,
-  luFilesState,
-  schemasState,
-  dialogSchemasState,
-  actionsSeedState,
-  qnaFilesState,
-} from '../../atoms';
-import { dialogsSelectorFamily } from '../../selectors';
-import { dispatcherState } from '../../../recoilModel/DispatcherWrapper';
-import { Dispatcher } from '..';
-
-const projectId = '42345.23432';
-
-const QnATriggerData1 = {
-  $kind: 'Microsoft.OnQnAMatch',
-  errors: { $kind: '', intent: '', event: '', triggerPhrases: '', regEx: '', activity: '' },
-  event: '',
-  intent: '',
-  regEx: '',
-  triggerPhrases: '',
-};
-
-const intentTriggerData1 = {
-  $kind: 'Microsoft.OnIntent',
-  errors: { $kind: '', intent: '', event: '', triggerPhrases: '', regEx: '', activity: '' },
-  event: '',
-  intent: '',
-  regEx: '',
-  triggerPhrases: '',
-};
-
-const chooseIntentTriggerData1 = {
-  $kind: 'Microsoft.OnChooseIntent',
-  errors: { $kind: '', intent: '', event: '', triggerPhrases: '', regEx: '', activity: '' },
-  event: '',
-  intent: '',
-  regEx: '',
-  triggerPhrases: '',
-};
-
-jest.mock('@bfc/indexers', () => {
-  return {
-    dialogIndexer: {
-      parse: (id, content) => ({
-        id,
-        content,
-      }),
-    },
-    validateDialog: () => [],
-    autofixReferInDialog: (_, content) => content,
-    lgIndexer: {
-      parse: (content, id) => ({
-        id,
-        content,
-      }),
-    },
-    luIndexer: {
-      parse: (content, id) => ({
-        id,
-        content,
-      }),
-    },
-    qnaIndexer: {
-      parse: (id, content) => ({
-        id,
-        content,
-      }),
-    },
-    lgUtil: {
-      parse: (id, content) => ({
-        id,
-        content,
-      }),
-    },
-    luUtil: {
-      parse: (id, content) => ({
-        id,
-        content,
-      }),
-    },
-    qnaUtil: {
-      parse: (id, content) => ({
-        id,
-        content,
-      }),
-    },
-  };
-});
-
-describe('trigger dispatcher', () => {
-  let renderedComponent, dispatcher: Dispatcher;
-  beforeEach(() => {
-    const useRecoilTestHook = () => {
-      const dialogs = useRecoilValue(dialogsSelectorFamily(projectId));
-      const dialogSchemas = useRecoilValue(dialogSchemasState(projectId));
-      const luFiles = useRecoilValue(luFilesState(projectId));
-      const lgFiles = useRecoilValue(lgFilesState(projectId));
-      const actionsSeed = useRecoilValue(actionsSeedState(projectId));
-      const qnaFiles = useRecoilValue(qnaFilesState(projectId));
-      const currentDispatcher = useRecoilValue(dispatcherState);
-
-      return {
-        dialogs,
-        dialogSchemas,
-        luFiles,
-        lgFiles,
-        currentDispatcher,
-        actionsSeed,
-        qnaFiles,
-      };
-    };
-
-    const { result } = renderRecoilHook(useRecoilTestHook, {
-      states: [
-        {
-          recoilState: dialogsSelectorFamily(projectId),
-          initialValue: [
-            { id: '1', content: {} },
-            { id: '2', content: {} },
-          ],
-        },
-        { recoilState: dialogSchemasState(projectId), initialValue: [{ id: '1' }, { id: '2' }] },
-        {
-          recoilState: lgFilesState(projectId),
-          initialValue: [
-            { id: '1.en-us', content: '' },
-            { id: '2.en-us', content: '' },
-          ],
-        },
-        {
-          recoilState: luFilesState(projectId),
-          initialValue: [
-            { id: '1.en-us', content: '' },
-            { id: '2.en-us', content: '' },
-          ],
-        },
-        {
-          recoilState: qnaFilesState(projectId),
-          initialValue: [
-            { id: '1.en-us', content: '' },
-            { id: '2.en-us', content: '' },
-          ],
-        },
-        { recoilState: schemasState(projectId), initialValue: { sdk: { content: {} } } },
-      ],
-      dispatcher: {
-        recoilState: dispatcherState,
-        initialValue: {
-          dialogsDispatcher,
-          triggerDispatcher,
-          lgDispatcher,
-          luDispatcher,
-          navigationDispatcher,
-        },
-      },
-    });
-    renderedComponent = result;
-    dispatcher = renderedComponent.current.currentDispatcher;
-  });
-
-  it('create a qna intent trigger', async () => {
-    const dialogId = '1';
-    await act(async () => {
-      await dispatcher.createTrigger(projectId, dialogId, QnATriggerData1);
-    });
-    const updatedDialog = renderedComponent.current.dialogs.find(({ id }) => id === dialogId);
-    expect(updatedDialog.content.triggers.length).toEqual(1);
-  });
-
-  it('create a choose intent trigger', async () => {
-    const dialogId = '1';
-    await act(async () => {
-      await dispatcher.createTrigger(projectId, dialogId, chooseIntentTriggerData1);
-    });
-    const updatedDialog = renderedComponent.current.dialogs.find(({ id }) => id === dialogId);
-    expect(updatedDialog.content.triggers.length).toEqual(1);
-  });
-
-  it('create a intent trigger', async () => {
-    const dialogId = '1';
-    await act(async () => {
-      await dispatcher.createTrigger(projectId, dialogId, intentTriggerData1);
-    });
-    const updatedDialog = renderedComponent.current.dialogs.find(({ id }) => id === dialogId);
-    expect(updatedDialog.content.triggers.length).toEqual(1);
-  });
-
-  it('delete a trigger', async () => {
-    const dialogId = '1';
-    await act(async () => {
-      await dispatcher.createTrigger(projectId, dialogId, QnATriggerData1);
-    });
-    const updatedDialog = renderedComponent.current.dialogs.find(({ id }) => id === dialogId);
-    expect(updatedDialog.content.triggers.length).toEqual(1);
-
-    const targetTrigger = updatedDialog.content.triggers[0];
-    await act(async () => {
-      await dispatcher.deleteTrigger(projectId, dialogId, targetTrigger);
-    });
-    const updatedDialog2 = renderedComponent.current.dialogs.find(({ id }) => id === dialogId);
-    expect(updatedDialog2.content.triggers.length).toEqual(1);
-  });
-});
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/application.ts b/Composer/packages/client/src/recoilModel/dispatchers/application.ts
index bca41a2ef..aab3bf32b 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/application.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/application.ts
@@ -10,11 +10,11 @@ import {
   announcementState,
   onboardingState,
   creationFlowStatusState,
+  currentModeState,
   PageMode,
-  creationFlowTypeState,
   pageElementState,
 } from '../atoms/appState';
-import { AppUpdaterStatus, CreationFlowStatus, CreationFlowType } from '../../constants';
+import { AppUpdaterStatus, CreationFlowStatus } from '../../constants';
 import OnboardingState from '../../utils/onboardingStorage';
 import { StateError, AppUpdateState } from '../../recoilModel/types';
 
@@ -76,6 +76,10 @@ export const applicationDispatcher = () => {
     set(announcementState, message);
   });
 
+  const setCurrentPageMode = useRecoilCallback(({ set }: CallbackInterface) => (mode: PageMode) => {
+    set(currentModeState, mode);
+  });
+
   const setPageElementState = useRecoilCallback(({ set }: CallbackInterface) => (mode: PageMode, settings: {}) => {
     set(pageElementState, (currentElementState) => ({
       ...currentElementState,
@@ -107,10 +111,6 @@ export const applicationDispatcher = () => {
     set(creationFlowStatusState, status);
   });
 
-  const setCreationFlowType = useRecoilCallback(({ set }: CallbackInterface) => (type: CreationFlowType) => {
-    set(creationFlowTypeState, type);
-  });
-
   const setApplicationLevelError = useRecoilCallback(
     (callbackHelpers: CallbackInterface) => (errorObj: StateError | undefined) => {
       setError(callbackHelpers, errorObj);
@@ -127,7 +127,7 @@ export const applicationDispatcher = () => {
     onboardingAddCoachMarkRef,
     setCreationFlowStatus,
     setApplicationLevelError,
-    setCreationFlowType,
+    setCurrentPageMode,
     setPageElementState,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/botProjectFile.ts b/Composer/packages/client/src/recoilModel/dispatchers/botProjectFile.ts
index 1df131509..cb0e937d8 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/botProjectFile.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/botProjectFile.ts
@@ -6,13 +6,10 @@ import path from 'path';
 
 import { CallbackInterface, useRecoilCallback } from 'recoil';
 import { produce } from 'immer';
-import { BotProjectFile, BotProjectSpaceSkill, Skill } from '@bfc/shared';
+import { BotProjectSpaceSkill } from '@bfc/shared';
 
-import { botNameIdentifierState, botProjectFileState, locationState, settingsState } from '../atoms';
+import { botNameIdentifierState, botProjectFileState, locationState } from '../atoms';
 import { rootBotProjectIdSelector } from '../selectors';
-import { dispatcherState } from '../DispatcherWrapper';
-
-import { setRootBotSettingState } from './setting';
 
 export const botProjectFileDispatcher = () => {
   const addLocalSkill = useRecoilCallback(({ set, snapshot }: CallbackInterface) => async (skillId: string) => {
@@ -59,134 +56,24 @@ export const botProjectFileDispatcher = () => {
     }
   );
 
-  const removeSkill = useRecoilCallback((callbackHelpers: CallbackInterface) => async (skillId: string) => {
-    const { set, snapshot } = callbackHelpers;
+  const removeSkill = useRecoilCallback(({ set, snapshot }: CallbackInterface) => async (skillId: string) => {
     const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
     if (!rootBotProjectId) {
       return;
     }
 
-    const botNameIdentifier = await snapshot.getPromise(botNameIdentifierState(skillId));
+    const botName = await snapshot.getPromise(botNameIdentifierState(skillId));
     set(botProjectFileState(rootBotProjectId), (current) => {
       const result = produce(current, (draftState) => {
-        delete draftState.content.skills[botNameIdentifier];
+        delete draftState.content.skills[botName];
       });
       return result;
     });
-
-    const rootBotSettings = await snapshot.getPromise(settingsState(rootBotProjectId));
-    if (rootBotSettings.skill) {
-      const updatedSettings = produce(rootBotSettings, (draftState) => {
-        if (draftState.skill && draftState.skill[botNameIdentifier]) {
-          delete draftState.skill[botNameIdentifier];
-        }
-      });
-      setRootBotSettingState(callbackHelpers, rootBotProjectId, updatedSettings);
-    }
   });
 
-  const updateManifest = useRecoilCallback(
-    ({ set, snapshot }: CallbackInterface) => async (skillProjectId: string, manifestId?: string) => {
-      const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-      if (!rootBotProjectId) {
-        return;
-      }
-
-      const skillNameIdentifier = await snapshot.getPromise(botNameIdentifierState(skillProjectId));
-      set(botProjectFileState(rootBotProjectId), (current: BotProjectFile) => {
-        const result = produce(current, (draftState) => {
-          if (!manifestId) {
-            delete draftState.content.skills[skillNameIdentifier].manifest;
-          } else {
-            draftState.content.skills[skillNameIdentifier] = {
-              ...draftState.content.skills[skillNameIdentifier],
-              manifest: manifestId,
-            };
-          }
-        });
-        return result;
-      });
-    }
-  );
-
-  const updateSkillsData = useRecoilCallback(
-    (callbackHelpers: CallbackInterface) => async (
-      skillNameIdentifier: string,
-      skillsData: Skill,
-      selectedEndpointIndex: number
-    ) => {
-      const { set, snapshot } = callbackHelpers;
-      const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-      if (!rootBotProjectId) {
-        return;
-      }
-
-      const settings = await snapshot.getPromise(settingsState(rootBotProjectId));
-      const dispatcher = await snapshot.getPromise(dispatcherState);
-
-      let msAppId = '',
-        endpointUrl = '',
-        endpointName = '';
-
-      if (selectedEndpointIndex !== -1 && skillsData.manifest) {
-        const data = skillsData.manifest?.endpoints[selectedEndpointIndex];
-        msAppId = data.msAppId;
-        endpointUrl = data.endpointUrl;
-        endpointName = data.name;
-
-        set(botProjectFileState(rootBotProjectId), (current) => {
-          const result = produce(current, (draftState) => {
-            draftState.content.skills[skillNameIdentifier].endpointName = endpointName;
-          });
-          return result;
-        });
-      } else {
-        set(botProjectFileState(rootBotProjectId), (current) => {
-          const result = produce(current, (draftState) => {
-            delete draftState.content.skills[skillNameIdentifier].endpointName;
-          });
-          return result;
-        });
-      }
-      if (settings.skill) {
-        dispatcher.setSettings(
-          rootBotProjectId,
-          produce(settings, (draftSettings) => {
-            draftSettings.skill = {
-              ...settings.skill,
-              [skillNameIdentifier]: {
-                endpointUrl,
-                msAppId,
-              },
-            };
-          })
-        );
-      }
-    }
-  );
-
-  const updateEndpointName = useRecoilCallback(
-    ({ set, snapshot }: CallbackInterface) => async (skillNameIdentifier: string, endpointName: string) => {
-      const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-      if (!rootBotProjectId) {
-        return;
-      }
-
-      set(botProjectFileState(rootBotProjectId), (current) => {
-        const result = produce(current, (draftState) => {
-          draftState.content.skills[skillNameIdentifier].endpointName = endpointName;
-        });
-        return result;
-      });
-    }
-  );
-
   return {
     addLocalSkillToBotProjectFile: addLocalSkill,
     removeSkillFromBotProjectFile: removeSkill,
     addRemoteSkillToBotProjectFile: addRemoteSkill,
-    updateSkillsDataInBotProjectFile: updateSkillsData,
-    updateManifestInBotProjectFile: updateManifest,
-    updateEndpointNameInBotProjectFile: updateEndpointName,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/builder.ts b/Composer/packages/client/src/recoilModel/dispatchers/builder.ts
index 4f084baf3..3c9f7888b 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/builder.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/builder.ts
@@ -10,7 +10,7 @@ import { Text, BotStatus } from '../../constants';
 import httpClient from '../../utils/httpUtil';
 import luFileStatusStorage from '../../utils/luFileStatusStorage';
 import qnaFileStatusStorage from '../../utils/qnaFileStatusStorage';
-import { luFilesState, qnaFilesState, botStatusState, botRuntimeErrorState } from '../atoms';
+import { luFilesState, qnaFilesState, botStatusState, botLoadErrorState } from '../atoms';
 import { dialogsSelectorFamily } from '../selectors';
 
 const checkEmptyQuestionOrAnswerInQnAFile = (sections) => {
@@ -20,9 +20,9 @@ const checkEmptyQuestionOrAnswerInQnAFile = (sections) => {
 export const builderDispatcher = () => {
   const build = useRecoilCallback(
     ({ set, snapshot }: CallbackInterface) => async (
-      projectId: string,
       luisConfig: ILuisConfig,
-      qnaConfig: IQnAConfig
+      qnaConfig: IQnAConfig,
+      projectId: string
     ) => {
       const dialogs = await snapshot.getPromise(dialogsSelectorFamily(projectId));
       const luFiles = await snapshot.getPromise(luFilesState(projectId));
@@ -42,7 +42,7 @@ export const builderDispatcher = () => {
         { title: Text.LUISDEPLOYFAILURE, message: '' }
       );
       if (errorMsg.message) {
-        set(botRuntimeErrorState(projectId), errorMsg);
+        set(botLoadErrorState(projectId), errorMsg);
         set(botStatusState(projectId), BotStatus.failed);
         return;
       }
@@ -59,7 +59,7 @@ export const builderDispatcher = () => {
         set(botStatusState(projectId), BotStatus.published);
       } catch (err) {
         set(botStatusState(projectId), BotStatus.failed);
-        set(botRuntimeErrorState(projectId), {
+        set(botLoadErrorState(projectId), {
           title: Text.LUISDEPLOYFAILURE,
           message: err.response?.data?.message || err.message,
         });
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/dialogs.ts b/Composer/packages/client/src/recoilModel/dispatchers/dialogs.ts
index 60fcd130a..e57a273d8 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/dialogs.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/dialogs.ts
@@ -10,11 +10,12 @@ import {
   luFilesState,
   dialogIdsState,
   schemasState,
+  settingsState,
   onCreateDialogCompleteState,
   actionsSeedState,
   showCreateDialogModalState,
   dialogState,
-} from '../atoms';
+} from '../atoms/botState';
 import { dispatcherState } from '../DispatcherWrapper';
 
 import { createLgFileState, removeLgFileState } from './lg';
@@ -67,7 +68,7 @@ export const dialogsDispatcher = () => {
       const { set } = callbackHelpers;
       set(actionsSeedState(projectId), actions);
       set(onCreateDialogCompleteState(projectId), { func: onComplete });
-      set(showCreateDialogModalState, true);
+      set(showCreateDialogModalState(projectId), true);
     }
   );
 
@@ -75,7 +76,7 @@ export const dialogsDispatcher = () => {
     const { set } = callbackHelpers;
     set(actionsSeedState(projectId), []);
     set(onCreateDialogCompleteState(projectId), { func: undefined });
-    set(showCreateDialogModalState, false);
+    set(showCreateDialogModalState(projectId), false);
   });
 
   const createDialog = useRecoilCallback((callbackHelpers: CallbackInterface) => async ({ id, content, projectId }) => {
@@ -84,8 +85,9 @@ export const dialogsDispatcher = () => {
     const schemas = await snapshot.getPromise(schemasState(projectId));
     const lgFiles = await snapshot.getPromise(lgFilesState(projectId));
     const luFiles = await snapshot.getPromise(luFilesState(projectId));
+    const settings = await snapshot.getPromise(settingsState(projectId));
     const dialog = { isRoot: false, displayName: id, ...dialogIndexer.parse(id, fixedContent) };
-    dialog.diagnostics = validateDialog(dialog, schemas.sdk.content, lgFiles, luFiles);
+    dialog.diagnostics = validateDialog(dialog, schemas.sdk.content, settings, lgFiles, luFiles);
     if (typeof dialog.content === 'object') {
       dialog.content.id = id;
     }
@@ -99,7 +101,7 @@ export const dialogsDispatcher = () => {
     set(dialogState({ projectId, dialogId: dialog.id }), dialog);
     set(dialogIdsState(projectId), (dialogsIds) => [...dialogsIds, dialog.id]);
     set(actionsSeedState(projectId), []);
-    set(showCreateDialogModalState, false);
+    set(showCreateDialogModalState(projectId), false);
     const onComplete = (await snapshot.getPromise(onCreateDialogCompleteState(projectId))).func;
     if (typeof onComplete === 'function') {
       setTimeout(() => onComplete(id));
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/editor.ts b/Composer/packages/client/src/recoilModel/dispatchers/editor.ts
index d32193dee..1f278f23e 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/editor.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/editor.ts
@@ -7,11 +7,9 @@ import { CallbackInterface, useRecoilCallback } from 'recoil';
 import { clipboardActionsState, visualEditorSelectionState } from '../atoms/appState';
 
 export const editorDispatcher = () => {
-  const setVisualEditorClipboard = useRecoilCallback(
-    ({ set }: CallbackInterface) => (clipboardActions: any[], projectId: string) => {
-      set(clipboardActionsState(projectId), [...clipboardActions]);
-    }
-  );
+  const setVisualEditorClipboard = useRecoilCallback(({ set }: CallbackInterface) => (clipboardActions: any[]) => {
+    set(clipboardActionsState, [...clipboardActions]);
+  });
 
   const setVisualEditorSelection = useRecoilCallback(({ set }: CallbackInterface) => (selection: string[]) => {
     set(visualEditorSelectionState, [...selection]);
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/index.ts b/Composer/packages/client/src/recoilModel/dispatchers/index.ts
index 55fe4dbbd..02109f832 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/index.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/index.ts
@@ -11,7 +11,6 @@ import { exportDispatcher } from './export';
 import { lgDispatcher } from './lg';
 import { luDispatcher } from './lu';
 import { qnaDispatcher } from './qna';
-import { triggerDispatcher } from './trigger';
 import { builderDispatcher } from './builder';
 import { navigationDispatcher } from './navigation';
 import { publisherDispatcher } from './publisher';
@@ -39,7 +38,6 @@ const createDispatchers = () => {
     ...lgDispatcher(),
     ...luDispatcher(),
     ...qnaDispatcher(),
-    ...triggerDispatcher(),
     ...builderDispatcher(),
     ...navigationDispatcher(),
     ...publisherDispatcher(),
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/lg.ts b/Composer/packages/client/src/recoilModel/dispatchers/lg.ts
index 04a0fa759..72238d7ba 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/lg.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/lg.ts
@@ -7,6 +7,7 @@ import differenceBy from 'lodash/differenceBy';
 import formatMessage from 'format-message';
 
 import { getBaseName, getExtension } from '../../utils/fileUtil';
+import { dispatcherState } from '../DispatcherWrapper';
 
 import { setError } from './shared';
 import LgWorker from './../parsers/lgWorker';
@@ -64,20 +65,10 @@ export const updateLgFileState = async (projectId: string, lgFiles: LgFile[], up
     }
   }
 
-  const newLgFiles = lgFiles.map((file) => {
+  return lgFiles.map((file) => {
     const changedFile = changes.find(({ id }) => id === file.id);
     return changedFile ? changedFile : file;
   });
-
-  if (dialogId !== 'common') return newLgFiles;
-
-  // if changes happen on common.lg, re-parse all.
-  const reparsedNewLgFiles: LgFile[] = [];
-  for (const file of newLgFiles) {
-    const reparsedFile = (await LgWorker.parse(projectId, file.id, file.content, newLgFiles)) as LgFile;
-    reparsedNewLgFiles.push(reparsedFile);
-  }
-  return reparsedNewLgFiles;
 };
 
 // when do create, passed id do not carried with locale
@@ -177,6 +168,11 @@ export const lgDispatcher = () => {
         const updatedFile = (await LgWorker.parse(projectId, id, content, lgFiles)) as LgFile;
         const updatedFiles = await updateLgFileState(projectId, lgFiles, updatedFile);
         set(lgFilesState(projectId), updatedFiles);
+        // if changes happen on common.lg, async re-parse all.
+        if (getBaseName(id) === 'common') {
+          const { reparseAllLgFiles } = await snapshot.getPromise(dispatcherState);
+          reparseAllLgFiles({ projectId });
+        }
       } catch (error) {
         setError(callbackHelpers, error);
       }
@@ -208,8 +204,6 @@ export const lgDispatcher = () => {
         return;
       }
 
-      let newLgFiles: LgFile[] = [];
-
       try {
         if (template.name !== templateName) {
           // name change, need update cross multi locale file.
@@ -226,9 +220,11 @@ export const lgDispatcher = () => {
             changes.push(updatedFile);
           }
 
-          newLgFiles = lgFiles.map((file) => {
-            const changedFile = changes.find(({ id }) => id === file.id);
-            return changedFile ? changedFile : file;
+          set(lgFilesState(projectId), (lgFiles) => {
+            return lgFiles.map((file) => {
+              const changedFile = changes.find(({ id }) => id === file.id);
+              return changedFile ? changedFile : file;
+            });
           });
         } else {
           // body change, only update current locale file
@@ -240,8 +236,10 @@ export const lgDispatcher = () => {
             lgFiles
           )) as LgFile;
 
-          newLgFiles = lgFiles.map((file) => {
-            return file.id === id ? updatedFile : file;
+          set(lgFilesState(projectId), (lgFiles) => {
+            return lgFiles.map((file) => {
+              return file.id === id ? updatedFile : file;
+            });
           });
         }
       } catch (error) {
@@ -249,18 +247,11 @@ export const lgDispatcher = () => {
         return;
       }
 
-      if (getBaseName(lgFile.id) !== 'common') {
-        set(lgFilesState(projectId), newLgFiles);
-        return;
-      }
-
-      // if changes happen on common.lg, re-parse all.
-      const reparsedNewLgFiles: LgFile[] = [];
-      for (const file of newLgFiles) {
-        const reparsedFile = (await LgWorker.parse(projectId, file.id, file.content, newLgFiles)) as LgFile;
-        reparsedNewLgFiles.push(reparsedFile);
+      // if changes happen on common.lg, async re-parse all.
+      if (getBaseName(id) === 'common') {
+        const { reparseAllLgFiles } = await snapshot.getPromise(dispatcherState);
+        reparseAllLgFiles({ projectId });
       }
-      set(lgFilesState(projectId), reparsedNewLgFiles);
     }
   );
 
@@ -390,6 +381,23 @@ export const lgDispatcher = () => {
     }
   );
 
+  const reparseAllLgFiles = useRecoilCallback(
+    (callbackHelpers: CallbackInterface) => async ({ projectId }: { projectId: string }) => {
+      try {
+        const { set, snapshot } = callbackHelpers;
+        const lgFiles = await snapshot.getPromise(lgFilesState(projectId));
+        const reparsedLgFiles: LgFile[] = [];
+        for (const file of lgFiles) {
+          const reparsedFile = (await LgWorker.parse(projectId, file.id, file.content, lgFiles)) as LgFile;
+          reparsedLgFiles.push(reparsedFile);
+        }
+        set(lgFilesState(projectId), reparsedLgFiles);
+      } catch (error) {
+        setError(callbackHelpers, error);
+      }
+    }
+  );
+
   return {
     updateLgFile,
     createLgFile,
@@ -400,5 +408,6 @@ export const lgDispatcher = () => {
     removeLgTemplate,
     removeLgTemplates,
     copyLgTemplate,
+    reparseAllLgFiles,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/multilang.ts b/Composer/packages/client/src/recoilModel/dispatchers/multilang.ts
index a148cff6b..ad03d0afd 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/multilang.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/multilang.ts
@@ -8,7 +8,6 @@ import difference from 'lodash/difference';
 
 import languageStorage from '../../utils/languageStorage';
 import { getExtension } from '../../utils/fileUtil';
-import { localBotsDataSelector, rootBotProjectIdSelector } from '../selectors/project';
 
 import {
   lgFilesState,
@@ -20,7 +19,6 @@ import {
   onDelLanguageDialogCompleteState,
   showDelLanguageModalState,
   botDisplayNameState,
-  qnaFilesState,
 } from './../atoms/botState';
 
 const copyLanguageResources = (files: any[], fromLanguage: string, toLanguages: string[]): any[] => {
@@ -61,26 +59,7 @@ export const multilangDispatcher = () => {
   const setLocale = useRecoilCallback(
     ({ set, snapshot }: CallbackInterface) => async (locale: string, projectId: string) => {
       const botName = await snapshot.getPromise(botDisplayNameState(projectId));
-      const botProjects = await snapshot.getPromise(localBotsDataSelector);
-      const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-      if (projectId === rootBotProjectId) {
-        for (let i = 0; i < botProjects.length; i++) {
-          if (!botProjects[i].isRootBot && !botProjects[i].isRemote) {
-            const skillBotProjectId = botProjects[i].projectId;
-            const settings = await snapshot.getPromise(settingsState(skillBotProjectId));
-            const languages = settings.languages;
-            const defaultLang = settings.defaultLanguage;
-            if (!languages.includes(locale)) {
-              addLanguages({
-                languages: [locale],
-                projectId: skillBotProjectId,
-                defaultLang: defaultLang,
-                switchTo: true,
-              });
-            }
-          }
-        }
-      }
+
       set(localeState(projectId), locale);
       languageStorage.setLocale(botName, locale);
     }
@@ -89,16 +68,15 @@ export const multilangDispatcher = () => {
   const addLanguages = useRecoilCallback(
     (callbackHelpers: CallbackInterface) => async ({ languages, defaultLang, switchTo = false, projectId }) => {
       const { set, snapshot } = callbackHelpers;
+      const botName = await snapshot.getPromise(botDisplayNameState(projectId));
       const prevlgFiles = await snapshot.getPromise(lgFilesState(projectId));
       const prevluFiles = await snapshot.getPromise(luFilesState(projectId));
-      const prevQnaFiles = await snapshot.getPromise(qnaFilesState(projectId));
       const prevSettings = await snapshot.getPromise(settingsState(projectId));
       const onAddLanguageDialogComplete = (await snapshot.getPromise(onAddLanguageDialogCompleteState(projectId))).func;
 
       // copy files from default language
       const lgFiles = copyLanguageResources(prevlgFiles, defaultLang, languages);
       const luFiles = copyLanguageResources(prevluFiles, defaultLang, languages);
-      const qnaFiles = copyLanguageResources(prevQnaFiles, defaultLang, languages);
 
       const settings: any = cloneDeep(prevSettings);
       if (Array.isArray(settings.languages)) {
@@ -107,16 +85,14 @@ export const multilangDispatcher = () => {
         settings.languages = languages;
       }
 
-      //Set active language and update skill bot's active language
       if (switchTo) {
         const switchToLocale = languages[0];
-        setLocale(switchToLocale, projectId);
+        set(localeState(projectId), switchToLocale);
+        languageStorage.setLocale(botName, switchToLocale);
       }
 
       set(lgFilesState(projectId), [...prevlgFiles, ...lgFiles]);
       set(luFilesState(projectId), [...prevluFiles, ...luFiles]);
-      set(qnaFilesState(projectId), [...prevQnaFiles, ...qnaFiles]);
-
       set(settingsState(projectId), settings);
 
       if (typeof onAddLanguageDialogComplete === 'function') {
@@ -155,15 +131,6 @@ export const multilangDispatcher = () => {
 
       set(showDelLanguageModalState(projectId), false);
       set(onDelLanguageDialogCompleteState(projectId), { func: undefined });
-
-      //use default language as active language if active language is deleted
-      const botName = await snapshot.getPromise(botDisplayNameState(projectId));
-      const currentActiveLanguage = languageStorage.get(botName)?.locale;
-      if (languages.includes(currentActiveLanguage)) {
-        const defaultLanguage = settings.defaultLanguage;
-        set(localeState(projectId), defaultLanguage);
-        languageStorage.setLocale(botName, defaultLanguage);
-      }
     }
   );
 
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/navigation.ts b/Composer/packages/client/src/recoilModel/dispatchers/navigation.ts
index 27d93dcef..5d4ba44d9 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/navigation.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/navigation.ts
@@ -45,13 +45,14 @@ export const navigationDispatcher = () => {
 
       const projectId = skillId ?? rootBotProjectId;
 
+      const designPageLocation = await snapshot.getPromise(designPageLocationState(projectId));
       set(currentProjectIdState, projectId);
 
       const currentUri =
         trigger == null
           ? convertPathToUrl(rootBotProjectId, skillId, dialogId)
           : convertPathToUrl(rootBotProjectId, skillId, dialogId, `selected=triggers[${trigger}]`);
-
+      if (checkUrl(currentUri, rootBotProjectId, projectId, designPageLocation)) return;
       set(designPageLocationState(projectId), {
         dialogId: dialogId ?? '',
         selected: trigger ?? '',
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/project.ts b/Composer/packages/client/src/recoilModel/dispatchers/project.ts
index d3f1ee2ea..d5ec5e45c 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/project.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/project.ts
@@ -5,8 +5,6 @@
 import { BotProjectFile } from '@bfc/shared';
 import formatMessage from 'format-message';
 import findIndex from 'lodash/findIndex';
-import { RootBotManagedProperties } from '@bfc/shared';
-import get from 'lodash/get';
 import { CallbackInterface, useRecoilCallback } from 'recoil';
 
 import { BotStatus } from '../../constants';
@@ -31,7 +29,6 @@ import {
   projectMetaDataState,
 } from '../atoms';
 import { dispatcherState } from '../DispatcherWrapper';
-import { rootBotProjectIdSelector } from '../selectors';
 
 import { announcementState, boilerplateVersionState, recentProjectsState, templateIdState } from './../atoms';
 import { logMessage, setError } from './../dispatchers/shared';
@@ -46,7 +43,6 @@ import {
   initBotState,
   loadProjectData,
   navigateToBot,
-  navigateToSkillBot,
   openLocalSkill,
   openRemoteSkill,
   openRootBotAndSkillsByPath,
@@ -63,16 +59,12 @@ export const projectDispatcher = () => {
         const { set, snapshot } = callbackHelpers;
         const dispatcher = await snapshot.getPromise(dispatcherState);
         await dispatcher.removeSkillFromBotProjectFile(projectIdToRemove);
-        const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
 
         set(botProjectIdsState, (currentProjects) => {
           const filtered = currentProjects.filter((id) => id !== projectIdToRemove);
           return filtered;
         });
         resetBotStates(callbackHelpers, projectIdToRemove);
-        if (rootBotProjectId) {
-          navigateToBot(callbackHelpers, rootBotProjectId, '');
-        }
       } catch (ex) {
         setError(callbackHelpers, ex);
       }
@@ -103,9 +95,6 @@ export const projectDispatcher = () => {
       try {
         set(botOpeningState, true);
         const dispatcher = await snapshot.getPromise(dispatcherState);
-        const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-        if (!rootBotProjectId) return;
-
         const botExists = await checkIfBotExistsInBotProjectFile(callbackHelpers, path);
         if (botExists) {
           throw new Error(
@@ -122,7 +111,6 @@ export const projectDispatcher = () => {
 
         set(botProjectIdsState, (current) => [...current, projectId]);
         await dispatcher.addLocalSkillToBotProjectFile(projectId);
-        navigateToSkillBot(rootBotProjectId, projectId, mainDialog);
       } catch (ex) {
         handleProjectFailure(callbackHelpers, ex);
       } finally {
@@ -136,9 +124,6 @@ export const projectDispatcher = () => {
       const { set, snapshot } = callbackHelpers;
       try {
         const dispatcher = await snapshot.getPromise(dispatcherState);
-        const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-        if (!rootBotProjectId) return;
-
         const botExists = await checkIfBotExistsInBotProjectFile(callbackHelpers, manifestUrl, true);
         if (botExists) {
           throw new Error(
@@ -150,7 +135,6 @@ export const projectDispatcher = () => {
         const { projectId } = await openRemoteSkill(callbackHelpers, manifestUrl);
         set(botProjectIdsState, (current) => [...current, projectId]);
         await dispatcher.addRemoteSkillToBotProjectFile(projectId, manifestUrl, endpointName);
-        navigateToSkillBot(rootBotProjectId, projectId);
       } catch (ex) {
         handleProjectFailure(callbackHelpers, ex);
       } finally {
@@ -166,8 +150,7 @@ export const projectDispatcher = () => {
       try {
         const { templateId, name, description, location, schemaUrl, locale } = newProjectData;
         set(botOpeningState, true);
-        const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-        if (!rootBotProjectId) return;
+
         const { projectId, mainDialog } = await createNewBotFromTemplate(
           callbackHelpers,
           templateId,
@@ -185,7 +168,7 @@ export const projectDispatcher = () => {
         });
         set(botProjectIdsState, (current) => [...current, projectId]);
         await dispatcher.addLocalSkillToBotProjectFile(projectId);
-        navigateToSkillBot(rootBotProjectId, projectId, mainDialog);
+        navigateToBot(callbackHelpers, projectId, mainDialog);
         return projectId;
       } catch (ex) {
         handleProjectFailure(callbackHelpers, ex);
@@ -209,17 +192,6 @@ export const projectDispatcher = () => {
           isRemote: false,
         });
         projectIdCache.set(projectId);
-
-        //migration on some sensitive property in browser local storage
-        for (const property of RootBotManagedProperties) {
-          const settings = settingStorage.get(projectId);
-          const value = get(settings, property, '');
-          if (!value.root && value.root !== '') {
-            const newValue = { root: value };
-            settingStorage.setField(projectId, property, newValue);
-          }
-        }
-
         if (navigate) {
           navigateToBot(callbackHelpers, projectId, mainDialog);
         }
@@ -406,8 +378,8 @@ export const projectDispatcher = () => {
     }
   });
 
-  const setBotStatus = useRecoilCallback<[string, BotStatus], void>(
-    ({ set }: CallbackInterface) => (projectId: string, status: BotStatus) => {
+  const setBotStatus = useRecoilCallback<[BotStatus, string], void>(
+    ({ set }: CallbackInterface) => (status: BotStatus, projectId: string) => {
       set(botStatusState(projectId), status);
     }
   );
@@ -493,10 +465,6 @@ export const projectDispatcher = () => {
     }
   );
 
-  const setCurrentProjectId = useRecoilCallback(({ set }: CallbackInterface) => async (projectId: string) => {
-    set(currentProjectIdState, projectId);
-  });
-
   return {
     openProject,
     createNewBot,
@@ -516,6 +484,5 @@ export const projectDispatcher = () => {
     replaceSkillInBotProject,
     reloadProject,
     updateCreationMessage,
-    setCurrentProjectId,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/publisher.ts b/Composer/packages/client/src/recoilModel/dispatchers/publisher.ts
index 6f03f085d..96f342d7c 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/publisher.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/publisher.ts
@@ -4,25 +4,21 @@
 
 import formatMessage from 'format-message';
 import { CallbackInterface, useRecoilCallback } from 'recoil';
-import { defaultPublishConfig, isSkillHostUpdateRequired } from '@bfc/shared';
+import { defaultPublishConfig } from '@bfc/shared';
 
 import {
   publishTypesState,
   botStatusState,
   publishHistoryState,
-  botRuntimeErrorState,
+  botLoadErrorState,
   isEjectRuntimeExistState,
   filePersistenceState,
-  settingsState,
 } from '../atoms/botState';
 import { botEndpointsState } from '../atoms';
-import { openInEmulator } from '../../utils/navigation';
-import { rootBotProjectIdSelector } from '../selectors';
 
 import { BotStatus, Text } from './../../constants';
 import httpClient from './../../utils/httpUtil';
 import { logMessage, setError } from './shared';
-import { setRootBotSettingState } from './setting';
 
 const PUBLISH_SUCCESS = 200;
 const PUBLISH_PENDING = 202;
@@ -32,7 +28,7 @@ export const publisherDispatcher = () => {
   const publishFailure = async ({ set }: CallbackInterface, title: string, error, target, projectId: string) => {
     if (target.name === defaultPublishConfig.name) {
       set(botStatusState(projectId), BotStatus.failed);
-      set(botRuntimeErrorState(projectId), { ...error, title });
+      set(botLoadErrorState(projectId), { ...error, title });
     }
     // prepend the latest publish results to the history
 
@@ -71,27 +67,13 @@ export const publisherDispatcher = () => {
     });
   };
 
-  const updatePublishStatus = async (callbackHelpers: CallbackInterface, projectId: string, target: any, data: any) => {
+  const updatePublishStatus = ({ set }: CallbackInterface, projectId: string, target: any, data: any) => {
     if (data == null) return;
-    const { set, snapshot } = callbackHelpers;
     const { endpointURL, status, id } = data;
     // the action below only applies to when a bot is being started using the "start bot" button
     // a check should be added to this that ensures this ONLY applies to the "default" profile.
     if (target.name === defaultPublishConfig.name) {
       if (status === PUBLISH_SUCCESS && endpointURL) {
-        const rootBotId = await snapshot.getPromise(rootBotProjectIdSelector);
-        if (rootBotId === projectId) {
-          // Update the skill host endpoint
-          const settings = await snapshot.getPromise(settingsState(projectId));
-          if (isSkillHostUpdateRequired(settings?.skillHostEndpoint)) {
-            // Update skillhost endpoint only if ngrok url not set meaning empty or localhost url
-            const updatedSettings = {
-              ...settings,
-              skillHostEndpoint: endpointURL + '/api/skills',
-            };
-            setRootBotSettingState(callbackHelpers, projectId, updatedSettings);
-          }
-        }
         set(botStatusState(projectId), BotStatus.connected);
         set(botEndpointsState, (botEndpoints) => ({
           ...botEndpoints,
@@ -101,7 +83,7 @@ export const publisherDispatcher = () => {
         set(botStatusState(projectId), BotStatus.reloading);
       } else if (status === PUBLISH_FAILED) {
         set(botStatusState(projectId), BotStatus.failed);
-        set(botRuntimeErrorState(projectId), { ...data, title: formatMessage('Start bot failed') });
+        set(botLoadErrorState(projectId), { ...data, title: formatMessage('Start bot failed') });
       }
     }
 
@@ -226,13 +208,10 @@ export const publisherDispatcher = () => {
   // only support local publish
   const stopPublishBot = useRecoilCallback(
     (callbackHelpers: CallbackInterface) => async (projectId: string, target: any = defaultPublishConfig) => {
-      const { set, snapshot } = callbackHelpers;
+      const { set } = callbackHelpers;
       try {
         await httpClient.post(`/publish/${projectId}/stopPublish/${target.name}`);
-        const currentBotStatus = await snapshot.getPromise(botStatusState(projectId));
-        if (currentBotStatus !== BotStatus.failed) {
-          set(botStatusState(projectId), BotStatus.inactive);
-        }
+        set(botStatusState(projectId), BotStatus.unConnected);
       } catch (err) {
         setError(callbackHelpers, err);
         logMessage(callbackHelpers, err.message);
@@ -240,28 +219,6 @@ export const publisherDispatcher = () => {
     }
   );
 
-  const resetBotRuntimeError = useRecoilCallback((callbackHelpers: CallbackInterface) => async (projectId: string) => {
-    const { reset } = callbackHelpers;
-    reset(botRuntimeErrorState(projectId));
-  });
-
-  const openBotInEmulator = useRecoilCallback((callbackHelpers: CallbackInterface) => async (projectId: string) => {
-    const { snapshot } = callbackHelpers;
-    const botEndpoints = await snapshot.getPromise(botEndpointsState);
-    const settings = await snapshot.getPromise(settingsState(projectId));
-    try {
-      openInEmulator(
-        botEndpoints[projectId] || 'http://localhost:3979/api/messages',
-        settings.MicrosoftAppId && settings.MicrosoftAppPassword
-          ? { MicrosoftAppId: settings.MicrosoftAppId, MicrosoftAppPassword: settings.MicrosoftAppPassword }
-          : { MicrosoftAppPassword: '', MicrosoftAppId: '' }
-      );
-    } catch (err) {
-      setError(callbackHelpers, err);
-      logMessage(callbackHelpers, err.message);
-    }
-  });
-
   return {
     getPublishTargetTypes,
     publishToTarget,
@@ -270,7 +227,5 @@ export const publisherDispatcher = () => {
     getPublishStatus,
     getPublishHistory,
     setEjectRuntimeExist,
-    openBotInEmulator,
-    resetBotRuntimeError,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/qna.ts b/Composer/packages/client/src/recoilModel/dispatchers/qna.ts
index ac2dbb130..ee42f56b9 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/qna.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/qna.ts
@@ -15,7 +15,6 @@ import {
   onCreateQnAFromScratchDialogCompleteState,
   onCreateQnAFromUrlDialogCompleteState,
 } from '../atoms/botState';
-import { createQnAOnState } from '../atoms/appState';
 import qnaFileStatusStorage from '../../utils/qnaFileStatusStorage';
 import { getBaseName } from '../../utils/fileUtil';
 import { navigateTo } from '../../utils/navigation';
@@ -203,13 +202,10 @@ export const qnaDispatcher = () => {
     ({ set }: CallbackInterface) => async ({
       onComplete,
       projectId,
-      dialogId,
     }: {
       onComplete?: () => void;
       projectId: string;
-      dialogId: string;
     }) => {
-      set(createQnAOnState, { projectId, dialogId });
       set(showCreateQnAFromUrlDialogState(projectId), true);
       set(onCreateQnAFromUrlDialogCompleteState(projectId), { func: onComplete });
     }
@@ -217,7 +213,6 @@ export const qnaDispatcher = () => {
 
   const createQnAFromUrlDialogCancel = useRecoilCallback(
     ({ set }: CallbackInterface) => ({ projectId }: { projectId: string }) => {
-      set(createQnAOnState, { projectId: '', dialogId: '' });
       set(showCreateQnAFromUrlDialogState(projectId), false);
       set(onCreateQnAFromUrlDialogCompleteState(projectId), { func: undefined });
     }
@@ -227,13 +222,10 @@ export const qnaDispatcher = () => {
     ({ set }: CallbackInterface) => async ({
       onComplete,
       projectId,
-      dialogId,
     }: {
       onComplete?: () => void;
       projectId: string;
-      dialogId: string;
     }) => {
-      set(createQnAOnState, { projectId, dialogId });
       set(showCreateQnAFromScratchDialogState(projectId), true);
       set(onCreateQnAFromScratchDialogCompleteState(projectId), { func: onComplete });
     }
@@ -241,7 +233,6 @@ export const qnaDispatcher = () => {
 
   const createQnAFromScratchDialogCancel = useRecoilCallback(
     ({ set }: CallbackInterface) => async ({ projectId }: { projectId: string }) => {
-      set(createQnAOnState, { projectId: '', dialogId: '' });
       set(showCreateQnAFromScratchDialogState(projectId), false);
       set(onCreateQnAFromScratchDialogCompleteState(projectId), { func: undefined });
     }
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/setting.ts b/Composer/packages/client/src/recoilModel/dispatchers/setting.ts
index 37aab88fc..93efd0463 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/setting.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/setting.ts
@@ -3,117 +3,67 @@
 /* eslint-disable react-hooks/rules-of-hooks */
 
 import { CallbackInterface, useRecoilCallback } from 'recoil';
-import { SensitiveProperties, RootBotManagedProperties, DialogSetting, PublishTarget, LibraryRef } from '@bfc/shared';
+import { SensitiveProperties, DialogSetting, PublishTarget, Skill, LibraryRef } from '@bfc/shared';
+import { skillIndexer } from '@bfc/indexers';
 import get from 'lodash/get';
-import set from 'lodash/set';
 import has from 'lodash/has';
-import cloneDeep from 'lodash/cloneDeep';
+import isEqual from 'lodash/isEqual';
+import keys from 'lodash/keys';
 
 import settingStorage from '../../utils/dialogSettingStorage';
-import { settingsState } from '../atoms/botState';
-import { rootBotProjectIdSelector, botProjectSpaceSelector } from '../selectors/project';
+import { settingsState, skillsState } from '../atoms/botState';
 
 import httpClient from './../../utils/httpUtil';
 import { setError } from './shared';
 
-export const setRootBotSettingState = async (
+export const setSettingState = async (
   callbackHelpers: CallbackInterface,
   projectId: string,
   settings: DialogSetting
 ) => {
-  const { set: recoilSet, snapshot } = callbackHelpers;
-  // set value in local storage
-  for (const property of SensitiveProperties) {
-    if (!RootBotManagedProperties.includes(property) && has(settings, property)) {
-      const propertyValue = get(settings, property, '');
-      settingStorage.setField(projectId, property, propertyValue);
-    }
-  }
+  const { set, snapshot } = callbackHelpers;
+  const previousSettings = await snapshot.getPromise(settingsState(projectId));
+
+  if (!isEqual(settings.skill, previousSettings.skill)) {
+    const skills = await snapshot.getPromise(skillsState(projectId));
+    const skillContent = await Promise.all(
+      keys(settings.skill).map(async (id) => {
+        if (settings?.skill?.[id]?.manifestUrl !== previousSettings?.skill?.[id]?.manifestUrl) {
+          try {
+            const { data: content } = await httpClient.get(`/projects/${projectId}/skill/retrieveSkillManifest`, {
+              params: {
+                url: settings?.skill?.[id]?.manifestUrl,
+              },
+            });
+            return { id, content };
+          } catch (error) {
+            return { id };
+          }
+        }
 
-  const rootProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-  //store RootBotManagedProperties in browser localStorage
-  for (const property of RootBotManagedProperties) {
-    if (has(settings, property) && rootProjectId) {
-      const propertyValue = get(settings, property, '');
-      const groupPropertyValue = get(settingStorage.get(rootProjectId), property, '');
-      const newGroupPropertyValue = { ...groupPropertyValue, root: propertyValue };
-      settingStorage.setField(rootProjectId, property, newGroupPropertyValue);
-    }
-  }
+        const { content = {} } = skills.find(({ id: key }) => id === key) || ({} as Skill);
 
-  //sync skill bots' RootBotManagedProperties with root bot
-  const botProjectSpaceData = await snapshot.getPromise(botProjectSpaceSelector);
-  for (let i = 0; i < botProjectSpaceData.length; i++) {
-    const botProject = botProjectSpaceData[i];
-    if (!botProject.isRootBot && !botProject.isRemote && rootProjectId) {
-      const skillSettings = await snapshot.getPromise(settingsState(botProject.projectId));
-      const newSkillSettings = cloneDeep(skillSettings);
-      const localStorageSettings = settingStorage.get(rootProjectId);
-      for (const property of RootBotManagedProperties) {
-        const propertyValue = get(settings, property, '');
-        const skillBotValue = get(localStorageSettings, property, {})[botProject.projectId];
-        const shouldUseRootProperty = !skillBotValue;
-        if (shouldUseRootProperty) {
-          set(newSkillSettings, property, propertyValue);
-        } else {
-          set(newSkillSettings, property, skillBotValue);
-        }
-      }
-      recoilSet(settingsState(botProject.projectId), newSkillSettings);
-    }
+        return { id, content };
+      })
+    );
+
+    set(skillsState(projectId), skillIndexer.index(skillContent, settings.skill));
   }
-  recoilSet(settingsState(projectId), settings);
-};
 
-export const setSkillBotSettingState = async (
-  callbackHelpers: CallbackInterface,
-  projectId: string,
-  settings: DialogSetting
-) => {
-  const { set: recoilSet, snapshot } = callbackHelpers;
   // set value in local storage
   for (const property of SensitiveProperties) {
-    if (!RootBotManagedProperties.includes(property) && has(settings, property)) {
+    if (has(settings, property)) {
       const propertyValue = get(settings, property, '');
       settingStorage.setField(projectId, property, propertyValue);
     }
   }
-
-  const rootProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-  //store RootBotManagedProperties in browser localStorage
-  for (const property of RootBotManagedProperties) {
-    if (has(settings, property) && rootProjectId) {
-      const propertyValue = get(settings, property, '');
-      const groupPropertyValue = get(settingStorage.get(rootProjectId), property, '');
-      const newGroupPropertyValue = { ...groupPropertyValue, [projectId]: propertyValue };
-      settingStorage.setField(rootProjectId, property, newGroupPropertyValue);
-    }
-  }
-
-  //Use root bot's RootBotManagedProperties value if those of the skill bot's are empty
-  if (rootProjectId) {
-    const rootSettings = await snapshot.getPromise(settingsState(rootProjectId));
-    for (const property of RootBotManagedProperties) {
-      const propertyValue = get(settings, property, '');
-      const rootPropertyValue = get(rootSettings, property, '');
-      if (!propertyValue) {
-        set(settings, property, rootPropertyValue);
-      }
-    }
-  }
-  recoilSet(settingsState(projectId), settings);
+  set(settingsState(projectId), settings);
 };
 
 export const settingsDispatcher = () => {
   const setSettings = useRecoilCallback<[string, DialogSetting], Promise<void>>(
     (callbackHelpers: CallbackInterface) => async (projectId: string, settings: DialogSetting) => {
-      const { snapshot } = callbackHelpers;
-      const rootBotProjectId = await snapshot.getPromise(rootBotProjectIdSelector);
-      if (projectId === rootBotProjectId) {
-        setRootBotSettingState(callbackHelpers, projectId, settings);
-      } else {
-        setSkillBotSettingState(callbackHelpers, projectId, settings);
-      }
+      setSettingState(callbackHelpers, projectId, settings);
     }
   );
 
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/skill.ts b/Composer/packages/client/src/recoilModel/dispatchers/skill.ts
index fae2099d1..c7938aacb 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/skill.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/skill.ts
@@ -3,98 +3,34 @@
 /* eslint-disable react-hooks/rules-of-hooks */
 
 import { CallbackInterface, useRecoilCallback } from 'recoil';
-import { SkillManifestFile } from '@bfc/shared';
+import { SkillManifest, SkillSetting } from '@bfc/shared';
 import produce from 'immer';
 
-import { dispatcherState } from '../DispatcherWrapper';
-import { rootBotProjectIdSelector, skillsStateSelector } from '../selectors';
 import {
   skillManifestsState,
+  onAddSkillDialogCompleteState,
+  showAddSkillDialogModalState,
   displaySkillManifestState,
-  botProjectFileState,
   settingsState,
-  botEndpointsState,
-} from '../atoms';
-
-import { setRootBotSettingState } from './setting';
+} from './../atoms/botState';
+import { setSettingState } from './setting';
 
 export const skillDispatcher = () => {
-  // For endpoints in manifests the settings are updated immediately in SelectSkill. If "Composer Local" is chosen needs updating when rootbot is started.
-  const updateSettingsForSkillsWithoutManifest = useRecoilCallback((callbackHelpers: CallbackInterface) => async () => {
-    const { snapshot } = callbackHelpers;
-    const botEndpoints = await snapshot.getPromise(botEndpointsState);
-    const skills = await snapshot.getPromise(skillsStateSelector);
-    const rootBotId = await snapshot.getPromise(rootBotProjectIdSelector);
-    if (!rootBotId) {
-      return;
-    }
-    const settings = await snapshot.getPromise(settingsState(rootBotId));
-    let updatedSettings = { ...settings };
-    const botProjectFile = await snapshot.getPromise(botProjectFileState(rootBotId));
-    if (!botProjectFile) {
-      return;
-    }
-
-    for (const skillNameIdentifier in botProjectFile.content.skills) {
-      const botProjectSkill = botProjectFile.content.skills[skillNameIdentifier];
-      const projectId = skills[skillNameIdentifier]?.id;
-      const currentSetting = await snapshot.getPromise(settingsState(projectId));
-
-      // Update settings only for skills that have chosen the "Composer local" endpoint and not manifest endpoints
-      if (projectId && botEndpoints[projectId] && !botProjectSkill.endpointName) {
-        updatedSettings = produce(updatedSettings, (draftState) => {
-          if (!draftState.skill) {
-            draftState.skill = {};
-          }
-          draftState.skill[skillNameIdentifier] = {
-            endpointUrl: botEndpoints[projectId],
-            msAppId: currentSetting.MicrosoftAppId ?? '',
-          };
-        });
-      }
-    }
-    setRootBotSettingState(callbackHelpers, rootBotId, updatedSettings);
-  });
-
-  const createSkillManifest = async (callbackHelpers: CallbackInterface, { id, content, projectId }) => {
-    const { set, snapshot } = callbackHelpers;
-    let manifestForBotProjectFile;
-    const dispatcher = await snapshot.getPromise(dispatcherState);
-    set(skillManifestsState(projectId), (skillManifests) => {
-      if (!skillManifests.length) {
-        manifestForBotProjectFile = id;
-      }
-      return [...skillManifests, { content, id }];
-    });
-    if (manifestForBotProjectFile) {
-      dispatcher.updateManifestInBotProjectFile(projectId, id);
-    }
+  const createSkillManifest = ({ set }, { id, content, projectId }) => {
+    set(skillManifestsState(projectId), (skillManifests) => [...skillManifests, { content, id }]);
   };
 
   const removeSkillManifest = useRecoilCallback(
-    ({ set, snapshot }: CallbackInterface) => async (id: string, projectId: string) => {
-      let newCurrentManifestId: string | undefined;
-      const dispatcher = await snapshot.getPromise(dispatcherState);
-      set(skillManifestsState(projectId), (skillManifests) => {
-        const filtered = skillManifests.filter((manifest) => manifest.id !== id);
-        if (filtered.length > 0) {
-          newCurrentManifestId = filtered[0].id;
-        }
-        return filtered;
-      });
-      dispatcher.updateManifestInBotProjectFile(projectId, newCurrentManifestId);
+    ({ set }: CallbackInterface) => async (id: string, projectId: string) => {
+      set(skillManifestsState(projectId), (skillManifests) => skillManifests.filter((manifest) => manifest.id !== id));
     }
   );
 
   const updateSkillManifest = useRecoilCallback(
-    (callbackHelpers: CallbackInterface) => async ({ id, content }: SkillManifestFile, projectId: string) => {
-      const { set, snapshot } = callbackHelpers;
+    ({ set, snapshot }: CallbackInterface) => async ({ id, content }: SkillManifest, projectId: string) => {
       const manifests = await snapshot.getPromise(skillManifestsState(projectId));
-      const dispatcher = await snapshot.getPromise(dispatcherState);
-
       if (!manifests.some((manifest) => manifest.id === id)) {
-        createSkillManifest(callbackHelpers, { id, content, projectId });
-        dispatcher.updateManifestInBotProjectFile(projectId, id);
+        createSkillManifest({ set }, { id, content, projectId });
       }
 
       set(skillManifestsState(projectId), (skillManifests) =>
@@ -103,20 +39,99 @@ export const skillDispatcher = () => {
     }
   );
 
-  const displayManifestModal = useRecoilCallback(({ set }: CallbackInterface) => (id: string) => {
-    set(displaySkillManifestState, id);
+  const addSkill = useRecoilCallback(
+    (callbackHelpers: CallbackInterface) => async (projectId: string, skill: SkillSetting) => {
+      const { set, snapshot } = callbackHelpers;
+      const { func: onAddSkillDialogComplete } = await snapshot.getPromise(onAddSkillDialogCompleteState(projectId));
+      const settings = await snapshot.getPromise(settingsState(projectId));
+
+      setSettingState(
+        callbackHelpers,
+        projectId,
+        produce(settings, (updateSettings) => {
+          updateSettings.skill = { ...(updateSettings.skill || {}), [skill.name]: skill };
+        })
+      );
+
+      if (typeof onAddSkillDialogComplete === 'function') {
+        onAddSkillDialogComplete(skill || null);
+      }
+
+      set(showAddSkillDialogModalState(projectId), false);
+      set(onAddSkillDialogCompleteState(projectId), {});
+    }
+  );
+
+  const removeSkill = useRecoilCallback(
+    (callbackHelpers: CallbackInterface) => async (projectId: string, key: string) => {
+      const { snapshot } = callbackHelpers;
+      const settings = await snapshot.getPromise(settingsState(projectId));
+
+      setSettingState(
+        callbackHelpers,
+        projectId,
+        produce(settings, (updateSettings) => {
+          delete updateSettings.skill?.[key];
+        })
+      );
+    }
+  );
+
+  const updateSkill = useRecoilCallback(
+    (callbackHelpers: CallbackInterface) => async (
+      projectId: string,
+      key: string,
+      { endpointUrl, manifestUrl, msAppId, name }: SkillSetting
+    ) => {
+      const { snapshot } = callbackHelpers;
+      const settings = await snapshot.getPromise(settingsState(projectId));
+
+      setSettingState(
+        callbackHelpers,
+        projectId,
+        produce(settings, (updateSettings) => {
+          updateSettings.skill = {
+            ...(updateSettings.skill || {}),
+            [key]: {
+              endpointUrl,
+              manifestUrl,
+              msAppId,
+              name,
+            },
+          };
+        })
+      );
+    }
+  );
+
+  const addSkillDialogBegin = useRecoilCallback(({ set }: CallbackInterface) => (onComplete, projectId: string) => {
+    set(showAddSkillDialogModalState(projectId), true);
+    set(onAddSkillDialogCompleteState(projectId), { func: onComplete });
+  });
+
+  const addSkillDialogCancel = useRecoilCallback(({ set }: CallbackInterface) => (projectId: string) => {
+    set(showAddSkillDialogModalState(projectId), false);
+    set(onAddSkillDialogCompleteState(projectId), {});
+  });
+
+  const displayManifestModal = useRecoilCallback(({ set }: CallbackInterface) => (id: string, projectId: string) => {
+    set(displaySkillManifestState(projectId), id);
   });
 
-  const dismissManifestModal = useRecoilCallback(({ set }: CallbackInterface) => () => {
-    set(displaySkillManifestState, undefined);
+  const dismissManifestModal = useRecoilCallback(({ set }: CallbackInterface) => (projectId: string) => {
+    set(displaySkillManifestState(projectId), undefined);
   });
 
   return {
+    addSkill,
+    removeSkill,
+    updateSkill,
     createSkillManifest,
     removeSkillManifest,
     updateSkillManifest,
+    addSkillDialogBegin,
+    addSkillDialogCancel,
     displayManifestModal,
     dismissManifestModal,
-    updateSettingsForSkillsWithoutManifest,
   };
 };
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/trigger.ts b/Composer/packages/client/src/recoilModel/dispatchers/trigger.ts
deleted file mode 100644
index 7298a5f6d..000000000
--- a/Composer/packages/client/src/recoilModel/dispatchers/trigger.ts
+++ /dev/null
@@ -1,185 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-/* eslint-disable react-hooks/rules-of-hooks */
-import { useRecoilCallback, CallbackInterface } from 'recoil';
-import { BaseSchema, deleteActions, ITriggerCondition, LgTemplate, LgTemplateSamples, SDKKinds } from '@bfc/shared';
-import get from 'lodash/get';
-
-import { lgFilesState, luFilesState, schemasState, dialogState, localeState } from '../atoms/botState';
-import { dispatcherState } from '../DispatcherWrapper';
-import { dialogsSelectorFamily } from '../selectors';
-import {
-  onChooseIntentKey,
-  generateNewDialog,
-  intentTypeKey,
-  qnaMatcherKey,
-  TriggerFormData,
-} from '../../utils/dialogUtil';
-
-import { setError } from './shared';
-
-const defaultQnATriggerData = {
-  $kind: qnaMatcherKey,
-  errors: { $kind: '', intent: '', event: '', triggerPhrases: '', regEx: '', activity: '' },
-  event: '',
-  intent: '',
-  regEx: '',
-  triggerPhrases: '',
-};
-
-const getDesignerIdFromDialogPath = (dialog, path) => {
-  const value = get(dialog, path, '');
-  const startIndex = value.lastIndexOf('_');
-  const endIndex = value.indexOf('()');
-  const designerId = value.substring(startIndex + 1, endIndex);
-  if (!designerId) throw new Error(`missing designerId in path: ${path}`);
-  return designerId;
-};
-
-export const triggerDispatcher = () => {
-  const createTrigger = useRecoilCallback(
-    (callbackHelpers: CallbackInterface) => async (
-      projectId: string,
-      dialogId: string,
-      formData: TriggerFormData,
-      autoSelected = true
-    ) => {
-      try {
-        const { snapshot } = callbackHelpers;
-        const dispatcher = await snapshot.getPromise(dispatcherState);
-        const lgFiles = await snapshot.getPromise(lgFilesState(projectId));
-        const luFiles = await snapshot.getPromise(luFilesState(projectId));
-        const dialogs = await snapshot.getPromise(dialogsSelectorFamily(projectId));
-        const dialog = await snapshot.getPromise(dialogState({ projectId, dialogId }));
-        const schemas = await snapshot.getPromise(schemasState(projectId));
-        const locale = await snapshot.getPromise(localeState(projectId));
-
-        const { createLuIntent, createLgTemplates, updateDialog, selectTo } = dispatcher;
-
-        const lgFile = lgFiles.find((file) => file.id === `${dialogId}.${locale}`);
-        const luFile = luFiles.find((file) => file.id === `${dialogId}.${locale}`);
-
-        if (!luFile) throw new Error(`lu file ${dialogId} not found`);
-        if (!lgFile) throw new Error(`lg file ${dialogId} not found`);
-        if (!dialog) throw new Error(`dialog ${dialogId} not found`);
-        const newDialog = generateNewDialog(dialogs, dialog.id, formData, schemas.sdk?.content);
-        const index = get(newDialog, 'content.triggers', []).length - 1;
-        if (formData.$kind === intentTypeKey && formData.triggerPhrases) {
-          const intent = { Name: formData.intent, Body: formData.triggerPhrases };
-          luFile && (await createLuIntent({ id: luFile.id, intent, projectId }));
-        } else if (formData.$kind === qnaMatcherKey) {
-          const designerId1 = getDesignerIdFromDialogPath(
-            newDialog,
-            `content.triggers[${index}].actions[0].actions[1].prompt`
-          );
-          const designerId2 = getDesignerIdFromDialogPath(
-            newDialog,
-            `content.triggers[${index}].actions[0].elseActions[0].activity`
-          );
-          const lgTemplates: LgTemplate[] = [
-            LgTemplateSamples.TextInputPromptForQnAMatcher(designerId1) as LgTemplate,
-            LgTemplateSamples.SendActivityForQnAMatcher(designerId2) as LgTemplate,
-          ];
-          await createLgTemplates({ id: lgFile.id, templates: lgTemplates, projectId });
-        } else if (formData.$kind === onChooseIntentKey) {
-          const designerId1 = getDesignerIdFromDialogPath(newDialog, `content.triggers[${index}].actions[4].prompt`);
-          const designerId2 = getDesignerIdFromDialogPath(
-            newDialog,
-            `content.triggers[${index}].actions[5].elseActions[0].activity`
-          );
-          const lgTemplates1: LgTemplate[] = [
-            LgTemplateSamples.TextInputPromptForOnChooseIntent(designerId1) as LgTemplate,
-            LgTemplateSamples.SendActivityForOnChooseIntent(designerId2) as LgTemplate,
-          ];
-
-          let lgTemplates2: LgTemplate[] = [
-            LgTemplateSamples.adaptiveCardJson as LgTemplate,
-            LgTemplateSamples.whichOneDidYouMean as LgTemplate,
-            LgTemplateSamples.pickOne as LgTemplate,
-            LgTemplateSamples.getAnswerReadBack as LgTemplate,
-            LgTemplateSamples.getIntentReadBack as LgTemplate,
-          ];
-          const commonlgFile = lgFiles.find(({ id }) => id === `common.${locale}`);
-
-          lgTemplates2 = lgTemplates2.filter(
-            (t) => commonlgFile?.templates.findIndex((clft) => clft.name === t.name) === -1
-          );
-
-          await createLgTemplates({ id: `common.${locale}`, templates: lgTemplates2, projectId });
-          await createLgTemplates({ id: lgFile.id, templates: lgTemplates1, projectId });
-        }
-        const dialogPayload = {
-          id: newDialog.id,
-          projectId,
-          content: newDialog.content,
-        };
-        await updateDialog(dialogPayload);
-        if (autoSelected) {
-          selectTo(projectId, newDialog.id, `triggers[${index}]`);
-        }
-      } catch (ex) {
-        setError(callbackHelpers, ex);
-      }
-    }
-  );
-
-  const deleteTrigger = useRecoilCallback(
-    (callbackHelpers: CallbackInterface) => async (projectId: string, dialogId: string, trigger: ITriggerCondition) => {
-      try {
-        const { snapshot } = callbackHelpers;
-        const dispatcher = await snapshot.getPromise(dispatcherState);
-        const locale = await snapshot.getPromise(localeState(projectId));
-        const luFiles = await snapshot.getPromise(luFilesState(projectId));
-        const luFile = luFiles.find((file) => file.id === `${dialogId}.${locale}`);
-
-        const { removeLuIntent, removeLgTemplates } = dispatcher;
-
-        if (trigger.$kind === SDKKinds.OnIntent) {
-          const intentName = trigger.intent as string;
-          luFile && removeLuIntent({ id: luFile.id, intentName, projectId });
-        }
-
-        // Clean action resources
-        const actions = trigger.actions as BaseSchema[];
-        if (!actions || !Array.isArray(actions)) return;
-
-        luFile &&
-          deleteActions(
-            actions,
-            (templateNames: string[]) => removeLgTemplates({ id: dialogId, templateNames, projectId }),
-            (intentNames: string[]) =>
-              Promise.all(intentNames.map((intentName) => removeLuIntent({ id: luFile.id, intentName, projectId })))
-          );
-      } catch (ex) {
-        setError(callbackHelpers, ex);
-      }
-    }
-  );
-
-  const createQnATrigger = useRecoilCallback(
-    (callbackHelpers: CallbackInterface) => async (projectId: string, dialogId: string) => {
-      try {
-        const { snapshot } = callbackHelpers;
-        const dispatcher = await snapshot.getPromise(dispatcherState);
-        const dialogs = await snapshot.getPromise(dialogsSelectorFamily(projectId));
-
-        const targetDialog = dialogs.find((item) => item.id === dialogId);
-        if (!targetDialog) throw new Error(`dialog ${dialogId} not found`);
-        const existedQnATrigger = get(targetDialog, 'content.triggers', []).find(
-          (item) => item.$kind === SDKKinds.OnQnAMatch
-        );
-        if (!existedQnATrigger) {
-          await dispatcher.createTrigger(projectId, dialogId, defaultQnATriggerData);
-        }
-      } catch (ex) {
-        setError(callbackHelpers, ex);
-      }
-    }
-  );
-
-  return {
-    createTrigger,
-    deleteTrigger,
-    createQnATrigger,
-  };
-};
diff --git a/Composer/packages/client/src/recoilModel/dispatchers/utils/project.ts b/Composer/packages/client/src/recoilModel/dispatchers/utils/project.ts
index 10a7514c0..04b571bff 100644
--- a/Composer/packages/client/src/recoilModel/dispatchers/utils/project.ts
+++ b/Composer/packages/client/src/recoilModel/dispatchers/utils/project.ts
@@ -9,27 +9,20 @@ import {
   BotProjectSpace,
   BotProjectSpaceSkill,
   convertSkillsToDictionary,
-  migrateSkillsForExistingBots,
   dereferenceDefinitions,
-  fetchEndpointNameForSkill,
   DialogInfo,
   DialogSetting,
-  getManifestNameFromUrl,
   LuFile,
   QnAFile,
   SensitiveProperties,
-  RootBotManagedProperties,
-  defaultPublishConfig,
 } from '@bfc/shared';
 import formatMessage from 'format-message';
 import camelCase from 'lodash/camelCase';
 import objectGet from 'lodash/get';
 import objectSet from 'lodash/set';
-import cloneDeep from 'lodash/cloneDeep';
 import { stringify } from 'query-string';
 import { CallbackInterface } from 'recoil';
 import { v4 as uuid } from 'uuid';
-import isEmpty from 'lodash/isEmpty';
 
 import { BotStatus, QnABotTemplateId } from '../../../constants';
 import settingStorage from '../../../utils/dialogSettingStorage';
@@ -68,20 +61,19 @@ import {
   schemasState,
   settingsState,
   skillManifestsState,
+  skillsState,
   dialogIdsState,
   showCreateQnAFromUrlDialogState,
 } from '../../atoms';
 import * as botstates from '../../atoms/botState';
-import { dispatcherState } from '../../DispatcherWrapper';
 import lgWorker from '../../parsers/lgWorker';
 import luWorker from '../../parsers/luWorker';
 import qnaWorker from '../../parsers/qnaWorker';
 import FilePersistence from '../../persistence/FilePersistence';
-import { botRuntimeOperationsSelector, rootBotProjectIdSelector } from '../../selectors';
+import { rootBotProjectIdSelector } from '../../selectors';
 import { undoHistoryState } from '../../undo/history';
 import UndoHistory from '../../undo/undoHistory';
 import { logMessage, setError } from '../shared';
-import { setRootBotSettingState } from '../setting';
 
 import { crossTrainConfigState } from './../../atoms/botState';
 import { recognizersSelectorFamily } from './../../selectors/recognizers';
@@ -109,15 +101,12 @@ export const setErrorOnBotProject = async (
   if (payload != null) logMessage(callbackHelpers, `Error loading ${botName}: ${JSON.stringify(payload)}`);
 };
 
-export const flushExistingTasks = async (callbackHelpers: CallbackInterface) => {
+export const flushExistingTasks = async (callbackHelpers) => {
   const { snapshot, reset } = callbackHelpers;
   reset(botProjectSpaceLoadedState);
   const projectIds = await snapshot.getPromise(botProjectIdsState);
-  const runtimeOperations = await snapshot.getPromise(botRuntimeOperationsSelector);
-
-  reset(botProjectIdsState);
+  reset(botProjectIdsState, []);
   for (const projectId of projectIds) {
-    await runtimeOperations?.stopBot(projectId);
     resetBotStates(callbackHelpers, projectId);
   }
   const workers = [lgWorker, luWorker, qnaWorker];
@@ -131,9 +120,6 @@ const mergeLocalStorage = (projectId: string, settings: DialogSetting) => {
   const mergedSettings = { ...settings };
   if (localSetting) {
     for (const property of SensitiveProperties) {
-      if (RootBotManagedProperties.includes(property)) {
-        continue;
-      }
       const value = objectGet(localSetting, property);
       if (value) {
         objectSet(mergedSettings, property, value);
@@ -145,33 +131,6 @@ const mergeLocalStorage = (projectId: string, settings: DialogSetting) => {
   return mergedSettings;
 };
 
-export const mergePropertiesManagedByRootBot = (projectId: string, rootBotProjectId, settings: DialogSetting) => {
-  const localSetting = settingStorage.get(rootBotProjectId);
-  const mergedSettings = cloneDeep(settings);
-  if (localSetting) {
-    for (const property of RootBotManagedProperties) {
-      const rootValue = objectGet(localSetting, property, {}).root;
-      if (projectId === rootBotProjectId) {
-        objectSet(mergedSettings, property, rootValue ?? '');
-      }
-      if (projectId !== rootBotProjectId) {
-        const skillValue = objectGet(localSetting, property, {})[projectId];
-        objectSet(mergedSettings, property, skillValue ?? '');
-      }
-    }
-  }
-  return mergedSettings;
-};
-
-export const getSensitiveProperties = (settings: DialogSetting) => {
-  const sensitiveProperties = {};
-  for (const property of SensitiveProperties) {
-    const value = objectGet(settings, property, '');
-    objectSet(sensitiveProperties, property, value);
-  }
-  return sensitiveProperties;
-};
-
 export const getMergedSettings = (projectId, settings): DialogSetting => {
   const mergedSettings = mergeLocalStorage(projectId, settings);
   if (Array.isArray(mergedSettings.skill)) {
@@ -200,20 +159,12 @@ export const navigateToBot = (
   }
 };
 
-export const navigateToSkillBot = (rootProjectId: string, skillId: string, mainDialog?: string) => {
-  if (rootProjectId && skillId) {
-    let url = `/bot/${rootProjectId}/skill/${skillId}`;
-    if (mainDialog) url += `/dialogs/${mainDialog}`;
-    navigateTo(url);
-  }
-};
-
 export const loadProjectData = (data) => {
-  const { files, botName, settings, id: projectId } = data;
+  const { files, botName, settings, skills: skillContent, id: projectId } = data;
   const mergedSettings = getMergedSettings(projectId, settings);
   const storedLocale = languageStorage.get(botName)?.locale;
   const locale = settings.languages.includes(storedLocale) ? storedLocale : settings.defaultLanguage;
-  const indexedFiles = indexer.index(files, botName, locale, mergedSettings);
+  const indexedFiles = indexer.index(files, botName, locale, skillContent, mergedSettings);
 
   // migrate script move qna pairs in *.qna to *-manual.source.qna.
   // TODO: remove after a period of time.
@@ -325,7 +276,8 @@ export const initBotState = async (callbackHelpers: CallbackInterface, data: any
     qnaFiles,
     jsonSchemaFiles,
     formDialogSchemas,
-    skillManifests,
+    skillManifestFiles,
+    skills,
     mergedSettings,
     recognizers,
     crossTrainConfig,
@@ -333,7 +285,7 @@ export const initBotState = async (callbackHelpers: CallbackInterface, data: any
   const curLocation = await snapshot.getPromise(locationState(projectId));
   const storedLocale = languageStorage.get(botName)?.locale;
   const locale = settings.languages.includes(storedLocale) ? storedLocale : settings.defaultLanguage;
-  languageStorage.setLocale(botName, locale);
+
   try {
     schemas.sdk.content = processSchema(projectId, schemas.sdk.content);
   } catch (err) {
@@ -348,7 +300,7 @@ export const initBotState = async (callbackHelpers: CallbackInterface, data: any
     if (dialog.isRoot) {
       mainDialog = dialog.id;
     }
-    dialog.diagnostics = validateDialog(dialog, schemas.sdk.content, lgFiles, luFiles);
+    dialog.diagnostics = validateDialog(dialog, schemas.sdk.content, settings, lgFiles, luFiles);
     set(dialogState({ projectId, dialogId: dialog.id }), dialog);
     dialogIds.push(dialog.id);
   });
@@ -368,7 +320,7 @@ export const initBotState = async (callbackHelpers: CallbackInterface, data: any
     set(formDialogSchemaState({ projectId, schemaId: id }), { id, content });
   });
 
-  set(skillManifestsState(projectId), skillManifests);
+  set(skillManifestsState(projectId), skillManifestFiles);
   set(luFilesState(projectId), initLuFilesStatus(botName, luFiles, dialogs));
   set(lgFilesState(projectId), lgFiles);
   set(jsonSchemaFilesState(projectId), jsonSchemaFiles);
@@ -378,15 +330,16 @@ export const initBotState = async (callbackHelpers: CallbackInterface, data: any
   set(botDisplayNameState(projectId), botName);
   set(qnaFilesState(projectId), initQnaFilesStatus(botName, qnaFiles, dialogs));
   if (location !== curLocation) {
-    set(botStatusState(projectId), BotStatus.inactive);
+    set(botStatusState(projectId), BotStatus.unConnected);
     set(locationState(projectId), location);
   }
+  set(skillsState(projectId), skills);
   set(schemasState(projectId), schemas);
   set(localeState(projectId), locale);
   set(botDiagnosticsState(projectId), diagnostics);
+
   refreshLocalStorage(projectId, settings);
   set(settingsState(projectId), mergedSettings);
-
   set(filePersistenceState(projectId), new FilePersistence(projectId));
   set(undoHistoryState(projectId), new UndoHistory(projectId));
   return mainDialog;
@@ -409,7 +362,7 @@ export const removeRecentProject = async (callbackHelpers: CallbackInterface, pa
 export const openRemoteSkill = async (
   callbackHelpers: CallbackInterface,
   manifestUrl: string,
-  botNameIdentifier = ''
+  botNameIdentifier?: string
 ) => {
   const { set } = callbackHelpers;
 
@@ -418,32 +371,17 @@ export const openRemoteSkill = async (
   const stringified = stringify({
     url: manifestUrl,
   });
-
+  const manifestResponse = await httpClient.get(
+    `/projects/${projectId}/skill/retrieveSkillManifest?${stringified}&ignoreProjectValidation=true`
+  );
   set(projectMetaDataState(projectId), {
     isRootBot: false,
     isRemote: true,
   });
 
-  //TODO: open remote url 404. isRemote set to false?
-  const manifestResponse = await httpClient.get(
-    `/projects/${projectId}/skill/retrieveSkillManifest?${stringified}&ignoreProjectValidation=true`
-  );
-
-  let uniqueSkillNameIdentifier = botNameIdentifier;
-  if (!uniqueSkillNameIdentifier) {
-    uniqueSkillNameIdentifier = await getSkillNameIdentifier(callbackHelpers, manifestResponse.data.name);
-  }
-
-  set(botNameIdentifierState(projectId), uniqueSkillNameIdentifier);
+  set(botNameIdentifierState(projectId), botNameIdentifier || camelCase(manifestResponse.data.name));
   set(botDisplayNameState(projectId), manifestResponse.data.name);
   set(locationState(projectId), manifestUrl);
-  set(skillManifestsState(projectId), [
-    {
-      content: manifestResponse.data,
-      id: getManifestNameFromUrl(manifestUrl),
-      lastModified: new Date().toDateString(),
-    },
-  ]);
   return { projectId, manifestResponse: manifestResponse.data };
 };
 
@@ -566,63 +504,41 @@ const handleSkillLoadingFailure = (callbackHelpers, { ex, skillNameIdentifier })
 
 const openRootBotAndSkills = async (callbackHelpers: CallbackInterface, data, storageId = 'default') => {
   const { projectData, botFiles } = data;
-  const { set, snapshot } = callbackHelpers;
-  const dispatcher = await snapshot.getPromise(dispatcherState);
+  const { set } = callbackHelpers;
 
   const mainDialog = await initBotState(callbackHelpers, projectData, botFiles);
   const rootBotProjectId = projectData.id;
   const { name, location } = projectData;
-  const { mergedSettings } = botFiles;
 
   set(botNameIdentifierState(rootBotProjectId), camelCase(name));
-  set(botProjectIdsState, [rootBotProjectId]);
-  // Get the status of the bot on opening if it was opened and run in another window.
-  dispatcher.getPublishStatus(rootBotProjectId, defaultPublishConfig);
+
   if (botFiles.botProjectSpaceFiles && botFiles.botProjectSpaceFiles.length) {
     const currentBotProjectFileIndexed: BotProjectFile = botFiles.botProjectSpaceFiles[0];
-
-    if (mergedSettings.skill) {
-      const { botProjectFile, skillSettings } = migrateSkillsForExistingBots(
-        currentBotProjectFileIndexed.content,
-        mergedSettings.skill
-      );
-      if (!isEmpty(skillSettings)) {
-        setRootBotSettingState(callbackHelpers, rootBotProjectId, {
-          ...mergedSettings,
-          skill: skillSettings,
-        });
-      }
-      currentBotProjectFileIndexed.content = botProjectFile;
-    }
-
-    const currentBotProjectFile: BotProjectSpace = currentBotProjectFileIndexed.content;
-
     set(botProjectFileState(rootBotProjectId), currentBotProjectFileIndexed);
+    const currentBotProjectFile: BotProjectSpace = currentBotProjectFileIndexed.content;
 
-    const skills: { [skillId: string]: BotProjectSpaceSkill } = currentBotProjectFile.skills;
+    const skills: { [skillId: string]: BotProjectSpaceSkill } = {
+      ...currentBotProjectFile.skills,
+    };
 
+    // RootBot loads first + skills load async
     const totalProjectsCount = Object.keys(skills).length + 1;
-    if (totalProjectsCount > 1) {
+    if (totalProjectsCount > 0) {
       for (const nameIdentifier in skills) {
         const skill = skills[nameIdentifier];
         let skillPromise;
         if (!skill.remote && skill.workspace) {
           const rootBotPath = location;
           const skillPath = skill.workspace;
-          const absoluteSkillPath = path.join(rootBotPath, skillPath);
+          const absoluteSkillPath = path.resolve(rootBotPath, skillPath);
           skillPromise = openLocalSkill(callbackHelpers, absoluteSkillPath, storageId, nameIdentifier);
         } else if (skill.manifest) {
           skillPromise = openRemoteSkill(callbackHelpers, skill.manifest, nameIdentifier);
         }
         if (skillPromise) {
           skillPromise
-            .then(({ projectId, manifestResponse }) => {
+            .then(({ projectId }) => {
               addProjectToBotProjectSpace(set, projectId, totalProjectsCount);
-              const matchedEndpoint = fetchEndpointNameForSkill(mergedSettings, nameIdentifier, manifestResponse);
-              if (matchedEndpoint) {
-                dispatcher.updateEndpointNameInBotProjectFile(nameIdentifier, matchedEndpoint);
-              }
-              dispatcher.getPublishStatus(projectId, defaultPublishConfig);
             })
             .catch((ex) => {
               const projectId = handleSkillLoadingFailure(callbackHelpers, {
@@ -633,15 +549,12 @@ const openRootBotAndSkills = async (callbackHelpers: CallbackInterface, data, st
             });
         }
       }
-    } else {
-      //only contains rootBot
-      set(botProjectSpaceLoadedState, true);
     }
   } else {
     // Should never hit here as all projects should have a botproject file
     throw new Error(formatMessage('Bot project file does not exist.'));
   }
-
+  set(botProjectIdsState, [rootBotProjectId]);
   set(currentProjectIdState, rootBotProjectId);
   return {
     mainDialog,
@@ -715,7 +628,7 @@ export const checkIfBotExistsInBotProjectFile = async (
       }
     } else {
       if (workspace) {
-        const absolutePathOfSkill = path.join(rootBotLocation, workspace);
+        const absolutePathOfSkill = path.resolve(rootBotLocation, workspace);
         if (pathOrManifest === absolutePathOfSkill) {
           return true;
         }
diff --git a/Composer/packages/client/src/recoilModel/persistence/FilePersistence.ts b/Composer/packages/client/src/recoilModel/persistence/FilePersistence.ts
index e7f0b6472..bf8f60b0f 100644
--- a/Composer/packages/client/src/recoilModel/persistence/FilePersistence.ts
+++ b/Composer/packages/client/src/recoilModel/persistence/FilePersistence.ts
@@ -7,6 +7,7 @@ import {
   DialogInfo,
   DialogSchemaFile,
   DialogSetting,
+  SkillManifest,
   BotAssets,
   BotProjectFile,
   LuFile,
@@ -15,7 +16,6 @@ import {
   FormDialogSchema,
   RecognizerFile,
   CrosstrainConfig,
-  SkillManifestFile,
 } from '@bfc/shared';
 import keys from 'lodash/keys';
 
@@ -193,7 +193,7 @@ class FilePersistence {
     return changes;
   }
 
-  private getSkillManifestsChanges(current: SkillManifestFile[], previous: SkillManifestFile[]) {
+  private getSkillManifestsChanges(current: SkillManifest[], previous: SkillManifest[]) {
     const changeItems = this.getDifferenceItems(current, previous);
     const changes = this.getFileChanges(FileExtensions.Manifest, changeItems);
     return changes;
diff --git a/Composer/packages/client/src/recoilModel/selectors/__test__/project.test.ts b/Composer/packages/client/src/recoilModel/selectors/__test__/project.test.ts
index cc84cdc38..a89841726 100644
--- a/Composer/packages/client/src/recoilModel/selectors/__test__/project.test.ts
+++ b/Composer/packages/client/src/recoilModel/selectors/__test__/project.test.ts
@@ -13,7 +13,7 @@ import {
   botProjectIdsState,
   projectMetaDataState,
 } from '../../atoms';
-import { botProjectSpaceSelector, rootBotProjectIdSelector, localBotsWithoutErrorsSelector } from '../project';
+import { botProjectSpaceSelector, botsForFilePersistenceSelector, rootBotProjectIdSelector } from '../project';
 
 const projectIds = ['123-a', '234-bc', '567-de'];
 
@@ -38,7 +38,7 @@ const projectDataSelector = selectorFamily({
 
 const useRecoilTestHook = () => {
   const [botProjectIds, setBotProjectIds] = useRecoilState(botProjectIdsState);
-  const botsForFilePersistence = useRecoilValue(localBotsWithoutErrorsSelector);
+  const botsForFilePersistence = useRecoilValue(botsForFilePersistenceSelector);
   const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector);
   const botProjectSpace = useRecoilValue(botProjectSpaceSelector);
   const rootBotDataSelector = useSetRecoilState(projectDataSelector(projectIds[0]));
diff --git a/Composer/packages/client/src/recoilModel/selectors/diagnosticsPageSelector.ts b/Composer/packages/client/src/recoilModel/selectors/diagnosticsPageSelector.ts
deleted file mode 100644
index 62fa6b41e..000000000
--- a/Composer/packages/client/src/recoilModel/selectors/diagnosticsPageSelector.ts
+++ /dev/null
@@ -1,288 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { BotIndexer } from '@bfc/indexers';
-import { selectorFamily, selector } from 'recoil';
-import lodashGet from 'lodash/get';
-import formatMessage from 'format-message';
-
-import { getReferredLuFiles } from '../../utils/luUtil';
-import { INavTreeItem } from '../../components/NavTree';
-import { botDisplayNameState, qnaFilesState } from '../atoms/botState';
-import {
-  DialogDiagnostic,
-  LgDiagnostic,
-  LuDiagnostic,
-  DiagnosticInfo,
-  QnADiagnostic,
-  BotDiagnostic,
-  SettingDiagnostic,
-  SkillSettingDiagnostic,
-} from '../../pages/diagnostics/types';
-import {
-  botDiagnosticsState,
-  botProjectFileState,
-  botProjectIdsState,
-  dialogSchemasState,
-  jsonSchemaFilesState,
-  lgFilesState,
-  luFilesState,
-  projectMetaDataState,
-  settingsState,
-  skillManifestsState,
-} from '../atoms';
-
-import { crossTrainConfigState } from './../atoms/botState';
-import { formDialogSchemasSelectorFamily, rootBotProjectIdSelector } from './project';
-import { validateDialogsSelectorFamily } from './validatedDialogs';
-import { recognizersSelectorFamily } from './recognizers';
-
-export const botAssetsSelectFamily = selectorFamily({
-  key: 'botAssetsSelectFamily',
-  get: (projectId: string) => ({ get }) => {
-    const projectsMetaData = get(projectMetaDataState(projectId));
-    if (!projectsMetaData || projectsMetaData.isRemote) return null;
-
-    const dialogs = get(validateDialogsSelectorFamily(projectId));
-    const luFiles = get(luFilesState(projectId));
-    const lgFiles = get(lgFilesState(projectId));
-    const setting = get(settingsState(projectId));
-    const skillManifests = get(skillManifestsState(projectId));
-    const dialogSchemas = get(dialogSchemasState(projectId));
-    const qnaFiles = get(qnaFilesState(projectId));
-    const formDialogSchemas = get(formDialogSchemasSelectorFamily(projectId));
-    const botProjectFile = get(botProjectFileState(projectId));
-    const jsonSchemaFiles = get(jsonSchemaFilesState(projectId));
-    const recognizers = get(recognizersSelectorFamily(projectId));
-    const crossTrainConfig = get(crossTrainConfigState(projectId));
-    return {
-      projectId,
-      dialogs,
-      luFiles,
-      qnaFiles,
-      lgFiles,
-      skillManifests,
-      setting,
-      dialogSchemas,
-      formDialogSchemas,
-      botProjectFile,
-      jsonSchemaFiles,
-      recognizers,
-      crossTrainConfig,
-    };
-  },
-});
-
-export const botDiagnosticsSelectorFamily = selectorFamily({
-  key: 'botDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnostics = get(botDiagnosticsState(projectId));
-    const diagnosticList: DiagnosticInfo[] = [];
-
-    diagnostics.forEach((d) => {
-      diagnosticList.push(new BotDiagnostic(rootProjectId, projectId, '', d.source, d));
-    });
-
-    //manifest.json
-    //Manifest should exist
-    BotIndexer.checkManifest(botAssets).forEach((d) => {
-      diagnosticList.push(new BotDiagnostic(rootProjectId, projectId, '', d.source, d));
-    });
-
-    return diagnosticList;
-  },
-});
-
-/**
- * Check bot skill & setting
- * 1. used skill not existed in setting
- * 2. appsettings.json Microsoft App Id or Skill Host Endpoint are empty
- */
-export const skillSettingDiagnosticsSelectorFamily = selectorFamily({
-  key: 'skillDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-
-    const skillDiagnostics = BotIndexer.checkSkillSetting(botAssets);
-    skillDiagnostics.forEach((item) => {
-      diagnosticList.push(new SkillSettingDiagnostic(rootProjectId, projectId, item.source, item.source, item));
-    });
-    return diagnosticList;
-  },
-});
-
-export const settingDiagnosticsSelectorFamily = selectorFamily({
-  key: 'settingDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-
-    //1. Missing LUIS key
-    //2. Missing QnA Maker subscription key.
-    //appsettings.json
-    const settingDiagnostic = BotIndexer.checkSetting(botAssets);
-    settingDiagnostic.forEach((item) => {
-      diagnosticList.push(new SettingDiagnostic(rootProjectId, projectId, item.source, item.source, item));
-    });
-
-    //Check bot settings & dialog
-    //files meet LUIS/QnA requirments.
-    //appsettings.json
-    const luisLocaleDiagnostics = BotIndexer.checkLUISLocales(botAssets);
-
-    luisLocaleDiagnostics.forEach((item) => {
-      diagnosticList.push(new SettingDiagnostic(rootProjectId, projectId, item.source, item.source, item));
-    });
-
-    return diagnosticList;
-  },
-});
-
-export const dialogDiagnosticsSelectorFamily = selectorFamily({
-  key: 'dialogDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-    const { dialogs } = botAssets;
-
-    dialogs.forEach((dialog) => {
-      dialog.diagnostics.forEach((diagnostic) => {
-        const location = `${dialog.id}.dialog`;
-        diagnosticList.push(new DialogDiagnostic(rootProjectId, projectId, dialog.id, location, diagnostic));
-      });
-    });
-
-    return diagnosticList;
-  },
-});
-
-export const luDiagnosticsSelectorFamily = selectorFamily({
-  key: 'luDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-    const { luFiles, dialogs } = botAssets;
-
-    getReferredLuFiles(luFiles, dialogs).forEach((lufile) => {
-      lufile.diagnostics.forEach((diagnostic) => {
-        const location = `${lufile.id}.lu`;
-        diagnosticList.push(
-          new LuDiagnostic(rootProjectId, projectId, lufile.id, location, diagnostic, lufile, dialogs)
-        );
-      });
-    });
-
-    return diagnosticList;
-  },
-});
-
-export const lgDiagnosticsSelectorFamily = selectorFamily({
-  key: 'lgDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const { lgFiles, dialogs } = botAssets;
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-
-    lgFiles.forEach((lgFile) => {
-      lgFile.diagnostics.forEach((diagnostic) => {
-        const location = `${lgFile.id}.lg`;
-        diagnosticList.push(
-          new LgDiagnostic(rootProjectId, projectId, lgFile.id, location, diagnostic, lgFile, dialogs)
-        );
-      });
-    });
-
-    return diagnosticList;
-  },
-});
-
-export const qnaDiagnosticsSelectorFamily = selectorFamily({
-  key: 'qnaDiagnosticsSelectorFamily',
-  get: (projectId: string) => ({ get }) => {
-    const botAssets = get(botAssetsSelectFamily(projectId));
-    if (botAssets === null) return [];
-
-    const { qnaFiles } = botAssets;
-    const rootProjectId = get(rootBotProjectIdSelector) ?? projectId;
-    const diagnosticList: DiagnosticInfo[] = [];
-
-    qnaFiles.forEach((qnaFile) => {
-      lodashGet(qnaFile, 'diagnostics', []).forEach((diagnostic) => {
-        const location = `${qnaFile.id}.qna`;
-        diagnosticList.push(new QnADiagnostic(rootProjectId, projectId, qnaFile.id, location, diagnostic));
-      });
-    });
-
-    return diagnosticList;
-  },
-});
-
-export const diagnosticsSelectorFamily = selectorFamily({
-  key: 'diagnosticsSelector',
-  get: (projectId: string) => ({ get }) => [
-    ...get(dialogDiagnosticsSelectorFamily(projectId)),
-    ...get(botDiagnosticsSelectorFamily(projectId)),
-    ...get(skillSettingDiagnosticsSelectorFamily(projectId)),
-    ...get(settingDiagnosticsSelectorFamily(projectId)),
-    ...get(luDiagnosticsSelectorFamily(projectId)),
-    ...get(lgDiagnosticsSelectorFamily(projectId)),
-    ...get(qnaDiagnosticsSelectorFamily(projectId)),
-  ],
-});
-
-export const allDiagnosticsSelectorFamily = selectorFamily({
-  key: 'allDiagnosticsSelector',
-  get: (type: 'Error' | 'Warning' | 'All') => ({ get }) => {
-    const ids = get(botProjectIdsState);
-    const result = ids.reduce((result: DiagnosticInfo[], id: string) => {
-      return [
-        ...result,
-        ...get(diagnosticsSelectorFamily(id)).filter((diagnostic) => type === 'All' || diagnostic.severity === type),
-      ];
-    }, []);
-    return result;
-  },
-});
-
-export const diagnosticNavLinksSelector = selector({
-  key: 'diagnosticNavLinksSelector',
-  get: ({ get }) => {
-    const projectId = get(rootBotProjectIdSelector);
-    const ids = get(botProjectIdsState);
-    const result = ids.reduce((result: INavTreeItem[], id: string) => {
-      const projectsMetaData = get(projectMetaDataState(id));
-      if (projectsMetaData.isRemote) return result;
-      const name = get(botDisplayNameState(id));
-      const url = id === projectId ? `/bot/${projectId}/diagnostics` : `/bot/${projectId}/skill/${id}/diagnostics`;
-      result.push({
-        id: id,
-        name: name,
-        ariaLabel: formatMessage('diagnostic links'),
-        url,
-      });
-      return result;
-    }, []);
-
-    return result;
-  },
-});
diff --git a/Composer/packages/client/src/recoilModel/selectors/index.ts b/Composer/packages/client/src/recoilModel/selectors/index.ts
index 573cc0c57..37b4503a7 100644
--- a/Composer/packages/client/src/recoilModel/selectors/index.ts
+++ b/Composer/packages/client/src/recoilModel/selectors/index.ts
@@ -8,6 +8,4 @@ export * from './validatedDialogs';
 export * from './dialogs';
 export * from './dialogImports';
 export * from './projectTemplates';
-export * from './skills';
-export * from './localRuntimeBuilder';
-export * from './diagnosticsPageSelector';
+export * from './messagers';
diff --git a/Composer/packages/client/src/recoilModel/selectors/localRuntimeBuilder.ts b/Composer/packages/client/src/recoilModel/selectors/localRuntimeBuilder.ts
deleted file mode 100644
index 57b68492f..000000000
--- a/Composer/packages/client/src/recoilModel/selectors/localRuntimeBuilder.ts
+++ /dev/null
@@ -1,142 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { defaultPublishConfig } from '@bfc/shared';
-import { selector, selectorFamily } from 'recoil';
-import { checkForPVASchema } from '@bfc/shared';
-
-import { BotStatus } from '../../constants';
-import { isAbsHosted } from '../../utils/envUtil';
-import {
-  botDisplayNameState,
-  botStatusState,
-  luFilesState,
-  qnaFilesState,
-  schemasState,
-  settingsState,
-} from '../atoms';
-import { Dispatcher } from '../dispatchers';
-import { dispatcherState } from '../DispatcherWrapper';
-import { isBuildConfigComplete as isBuildConfigurationComplete, needsBuild } from '../../utils/buildUtil';
-import { getSensitiveProperties } from '../dispatchers/utils/project';
-
-import { validateDialogsSelectorFamily } from './validatedDialogs';
-import { localBotsWithoutErrorsSelector, rootBotProjectIdSelector } from './project';
-
-export const trackBotStatusesSelector = selectorFamily({
-  key: 'trackBotStatusesSelector',
-  get: (trackedProjectIds: string[]) => ({ get }) => {
-    if (trackedProjectIds.length === 0) {
-      return false;
-    }
-    const areBotsRunning = trackedProjectIds.find((projectId: string) => {
-      const currentStatus = get(botStatusState(projectId));
-      return currentStatus !== BotStatus.connected && currentStatus !== BotStatus.failed;
-    });
-    return areBotsRunning;
-  },
-});
-
-export const botBuildRequiredSelector = selectorFamily({
-  key: 'botBuildRequiredSelector',
-  get: (projectId: string) => ({ get }) => {
-    const dialogs = get(validateDialogsSelectorFamily(projectId));
-    return !isAbsHosted() && needsBuild(dialogs);
-  },
-});
-
-export const buildEssentialsSelector = selectorFamily({
-  key: 'buildEssentialsSelector',
-  get: (projectId: string) => ({ get }) => {
-    const settings = get(settingsState(projectId));
-    const configuration = {
-      luis: settings.luis,
-      qna: settings.qna,
-    };
-    const dialogs = get(validateDialogsSelectorFamily(projectId));
-    const luFiles = get(luFilesState(projectId));
-    const qnaFiles = get(qnaFilesState(projectId));
-    const buildRequired = get(botBuildRequiredSelector(projectId));
-    const status = get(botStatusState(projectId));
-
-    return {
-      isConfigurationComplete: isBuildConfigurationComplete(configuration, dialogs, luFiles, qnaFiles),
-      configuration,
-      buildRequired,
-      projectId,
-      status,
-    };
-  },
-});
-
-export const buildConfigurationSelector = selector({
-  key: 'buildConfigurationSelector',
-  get: ({ get }) => {
-    const localProjects = get(localBotsWithoutErrorsSelector);
-    const rootBotId = get(rootBotProjectIdSelector);
-
-    return localProjects
-      .filter((projectId: string) => {
-        const schema = get(schemasState(projectId));
-        const isPvaBot = !!checkForPVASchema(schema.sdk);
-        return !isPvaBot;
-      })
-      .map((projectId: string) => {
-        const result = get(buildEssentialsSelector(projectId));
-        const name = get(botDisplayNameState(projectId));
-        const dialogs = get(validateDialogsSelectorFamily(projectId));
-        const settings = get(settingsState(projectId));
-        let sensitiveSettings = {};
-        if (rootBotId) {
-          sensitiveSettings = getSensitiveProperties(settings);
-        }
-        return { ...result, name, dialogs, sensitiveSettings };
-      });
-  },
-});
-
-export const runningBotsSelector = selector({
-  key: 'runningBotsSelector',
-  get: ({ get }) => {
-    const localProjects = get(localBotsWithoutErrorsSelector);
-    const botsRunning = localProjects.filter((projectId: string) => {
-      const result = get(botStatusState(projectId));
-      return result === BotStatus.connected;
-    });
-    return {
-      totalBots: localProjects.length,
-      projectIds: botsRunning,
-    };
-  },
-});
-
-const botRuntimeAction = (dispatcher: Dispatcher) => {
-  return {
-    buildWithDefaultRecognizer: async (projectId: string, buildDependencies) => {
-      const { config } = buildDependencies;
-      if (config) {
-        dispatcher.setBotStatus(projectId, BotStatus.publishing);
-        await dispatcher.build(projectId, config.luis, config.qna);
-      }
-    },
-    startBot: async (projectId: string, sensitiveSettings) => {
-      dispatcher.setBotStatus(projectId, BotStatus.reloading);
-      await dispatcher.publishToTarget(projectId, defaultPublishConfig, { comment: '' }, sensitiveSettings);
-    },
-    stopBot: async (projectId: string) => {
-      dispatcher.stopPublishBot(projectId);
-      dispatcher.setBotStatus(projectId, BotStatus.inactive);
-    },
-  };
-};
-
-export const botRuntimeOperationsSelector = selector({
-  key: 'botRuntimeOperationsSelector',
-  get: ({ get }) => {
-    const dispatcher = get(dispatcherState);
-    if (!dispatcher) {
-      return undefined;
-    }
-    return botRuntimeAction(dispatcher);
-  },
-});
diff --git a/Composer/packages/client/src/recoilModel/selectors/messagers.ts b/Composer/packages/client/src/recoilModel/selectors/messagers.ts
new file mode 100644
index 000000000..50a97e00d
--- /dev/null
+++ b/Composer/packages/client/src/recoilModel/selectors/messagers.ts
@@ -0,0 +1,123 @@
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+
+// Copyright (c) Microsoft Corporation.
+// Licensed under the MIT License.
+import { selector } from 'recoil';
+import { BotIndexer } from '@bfc/indexers';
+import { BotAssets } from '@bfc/shared';
+
+import {
+  botDiagnosticsState,
+  botProjectFileState,
+  botProjectSpaceSelector,
+  crossTrainConfigState,
+  dialogSchemasState,
+  formDialogSchemasSelectorFamily,
+  jsonSchemaFilesState,
+  lgFilesState,
+  luFilesState,
+  qnaFilesState,
+  settingsState,
+  skillManifestsState,
+  validateDialogsSelectorFamily,
+} from '../../recoilModel';
+import { recognizersSelectorFamily } from '../../recoilModel/selectors/recognizers';
+import {
+  DialogNotification,
+  LgNotification,
+  LuNotification,
+  Notification,
+  QnANotification,
+  ServerNotification,
+  SettingNotification,
+  SkillNotification,
+} from '../../pages/notifications/types';
+
+import { getReferredLuFiles } from './../../utils/luUtil';
+
+export const messagersSelector = selector({
+  key: 'messagersSelector',
+  get: ({ get }) => {
+    const botProjectSpace = get(botProjectSpaceSelector);
+    const allMessage: Notification[] = [];
+
+    for (const project of botProjectSpace) {
+      const { projectId, name } = project;
+      const dialogs = get(validateDialogsSelectorFamily(projectId));
+      const luFiles = get(luFilesState(projectId));
+      const lgFiles = get(lgFilesState(projectId));
+      const diagnostics = get(botDiagnosticsState(projectId));
+      const setting = get(settingsState(projectId));
+      const skillManifests = get(skillManifestsState(projectId));
+      const dialogSchemas = get(dialogSchemasState(projectId));
+      const qnaFiles = get(qnaFilesState(projectId));
+      const formDialogSchemas = get(formDialogSchemasSelectorFamily(projectId));
+      const botProjectFile = get(botProjectFileState(projectId));
+      const jsonSchemaFiles = get(jsonSchemaFilesState(projectId));
+      const recognizers = get(recognizersSelectorFamily(projectId));
+      const crossTrainConfig = get(crossTrainConfigState(projectId));
+      const botAssets: BotAssets = {
+        projectId,
+        dialogs,
+        luFiles,
+        qnaFiles,
+        lgFiles,
+        skillManifests,
+        setting,
+        dialogSchemas,
+        formDialogSchemas,
+        botProjectFile,
+        jsonSchemaFiles,
+        recognizers,
+        crossTrainConfig,
+      };
+
+      const notifications: Notification[] = [];
+      diagnostics.forEach((d) => {
+        notifications.push(new ServerNotification(projectId, name, '', d.source, d));
+      });
+      const skillDiagnostics = BotIndexer.checkSkillSetting(botAssets);
+      skillDiagnostics.forEach((item) => {
+        if (item.source.endsWith('.json')) {
+          notifications.push(new SkillNotification(projectId, name, item.source, item.source, item));
+        } else {
+          notifications.push(new DialogNotification(projectId, name, item.source, item.source, item));
+        }
+      });
+      const luisLocaleDiagnostics = BotIndexer.checkLUISLocales(botAssets);
+
+      luisLocaleDiagnostics.forEach((item) => {
+        notifications.push(new SettingNotification(projectId, name, item.source, item.source, item));
+      });
+
+      dialogs.forEach((dialog) => {
+        dialog.diagnostics.forEach((diagnostic) => {
+          const location = `${dialog.id}.dialog`;
+          notifications.push(new DialogNotification(projectId, name, dialog.id, location, diagnostic));
+        });
+      });
+      getReferredLuFiles(luFiles, dialogs).forEach((lufile) => {
+        lufile.diagnostics.forEach((diagnostic) => {
+          const location = `${lufile.id}.lu`;
+          notifications.push(new LuNotification(projectId, name, lufile.id, location, diagnostic, lufile, dialogs));
+        });
+      });
+      lgFiles.forEach((lgFile) => {
+        lgFile.diagnostics.forEach((diagnostic) => {
+          const location = `${lgFile.id}.lg`;
+          notifications.push(new LgNotification(projectId, name, lgFile.id, location, diagnostic, lgFile, dialogs));
+        });
+      });
+      qnaFiles.forEach((qnaFile) => {
+        qnaFile.diagnostics.forEach((diagnostic) => {
+          const location = `${qnaFile.id}.qna`;
+          notifications.push(new QnANotification(projectId, name, qnaFile.id, location, diagnostic));
+        });
+      });
+      allMessage.push(...notifications);
+    }
+
+    return allMessage;
+  },
+});
diff --git a/Composer/packages/client/src/recoilModel/selectors/notifications.ts b/Composer/packages/client/src/recoilModel/selectors/notificationsSelector.ts
similarity index 100%
rename from Composer/packages/client/src/recoilModel/selectors/notifications.ts
rename to Composer/packages/client/src/recoilModel/selectors/notificationsSelector.ts
diff --git a/Composer/packages/client/src/recoilModel/selectors/project.ts b/Composer/packages/client/src/recoilModel/selectors/project.ts
index 0f7627260..a0faea636 100644
--- a/Composer/packages/client/src/recoilModel/selectors/project.ts
+++ b/Composer/packages/client/src/recoilModel/selectors/project.ts
@@ -1,8 +1,7 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { BotIndexer } from '@bfc/indexers';
-import { BotAssets, checkForPVASchema, DialogInfo, FormDialogSchema, JsonSchemaFile } from '@bfc/shared';
+import { FormDialogSchema, JsonSchemaFile } from '@bfc/shared';
 import isEmpty from 'lodash/isEmpty';
 import { selector, selectorFamily } from 'recoil';
 
@@ -14,44 +13,24 @@ import {
   botProjectIdsState,
   formDialogSchemaIdsState,
   formDialogSchemaState,
-  luFilesState,
-  lgFilesState,
-  qnaFilesState,
-  skillManifestsState,
-  dialogSchemasState,
   jsonSchemaFilesState,
   projectMetaDataState,
-  settingsState,
-  publishHistoryState,
-  publishTypesState,
-  dialogIdsState,
-  dialogState,
-  schemasState,
 } from '../atoms';
-import { dialogsSelectorFamily, buildEssentialsSelector, validateDialogsSelectorFamily } from '../selectors';
+import { dialogsSelectorFamily } from '../selectors';
 
 // Actions
-export const localBotsWithoutErrorsSelector = selector({
-  key: 'localBotsWithoutErrorsSelector',
+export const botsForFilePersistenceSelector = selector({
+  key: 'botsForFilePersistenceSelector',
   get: ({ get }) => {
     const botProjectIds = get(botProjectIdsState);
     return botProjectIds.filter((projectId: string) => {
       const { isRemote } = get(projectMetaDataState(projectId));
       const botError = get(botErrorState(projectId));
-      return !isRemote && !botError;
+      return !botError && !isRemote;
     });
   },
 });
 
-export const localBotsDataSelector = selector({
-  key: 'localBotsDataSelector',
-  get: ({ get }) => {
-    const botProjectIds = get(localBotsWithoutErrorsSelector);
-    const botProjectsWithoutError = get(botProjectSpaceSelector).filter((b) => botProjectIds.includes(b.projectId));
-    return botProjectsWithoutError;
-  },
-});
-
 export const formDialogSchemasSelectorFamily = selectorFamily<FormDialogSchema[], string>({
   key: 'formDialogSchemasSelector',
   get: (projectId: string) => ({ get }) => {
@@ -75,60 +54,13 @@ export const botProjectSpaceSelector = selector({
   get: ({ get }) => {
     const botProjects = get(botProjectIdsState);
     const result = botProjects.map((projectId: string) => {
-      const { isRemote, isRootBot } = get(projectMetaDataState(projectId));
-      const dialogs = get(validateDialogsSelectorFamily(projectId));
-      const luFiles = get(luFilesState(projectId));
-      const lgFiles = get(lgFilesState(projectId));
-      const qnaFiles = get(qnaFilesState(projectId));
+      const dialogs = get(dialogsSelectorFamily(projectId));
       const formDialogSchemas = get(formDialogSchemasSelectorFamily(projectId));
-      const botProjectFile = get(botProjectFileState(projectId));
       const metaData = get(projectMetaDataState(projectId));
       const botError = get(botErrorState(projectId));
-      const buildEssentials = get(buildEssentialsSelector(projectId));
       const name = get(botDisplayNameState(projectId));
       const botNameId = get(botNameIdentifierState(projectId));
-      const setting = get(settingsState(projectId));
-      const skillManifests = get(skillManifestsState(projectId));
-      const dialogSchemas = get(dialogSchemasState(projectId));
-      const jsonSchemaFiles = get(jsonSchemaFilesState(projectId));
-      const schemas = get(schemasState(projectId));
-      const isPvaSchema = schemas && checkForPVASchema(schemas.sdk);
-
-      const botAssets: BotAssets = {
-        projectId,
-        dialogs,
-        luFiles,
-        qnaFiles,
-        lgFiles,
-        skillManifests,
-        setting,
-        dialogSchemas,
-        formDialogSchemas,
-        botProjectFile,
-        jsonSchemaFiles,
-        recognizers: [],
-        crossTrainConfig: {},
-      };
-
-      const diagnostics = BotIndexer.validate({ ...botAssets, isRemote, isRootBot });
-      const publishHistory = get(publishHistoryState(projectId));
-      const publishTypes = get(publishTypesState(projectId));
-
-      return {
-        dialogs,
-        formDialogSchemas,
-        projectId,
-        name,
-        ...metaData,
-        setting,
-        error: botError,
-        botNameId,
-        diagnostics,
-        buildEssentials,
-        isPvaSchema,
-        publishHistory,
-        publishTypes,
-      };
+      return { dialogs, formDialogSchemas, projectId, name, ...metaData, error: botError, botNameId };
     });
     return result;
   },
@@ -159,55 +91,3 @@ export const jsonSchemaFilesByProjectIdSelector = selector({
     return result;
   },
 });
-
-export const botProjectDiagnosticsSelector = selector({
-  key: 'botProjectDiagnosticsSelector',
-  get: ({ get }) => {
-    const botProjects = get(botProjectIdsState);
-    const result = botProjects.map((projectId: string) => {
-      const { isRemote, isRootBot } = get(projectMetaDataState(projectId));
-      const dialogs = get(dialogsSelectorFamily(projectId));
-      const formDialogSchemas = get(formDialogSchemasSelectorFamily(projectId));
-      const luFiles = get(luFilesState(projectId));
-      const lgFiles = get(lgFilesState(projectId));
-      const setting = get(settingsState(projectId));
-      const skillManifests = get(skillManifestsState(projectId));
-      const dialogSchemas = get(dialogSchemasState(projectId));
-      const qnaFiles = get(qnaFilesState(projectId));
-      const botProjectFile = get(botProjectFileState(projectId));
-      const jsonSchemaFiles = get(jsonSchemaFilesState(projectId));
-      const botAssets: BotAssets = {
-        projectId,
-        dialogs,
-        luFiles,
-        qnaFiles,
-        lgFiles,
-        skillManifests,
-        setting,
-        dialogSchemas,
-        formDialogSchemas,
-        botProjectFile,
-        jsonSchemaFiles,
-        recognizers: [],
-        crossTrainConfig: {},
-      };
-      return BotIndexer.validate({ ...botAssets, isRemote, isRootBot });
-    });
-    return result;
-  },
-});
-
-export const projectDialogsMapSelector = selector<{ [key: string]: DialogInfo[] }>({
-  key: 'projectDialogsMap',
-  get: ({ get }) => {
-    const projectIds = get(botProjectIdsState);
-
-    return projectIds.reduce((result, projectId) => {
-      const dialogIds = get(dialogIdsState(projectId));
-      result[projectId] = dialogIds.map((dialogId) => {
-        return get(dialogState({ projectId, dialogId }));
-      });
-      return result;
-    }, {});
-  },
-});
diff --git a/Composer/packages/client/src/recoilModel/selectors/skills.ts b/Composer/packages/client/src/recoilModel/selectors/skills.ts
deleted file mode 100644
index c5dd228a7..000000000
--- a/Composer/packages/client/src/recoilModel/selectors/skills.ts
+++ /dev/null
@@ -1,81 +0,0 @@
-// Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License.
-
-import { Skill } from '@bfc/shared';
-import { selector } from 'recoil';
-
-import {
-  skillManifestsState,
-  currentSkillManifestIndexState,
-  botNameIdentifierState,
-  botDisplayNameState,
-  projectMetaDataState,
-  locationState,
-  botProjectIdsState,
-} from '../atoms';
-
-export const skillsProjectIdSelector = selector({
-  key: 'skillsProjectIdSelector',
-  get: ({ get }) => {
-    const botIds = get(botProjectIdsState);
-    return botIds.filter((projectId: string) => {
-      const { isRootBot } = get(projectMetaDataState(projectId));
-      return !isRootBot;
-    });
-  },
-});
-
-export interface SkillInfo extends Skill {
-  manifestId: string;
-  location: string; // path to skill bot or manifest url
-  remote: boolean;
-}
-// Actions
-export const skillsStateSelector = selector({
-  key: 'skillsStateSelector',
-  get: ({ get }) => {
-    const skillsProjectIds = get(skillsProjectIdSelector);
-    const skills: Record<string, SkillInfo> = skillsProjectIds.reduce((result, skillId: string) => {
-      const manifests = get(skillManifestsState(skillId));
-      const location = get(locationState(skillId));
-      const currentSkillManifestIndex = get(currentSkillManifestIndexState(skillId));
-      const skillNameIdentifier = get(botNameIdentifierState(skillId));
-      const botName = get(botDisplayNameState(skillId));
-      let manifest = undefined;
-      let manifestId;
-      if (manifests[currentSkillManifestIndex]) {
-        manifest = manifests[currentSkillManifestIndex].content;
-        manifestId = manifests[currentSkillManifestIndex].id;
-      }
-
-      const { isRemote } = get(projectMetaDataState(skillId));
-      if (skillNameIdentifier) {
-        result[skillNameIdentifier] = {
-          id: skillId,
-          manifest,
-          name: botName,
-          remote: isRemote,
-          manifestId,
-          location,
-        };
-      }
-      return result;
-    }, {});
-    return skills;
-  },
-});
-
-export const skillNameIdentifierByProjectIdSelector = selector({
-  key: 'skillNameIdentifierByProjectIdSelector',
-  get: ({ get }) => {
-    const skillsProjectIds = get(skillsProjectIdSelector);
-    const skills: Record<string, string> = skillsProjectIds.reduce((result, skillId: string) => {
-      const skillNameIdentifier = get(botNameIdentifierState(skillId));
-      if (skillNameIdentifier) {
-        result[skillId] = skillNameIdentifier;
-      }
-      return result;
-    }, {});
-    return skills;
-  },
-});
diff --git a/Composer/packages/client/src/recoilModel/selectors/validatedDialogs.ts b/Composer/packages/client/src/recoilModel/selectors/validatedDialogs.ts
index c5e296326..fd99826ea 100644
--- a/Composer/packages/client/src/recoilModel/selectors/validatedDialogs.ts
+++ b/Composer/packages/client/src/recoilModel/selectors/validatedDialogs.ts
@@ -3,9 +3,16 @@
 
 import { selectorFamily } from 'recoil';
 import { validateDialog } from '@bfc/indexers';
-import { DialogInfo } from '@bfc/shared';
 
-import { botProjectIdsState, dialogIdsState, schemasState, lgFilesState, luFilesState, dialogState } from '../atoms';
+import {
+  botProjectIdsState,
+  dialogIdsState,
+  schemasState,
+  lgFilesState,
+  luFilesState,
+  dialogState,
+  settingsState,
+} from '../atoms';
 import { getLuProvider } from '../../utils/dialogUtil';
 
 import { recognizersSelectorFamily } from './recognizers';
@@ -14,13 +21,18 @@ type validateDialogSelectorFamilyParams = { projectId: string; dialogId: string
 const validateDialogSelectorFamily = selectorFamily({
   key: 'validateDialogSelectorFamily',
   get: ({ projectId, dialogId }: validateDialogSelectorFamilyParams) => ({ get }) => {
-    const dialog: DialogInfo = get(dialogState({ projectId, dialogId }));
+    const dialog = get(dialogState({ projectId, dialogId }));
     const schemas = get(schemasState(projectId));
     const lgFiles = get(lgFilesState(projectId));
     const luFiles = get(luFilesState(projectId));
+    const settings = get(settingsState(projectId));
     const recognizers = get(recognizersSelectorFamily(projectId));
     const luProvider = getLuProvider(dialogId, recognizers);
-    return { ...dialog, diagnostics: validateDialog(dialog, schemas.sdk.content, lgFiles, luFiles), luProvider };
+    return {
+      ...dialog,
+      diagnostics: validateDialog(dialog, schemas.sdk.content, settings, lgFiles, luFiles),
+      luProvider,
+    };
   },
 });
 
diff --git a/Composer/packages/client/src/recoilModel/types.ts b/Composer/packages/client/src/recoilModel/types.ts
index 9a680bb02..39f74c88d 100644
--- a/Composer/packages/client/src/recoilModel/types.ts
+++ b/Composer/packages/client/src/recoilModel/types.ts
@@ -54,7 +54,7 @@ export interface RuntimeTemplate {
   startCommand: string;
 }
 
-export interface BotRuntimeError {
+export interface BotLoadError {
   title: string;
   message: string;
   linkAfterMessage?: { url: string; text: string };
diff --git a/Composer/packages/client/src/router.tsx b/Composer/packages/client/src/router.tsx
index 6f464bae4..366e78357 100644
--- a/Composer/packages/client/src/router.tsx
+++ b/Composer/packages/client/src/router.tsx
@@ -20,23 +20,19 @@ import {
   pluginPagesSelector,
   botOpeningMessage,
 } from './recoilModel';
-import { localBotsDataSelector, rootBotProjectIdSelector } from './recoilModel/selectors/project';
 import { openAlertModal } from './components/Modal/AlertDialog';
 import { dialogStyle } from './components/Modal/dialogStyle';
 import { LoadingSpinner } from './components/LoadingSpinner';
 import { PluginPageContainer } from './pages/plugin/PluginPageContainer';
-import { botDisplayNameState, botProjectSpaceLoadedState } from './recoilModel/atoms';
-import { mergePropertiesManagedByRootBot } from './recoilModel/dispatchers/utils/project';
-import languageStorage from './utils/languageStorage';
 
 const DesignPage = React.lazy(() => import('./pages/design/DesignPage'));
 const LUPage = React.lazy(() => import('./pages/language-understanding/LUPage'));
 const QnAPage = React.lazy(() => import('./pages/knowledge-base/QnAPage'));
 const LGPage = React.lazy(() => import('./pages/language-generation/LGPage'));
 const SettingPage = React.lazy(() => import('./pages/setting/SettingsPage'));
-const BotProjectSettings = React.lazy(() => import('./pages/botProject/BotProjectSettings'));
-const Diagnostics = React.lazy(() => import('./pages/diagnostics/Diagnostics'));
+const Notifications = React.lazy(() => import('./pages/notifications/Notifications'));
 const Publish = React.lazy(() => import('./pages/publish/Publish'));
+const Skills = React.lazy(() => import('./pages/skills'));
 const BotCreationFlowRouter = React.lazy(() => import('./components/CreationFlow/CreationFlow'));
 const FormDialogPage = React.lazy(() => import('./pages/form-dialog/FormDialogPage'));
 
@@ -62,26 +58,17 @@ const Routes = (props) => {
           <Redirect noThrow from="/bot/:projectId/knowledge-base" to="/bot/:projectId/knowledge-base/all" />
           <Redirect noThrow from="/bot/:projectId/publish" to="/bot/:projectId/publish/all" />
           <Redirect noThrow from="/" to={resolveToBasePath(BASEPATH, 'home')} />
-          <ProjectRouter path="/bot/:projectId/skill/:skillId">
-            <DesignPage path="dialogs/:dialogId/*" />
-            <LUPage path="language-understanding/:dialogId/*" />
-            <LGPage path="language-generation/:dialogId/*" />
-            <QnAPage path="knowledge-base/:dialogId/*" />
-            <BotProjectSettings path="botProjectsSettings" />
-            <Diagnostics path="diagnostics" />
-            <DesignPage path="*" />
-          </ProjectRouter>
           <ProjectRouter path="/bot/:projectId">
             <DesignPage path="dialogs/:dialogId/*" />
             <LUPage path="language-understanding/:dialogId/*" />
             <LGPage path="language-generation/:dialogId/*" />
             <QnAPage path="knowledge-base/:dialogId/*" />
+            <Notifications path="notifications" />
             <Publish path="publish/:targetName" />
-            <BotProjectSettings path="botProjectsSettings" />
+            <Skills path="skills/*" />
             <FormDialogPage path="forms/:schemaId/*" />
             <FormDialogPage path="forms/*" />
             <DesignPage path="*" />
-            <Diagnostics path="diagnostics" />
             {pluginPages.map((page) => (
               <PluginPageContainer
                 key={`${page.id}/${page.bundleId}`}
@@ -91,6 +78,13 @@ const Routes = (props) => {
               />
             ))}
           </ProjectRouter>
+          <ProjectRouter path="/bot/:projectId/skill/:skillId">
+            <DesignPage path="dialogs/:dialogId/*" />
+            <LUPage path="language-understanding/:dialogId/*" />
+            <LGPage path="language-generation/:dialogId/*" />
+            <QnAPage path="knowledge-base/:dialogId/*" />
+            <DesignPage path="*" />
+          </ProjectRouter>
           <SettingPage path="settings/*" />
           <BotCreationFlowRouter path="projects/*" />
           <BotCreationFlowRouter path="home" />
@@ -121,27 +115,8 @@ const projectStyle = css`
 const ProjectRouter: React.FC<RouteComponentProps<{ projectId: string; skillId: string }>> = (props) => {
   const { projectId = '' } = props;
   const schemas = useRecoilValue(schemasState(projectId));
-  const { fetchProjectById, setSettings, setLocale } = useRecoilValue(dispatcherState);
+  const { fetchProjectById } = useRecoilValue(dispatcherState);
   const botProjects = useRecoilValue(botProjectIdsState);
-  const localBots = useRecoilValue(localBotsDataSelector);
-  const botProjectSpaceLoaded = useRecoilValue(botProjectSpaceLoadedState);
-  const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector);
-  const botName = useRecoilValue(botDisplayNameState(rootBotProjectId || ''));
-
-  useEffect(() => {
-    if (botProjectSpaceLoaded && rootBotProjectId && localBots) {
-      for (let i = 0; i < localBots.length; i++) {
-        const id = localBots[i].projectId;
-        const setting = localBots[i].setting;
-        const mergedSettings = mergePropertiesManagedByRootBot(id, rootBotProjectId, setting);
-        setSettings(id, mergedSettings);
-      }
-      const storedLocale = languageStorage.get(botName)?.locale;
-      if (storedLocale) {
-        setLocale(storedLocale, rootBotProjectId);
-      }
-    }
-  }, [botProjectSpaceLoaded, rootBotProjectId, botProjects]);
 
   useEffect(() => {
     if (props.projectId && !botProjects.includes(props.projectId)) {
diff --git a/Composer/packages/client/src/shell/triggerApi.ts b/Composer/packages/client/src/shell/triggerApi.ts
index c975a4d0d..c1d6ceb6c 100644
--- a/Composer/packages/client/src/shell/triggerApi.ts
+++ b/Composer/packages/client/src/shell/triggerApi.ts
@@ -2,30 +2,186 @@
 // Licensed under the MIT License.
 
 import { useEffect, useState } from 'react';
-import { ITriggerCondition } from '@botframework-composer/types';
+import {
+  LgTemplate,
+  LuFile,
+  LgFile,
+  DialogInfo,
+  ITriggerCondition,
+  SDKKinds,
+  BaseSchema,
+  MicrosoftIDialog,
+} from '@botframework-composer/types';
 import { useRecoilValue } from 'recoil';
+import { LgTemplateSamples } from '@bfc/shared';
+import get from 'lodash/get';
 
-import { TriggerFormData } from '../utils/dialogUtil';
+import { useResolvers } from '../hooks/useResolver';
+import { onChooseIntentKey, generateNewDialog, intentTypeKey, qnaMatcherKey } from '../utils/dialogUtil';
+import { schemasState, lgFilesState, dialogsSelectorFamily, localeState } from '../recoilModel';
 import { Dispatcher } from '../recoilModel/dispatchers';
 
 import { dispatcherState } from './../recoilModel/DispatcherWrapper';
+import { useActionApi } from './actionApi';
+import { useLuApi } from './luApi';
+
+const defaultQnATriggerData = {
+  $kind: qnaMatcherKey,
+  errors: { $kind: '', intent: '', event: '', triggerPhrases: '', regEx: '', activity: '' },
+  event: '',
+  intent: '',
+  regEx: '',
+  triggerPhrases: '',
+};
+
+function createTriggerApi(
+  state: { projectId; schemas; dialogs; locale; lgFiles },
+  dispatchers: Dispatcher, //TODO
+  luFileResolver: (id: string) => LuFile | undefined,
+  lgFileResolver: (id: string) => LgFile | undefined,
+  dialogResolver: (id: string) => DialogInfo | undefined,
+  deleteActions: (dialogId: string, actions: MicrosoftIDialog[]) => Promise<void>,
+  removeLuIntent: (id: string, intentName: string) => void
+) {
+  const getDesignerIdFromDialogPath = (dialog, path) => {
+    const value = get(dialog, path, '');
+    const startIndex = value.lastIndexOf('_');
+    const endIndex = value.indexOf('()');
+    return value.substring(startIndex + 1, endIndex);
+  };
+
+  const createTriggerHandler = async (id, formData, autoSelected = true) => {
+    const luFile = luFileResolver(id);
+    const lgFile = lgFileResolver(id);
+    const dialog = dialogResolver(id);
+    const { createLuIntent, createLgTemplates, updateDialog, selectTo } = dispatchers;
+    const { projectId, schemas, dialogs, locale, lgFiles } = state;
+    if (!luFile) throw new Error(`lu file ${id} not found`);
+    if (!lgFile) throw new Error(`lg file ${id} not found`);
+    if (!dialog) throw new Error(`dialog ${id} not found`);
+    const newDialog = generateNewDialog(dialogs, dialog.id, formData, schemas.sdk?.content);
+    const index = get(newDialog, 'content.triggers', []).length - 1;
+    if (formData.$kind === intentTypeKey && formData.triggerPhrases) {
+      const intent = { Name: formData.intent, Body: formData.triggerPhrases };
+      luFile && (await createLuIntent({ id: luFile.id, intent, projectId }));
+    } else if (formData.$kind === qnaMatcherKey) {
+      const designerId1 = getDesignerIdFromDialogPath(
+        newDialog,
+        `content.triggers[${index}].actions[0].actions[1].prompt`
+      );
+      const designerId2 = getDesignerIdFromDialogPath(
+        newDialog,
+        `content.triggers[${index}].actions[0].elseActions[0].activity`
+      );
+      const lgTemplates: LgTemplate[] = [
+        LgTemplateSamples.TextInputPromptForQnAMatcher(designerId1) as LgTemplate,
+        LgTemplateSamples.SendActivityForQnAMatcher(designerId2) as LgTemplate,
+      ];
+      await createLgTemplates({ id: lgFile.id, templates: lgTemplates, projectId });
+    } else if (formData.$kind === onChooseIntentKey) {
+      const designerId1 = getDesignerIdFromDialogPath(newDialog, `content.triggers[${index}].actions[4].prompt`);
+      const designerId2 = getDesignerIdFromDialogPath(
+        newDialog,
+        `content.triggers[${index}].actions[5].elseActions[0].activity`
+      );
+      const lgTemplates1: LgTemplate[] = [
+        LgTemplateSamples.TextInputPromptForOnChooseIntent(designerId1) as LgTemplate,
+        LgTemplateSamples.SendActivityForOnChooseIntent(designerId2) as LgTemplate,
+      ];
+
+      let lgTemplates2: LgTemplate[] = [
+        LgTemplateSamples.adaptiveCardJson as LgTemplate,
+        LgTemplateSamples.whichOneDidYouMean as LgTemplate,
+        LgTemplateSamples.pickOne as LgTemplate,
+        LgTemplateSamples.getAnswerReadBack as LgTemplate,
+        LgTemplateSamples.getIntentReadBack as LgTemplate,
+      ];
+      const commonlgFile = lgFiles.find(({ id }) => id === `common.${locale}`);
+
+      lgTemplates2 = lgTemplates2.filter(
+        (t) => commonlgFile?.templates.findIndex((clft) => clft.name === t.name) === -1
+      );
+
+      await createLgTemplates({ id: `common.${locale}`, templates: lgTemplates2, projectId });
+      await createLgTemplates({ id: lgFile.id, templates: lgTemplates1, projectId });
+    }
+    const dialogPayload = {
+      id: newDialog.id,
+      projectId,
+      content: newDialog.content,
+    };
+    await updateDialog(dialogPayload);
+    if (autoSelected) {
+      selectTo(projectId, newDialog.id, `triggers[${index}]`);
+    }
+  };
+
+  const deleteTrigger = (dialogId: string, trigger: ITriggerCondition) => {
+    if (!trigger) return;
+
+    // Clean the lu resource on intent trigger
+    if (get(trigger, '$kind') === SDKKinds.OnIntent) {
+      const triggerIntent = get(trigger, 'intent', '') as string;
+      removeLuIntent(dialogId, triggerIntent);
+    }
+
+    // Clean action resources
+    const actions = get(trigger, 'actions') as BaseSchema[];
+    if (!actions || !Array.isArray(actions)) return;
+
+    deleteActions(dialogId, actions);
+  };
+
+  const createQnATrigger = async (id) => {
+    const targetDialog = state.dialogs.find((item) => item.id === id);
+    if (!targetDialog) throw new Error(`dialog ${id} not found`);
+    const existedQnATrigger = get(targetDialog, 'content.triggers', []).find(
+      (item) => item.$kind === SDKKinds.OnQnAMatch
+    );
+    if (!existedQnATrigger) {
+      await createTriggerHandler(id, defaultQnATriggerData);
+    }
+  };
 
-function createTriggerApi(projectId: string, dispatchers: Dispatcher) {
   return {
-    createTrigger: (dialogId: string, formData: TriggerFormData, autoSelected = true) =>
-      dispatchers.createTrigger(projectId, dialogId, formData, autoSelected),
-    deleteTrigger: (dialogId: string, trigger: ITriggerCondition) =>
-      dispatchers.deleteTrigger(projectId, dialogId, trigger),
-    createQnATrigger: (dialogId: string) => dispatchers.createQnATrigger(projectId, dialogId),
+    createTrigger: createTriggerHandler,
+    deleteTrigger,
+    createQnATrigger,
   };
 }
 
 export function useTriggerApi(projectId: string) {
+  const schemas = useRecoilValue(schemasState(projectId));
+  const lgFiles = useRecoilValue(lgFilesState(projectId));
+  const dialogs = useRecoilValue(dialogsSelectorFamily(projectId));
+  const locale = useRecoilValue(localeState(projectId));
+  const { deleteActions } = useActionApi(projectId);
+  const { removeLuIntent } = useLuApi(projectId);
+
   const dispatchers = useRecoilValue(dispatcherState);
-  const [api, setApi] = useState(createTriggerApi(projectId, dispatchers));
+  const { luFileResolver, lgFileResolver, dialogResolver } = useResolvers(projectId);
+  const [api, setApi] = useState(
+    createTriggerApi(
+      { projectId, schemas, dialogs, locale, lgFiles },
+      dispatchers,
+      luFileResolver,
+      lgFileResolver,
+      dialogResolver,
+      deleteActions,
+      removeLuIntent
+    )
+  );
 
   useEffect(() => {
-    const newApi = createTriggerApi(projectId, dispatchers);
+    const newApi = createTriggerApi(
+      { projectId, schemas, dialogs, locale, lgFiles },
+      dispatchers,
+      luFileResolver,
+      lgFileResolver,
+      dialogResolver,
+      deleteActions,
+      removeLuIntent
+    );
     setApi(newApi);
     return () => {
       Object.keys(newApi).forEach((apiName) => {
@@ -34,7 +190,7 @@ export function useTriggerApi(projectId: string) {
         }
       });
     };
-  }, [projectId]);
+  }, [projectId, schemas, dialogs, locale, lgFiles]);
 
   return api;
 }
diff --git a/Composer/packages/client/src/shell/useShell.ts b/Composer/packages/client/src/shell/useShell.ts
index 6c7b46030..af0748195 100644
--- a/Composer/packages/client/src/shell/useShell.ts
+++ b/Composer/packages/client/src/shell/useShell.ts
@@ -2,19 +2,10 @@
 // Licensed under the MIT License.
 
 import { useMemo, useRef } from 'react';
-import {
-  ShellApi,
-  ShellData,
-  Shell,
-  DialogSchemaFile,
-  DialogInfo,
-  FeatureFlagKey,
-  SDKKinds,
-} from '@botframework-composer/types';
+import { ShellApi, ShellData, Shell, DialogSchemaFile, DialogInfo, FeatureFlagKey } from '@botframework-composer/types';
 import { useRecoilValue } from 'recoil';
 import formatMessage from 'format-message';
 
-import httpClient from '../utils/httpUtil';
 import { updateRegExIntent, renameRegExIntent, updateIntentTrigger } from '../utils/dialogUtil';
 import { getDialogData, setDialogData } from '../utils/dialogUtil';
 import { isAbsHosted } from '../utils/envUtil';
@@ -26,6 +17,7 @@ import {
   schemasState,
   validateDialogsSelectorFamily,
   focusPathState,
+  skillsState,
   localeState,
   qnaFilesState,
   designPageLocationState,
@@ -38,7 +30,7 @@ import {
   featureFlagsState,
 } from '../recoilModel';
 import { undoFunctionState } from '../recoilModel/undo/history';
-import { skillsStateSelector } from '../recoilModel/selectors';
+import httpClient from '../utils/httpUtil';
 import { navigateTo } from '../utils/navigation';
 import { OpenConfirmModal } from '../components/Modal/ConfirmDialog';
 
@@ -78,7 +70,7 @@ export function useShell(source: EventSource, projectId: string): Shell {
   const schemas = useRecoilValue(schemasState(projectId));
   const dialogs = useRecoilValue(validateDialogsSelectorFamily(projectId));
   const focusPath = useRecoilValue(focusPathState(projectId));
-  const skills = useRecoilValue(skillsStateSelector);
+  const skills = useRecoilValue(skillsState(projectId));
   const locale = useRecoilValue(localeState(projectId));
   const qnaFiles = useRecoilValue(qnaFilesState(projectId));
   const undoFunction = useRecoilValue(undoFunctionState(projectId));
@@ -91,10 +83,8 @@ export function useShell(source: EventSource, projectId: string): Shell {
   const settings = useRecoilValue(settingsState(projectId));
   const flowZoomRate = useRecoilValue(rateInfoState);
   const rootBotProjectId = useRecoilValue(rootBotProjectIdSelector);
-  const isRootBot = rootBotProjectId === projectId;
-
   const userSettings = useRecoilValue(userSettingsState);
-  const clipboardActions = useRecoilValue(clipboardActionsState(projectId));
+  const clipboardActions = useRecoilValue(clipboardActionsState);
   const featureFlags = useRecoilValue(featureFlagsState);
   const {
     updateDialog,
@@ -105,15 +95,16 @@ export function useShell(source: EventSource, projectId: string): Shell {
     selectTo,
     setVisualEditorSelection,
     setVisualEditorClipboard,
+    addSkillDialogBegin,
     onboardingAddCoachMarkRef,
     updateUserSettings,
     setMessage,
     displayManifestModal,
-    updateSkillsDataInBotProjectFile: updateEndpointInBotProjectFile,
+    updateSkill,
     updateZoomRate,
+    updateRecognizer,
     reloadProject,
     setApplicationLevelError,
-    updateRecognizer,
   } = useRecoilValue(dispatcherState);
 
   const lgApi = useLgApi(projectId);
@@ -156,6 +147,10 @@ export function useShell(source: EventSource, projectId: string): Shell {
     await navTo(projectId, path, rest);
   }
 
+  async function openDialog(dialogId: string) {
+    await navTo(projectId, dialogId, '"beginDialog"');
+  }
+
   async function focusEvent(subPath) {
     if (rootBotProjectId == null) return;
     await selectTo(projectId, dialogId, subPath);
@@ -218,10 +213,11 @@ export function useShell(source: EventSource, projectId: string): Shell {
     renameRegExIntent: renameRegExIntentHandler,
     updateIntentTrigger: updateIntentTriggerHandler,
     navTo: navigationTo,
+    onOpenDialog: openDialog,
     onFocusEvent: focusEvent,
     onFocusSteps: focusSteps,
     onSelect: setVisualEditorSelection,
-    onCopy: (clipboardActions) => setVisualEditorClipboard(clipboardActions, projectId),
+    onCopy: setVisualEditorClipboard,
     createDialog: (actionsSeed) => {
       return new Promise((resolve) => {
         createDialogBegin(
@@ -233,17 +229,22 @@ export function useShell(source: EventSource, projectId: string): Shell {
         );
       });
     },
+    addSkillDialog: () => {
+      return new Promise((resolve) => {
+        addSkillDialogBegin((newSkill: { manifestUrl: string; name: string } | null) => {
+          resolve(newSkill);
+        }, projectId);
+      });
+    },
     undo,
     redo,
     commitChanges,
-    displayManifestModal: (skillId) => displayManifestModal(skillId),
+    displayManifestModal: (skillId) => displayManifestModal(skillId, projectId),
     isFeatureEnabled: (featureFlagKey: FeatureFlagKey): boolean => featureFlags?.[featureFlagKey]?.enabled ?? false,
     updateDialogSchema: async (dialogSchema: DialogSchemaFile) => {
       updateDialogSchema(dialogSchema, projectId);
     },
-    updateSkill: async (skillId: string, skillsData) => {
-      updateEndpointInBotProjectFile(skillId, skillsData.skill, skillsData.selectedEndpointIndex);
-    },
+    updateSkillSetting: (...params) => updateSkill(projectId, ...params),
     updateFlowZoomRate,
     reloadProject: () => reloadProject(projectId),
     ...lgApi,
@@ -261,15 +262,10 @@ export function useShell(source: EventSource, projectId: string): Shell {
     confirm: OpenConfirmModal,
   };
 
-  const currentDialog = useMemo(() => {
-    let result: any = dialogs.find((d) => d.id === dialogId) ?? dialogs.find((dialog) => dialog.isRoot);
-    if (!result) {
-      // Should not hit here as the seed content should atleast be the root dialog if no current dialog
-      result = stubDialog();
-    }
-    return result;
-  }, [dialogs, dialogId]);
-
+  const currentDialog = useMemo(() => dialogs.find((d) => d.id === dialogId) ?? stubDialog(), [
+    dialogs,
+    dialogId,
+  ]) as DialogInfo;
   const editorData = useMemo(() => {
     return source === 'PropertyEditor'
       ? getDialogData(dialogsMap, dialogId, focused || selected || '')
@@ -301,14 +297,6 @@ export function useShell(source: EventSource, projectId: string): Shell {
     skills,
     skillsSettings: settings.skill || {},
     flowZoomRate,
-    forceDisabledActions: isRootBot
-      ? []
-      : [
-          {
-            kind: SDKKinds.BeginSkill,
-            reason: formatMessage('You can only connect to a skill in the root bot.'),
-          },
-        ],
     settings,
     httpClient,
   };
diff --git a/Composer/packages/client/src/utils/buildUtil.ts b/Composer/packages/client/src/utils/buildUtil.ts
index 5c164f27e..e7ac1314f 100644
--- a/Composer/packages/client/src/utils/buildUtil.ts
+++ b/Composer/packages/client/src/utils/buildUtil.ts
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { DialogInfo, LuFile, QnAFile, SDKKinds } from '@bfc/shared';
+import { DialogInfo, LuFile, QnAFile } from '@bfc/shared';
 
 import { LuisConfig, QnaConfig } from '../constants';
 
@@ -66,23 +66,3 @@ export function isKeyRequired(dialogs: DialogInfo[], luFiles: LuFile[], qnaFiles
 export function needsBuild(dialogs) {
   return dialogs.some((dialog) => typeof dialog.content.recognizer === 'string');
 }
-
-//ToDo: every recognizer need to get recognizer type from the dialog's recognizer field.
-//now CrossTrainedRecognizerSet and LuisRecognizer's recognizer is abbreviated
-//as recognizer: '***.lu.qna'
-export function getRecognizerTypes(dialogs: DialogInfo[]) {
-  return dialogs.reduce((result, { id, content }) => {
-    const { recognizer } = content;
-    if (typeof recognizer === 'string') {
-      if (recognizer.endsWith('.lu.qna')) {
-        result[id] = SDKKinds.CrossTrainedRecognizerSet;
-      }
-      if (recognizer.endsWith('.lu')) {
-        result[id] = SDKKinds.LuisRecognizer;
-      }
-    } else {
-      result[id] = '';
-    }
-    return result;
-  }, {});
-}
diff --git a/Composer/packages/client/src/utils/dialogValidator.ts b/Composer/packages/client/src/utils/dialogValidator.ts
index 7b35c2cf9..fe7e85037 100644
--- a/Composer/packages/client/src/utils/dialogValidator.ts
+++ b/Composer/packages/client/src/utils/dialogValidator.ts
@@ -1,13 +1,11 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 import get from 'lodash/get';
-import { DialogInfo, ITrigger, LuFile, QnAFile } from '@bfc/shared';
+import { DialogInfo, ITrigger } from '@bfc/shared';
 
 import { regexRecognizerKey, onChooseIntentKey, qnaMatcherKey } from '../utils/dialogUtil';
 import { triggerNotSupportedWarning } from '../constants';
 
-import { getBaseName } from './fileUtil';
-
 export const isRegExRecognizerType = (dialog: DialogInfo | undefined) => {
   if (!dialog) return false;
   return get(dialog, 'content.recognizer.$kind', '') === regexRecognizerKey;
@@ -38,19 +36,3 @@ export const triggerNotSupported = (dialog: DialogInfo | undefined, trigger: ITr
   }
   return '';
 };
-
-export const isLUISMandatory = (dialogs: DialogInfo[], luFiles: LuFile[]) => {
-  return dialogs.some((dialog) => {
-    const isDefault = isLUISnQnARecognizerType(dialog);
-    const luFile = luFiles.find((luFile) => getBaseName(luFile.id) === dialog.id);
-    return !!(isDefault && luFile?.content);
-  });
-};
-
-export const isQnAKeyMandatory = (dialogs: DialogInfo[], qnaFiles: QnAFile[]) => {
-  return dialogs.some((dialog) => {
-    const isDefault = isLUISnQnARecognizerType(dialog);
-    const qnaFile = qnaFiles.find((qnaFile) => getBaseName(qnaFile.id) === dialog.id);
-    return !!(isDefault && qnaFile?.content);
-  });
-};
diff --git a/Composer/packages/client/src/utils/fileUtil.ts b/Composer/packages/client/src/utils/fileUtil.ts
index 60d1794ed..f608a9896 100644
--- a/Composer/packages/client/src/utils/fileUtil.ts
+++ b/Composer/packages/client/src/utils/fileUtil.ts
@@ -121,7 +121,5 @@ export const getFileNameFromPath = (param: string, ext: string | undefined = und
 };
 
 export const getAbsolutePath = (basePath: string, relativePath: string) => {
-  // note: in windows, path.resolve result will prefix with /
-  // https://github.com/jinder/path/issues/18
   return path.resolve(basePath, relativePath);
 };
diff --git a/Composer/packages/client/src/utils/hooks.ts b/Composer/packages/client/src/utils/hooks.ts
index a32ad9a9d..eefa76d65 100644
--- a/Composer/packages/client/src/utils/hooks.ts
+++ b/Composer/packages/client/src/utils/hooks.ts
@@ -1,13 +1,12 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { useState, useEffect, useRef, useMemo, MutableRefObject } from 'react';
+import { useState, useEffect, useRef, useMemo } from 'react';
 import { globalHistory } from '@reach/router';
 import replace from 'lodash/replace';
 import find from 'lodash/find';
 import { useRecoilValue } from 'recoil';
-import { FeatureFlagKey } from '@bfc/shared';
-import isFunction from 'lodash/isFunction';
+import { FeatureFlagKey } from '@botframework-composer/types';
 
 import {
   designPageLocationState,
@@ -45,15 +44,14 @@ export const useFeatureFlag = (featureFlagKey: FeatureFlagKey): boolean => {
 
 export const useLinks = () => {
   const projectId = useRecoilValue(currentProjectIdState);
-  const rootProjectId = useRecoilValue(rootBotProjectIdSelector);
   const designPageLocation = useRecoilValue(designPageLocationState(projectId));
   const pluginPages = useRecoilValue(pluginPagesSelector);
   const schemas = useRecoilValue(schemasState(projectId));
-  const openedDialogId = designPageLocation.dialogId;
+  const openedDialogId = designPageLocation.dialogId || 'Main';
   const showFormDialog = useFeatureFlag('FORM_DIALOG');
 
   const pageLinks = useMemo(() => {
-    return topLinks(projectId, openedDialogId, pluginPages, showFormDialog, schemas.sdk, rootProjectId);
+    return topLinks(projectId, openedDialogId, pluginPages, showFormDialog, schemas.sdk);
   }, [projectId, openedDialogId, pluginPages, showFormDialog]);
 
   return { topLinks: pageLinks, bottomLinks };
@@ -96,56 +94,21 @@ export const useProjectIdCache = () => {
   return projectId;
 };
 
-export function useInterval(callback: Function, delay: number | null) {
-  const savedCallback: MutableRefObject<Function | undefined> = useRef();
+export const useInterval = (callback, delay) => {
+  const savedCallback = useRef<() => void>();
 
-  // Remember the latest callback.
   useEffect(() => {
     savedCallback.current = callback;
   }, [callback]);
 
-  // Set up the interval.
   useEffect(() => {
-    function tick() {
-      if (isFunction(savedCallback.current)) {
-        savedCallback.current();
-      }
-    }
-    if (delay != null) {
-      const id = setInterval(tick, delay);
-      return () => clearInterval(id);
+    if (delay !== null) {
+      const interval = setInterval(() => {
+        if (typeof savedCallback.current === 'function') {
+          savedCallback.current();
+        }
+      }, delay);
+      return () => clearInterval(interval);
     }
   }, [delay]);
-}
-
-export function useClickOutside(targetRefs: MutableRefObject<HTMLElement | null>[] | null, callback: Function) {
-  const savedCallback: MutableRefObject<Function | undefined> = useRef();
-
-  const isClickInsideTargets = (currentClickTarget: Node) => {
-    const isClickedInside = targetRefs?.find((ref) => {
-      const result = currentClickTarget && ref?.current?.contains(currentClickTarget);
-      return !!result;
-    });
-    return isClickedInside;
-  };
-
-  const handleEvent = (e: MouseEvent) => {
-    if (targetRefs && e.target !== null && isFunction(callback) && !isClickInsideTargets(e.target as Node)) {
-      callback(e);
-    }
-  };
-
-  useEffect(() => {
-    savedCallback.current = callback;
-  }, [callback]);
-
-  useEffect(() => {
-    document.addEventListener('click', handleEvent);
-    document.addEventListener('mousedown', handleEvent);
-
-    return () => {
-      document.removeEventListener('click', handleEvent);
-      document.removeEventListener('mousedown', handleEvent);
-    };
-  }, [targetRefs, callback]);
-}
+};
diff --git a/Composer/packages/client/src/utils/navigation.ts b/Composer/packages/client/src/utils/navigation.ts
index 7198e0b32..7a8432d25 100644
--- a/Composer/packages/client/src/utils/navigation.ts
+++ b/Composer/packages/client/src/utils/navigation.ts
@@ -5,8 +5,6 @@ import { navigate, NavigateOptions } from '@reach/router';
 
 import { DesignPageLocation } from '../recoilModel/types';
 import { BASEPATH } from '../constants';
-import { TreeLink } from '../components/ProjectTree/ProjectTree';
-import { PageMode } from '../recoilModel';
 
 import { parsePathToFocused } from './convertUtils/parsePathToFocused';
 import { parsePathToSelected } from './convertUtils/parsePathToSelected';
@@ -56,6 +54,7 @@ export function checkUrl(
 
 export interface NavigationState {
   breadcrumb?: string[];
+  qnaKbUrls?: string[];
 }
 
 export function convertPathToUrl(
@@ -114,32 +113,3 @@ export const openInEmulator = (url, authSettings: { MicrosoftAppId: string; Micr
   }&msaAppPassword=${encodeURIComponent(authSettings.MicrosoftAppPassword)}`;
   document.body.appendChild(i);
 };
-
-export function buildURL(pageMode: PageMode, link: Partial<TreeLink>) {
-  const { projectId, skillId, dialogId } = link;
-
-  const baseURL = skillId == null ? `/bot/${projectId}/` : `/bot/${projectId}/skill/${skillId}/`;
-
-  return `${baseURL}${pageMode}/${dialogId ?? 'all'}`;
-}
-
-export function createBotSettingUrl(rootProjectId: string, activeProjectId?: string, hash?: string) {
-  let url = `/bot/${rootProjectId}`;
-  if (activeProjectId && rootProjectId !== activeProjectId) {
-    url = `${url}/skill/${activeProjectId}`;
-  }
-  url = `${url}/botProjectsSettings`;
-  if (hash) {
-    url = `${url}/${hash}`;
-  }
-  return url;
-}
-
-export function createDiagnosticsPageUrl(rootProjectId: string, activeProjectId?: string) {
-  let url = `/bot/${rootProjectId}`;
-  if (activeProjectId && rootProjectId !== activeProjectId) {
-    url = `${url}/skill/${activeProjectId}`;
-  }
-
-  return `${url}/diagnostics`;
-}
diff --git a/Composer/packages/client/src/utils/pageLinks.ts b/Composer/packages/client/src/utils/pageLinks.ts
index 1d8743dd2..87b18fb3d 100644
--- a/Composer/packages/client/src/utils/pageLinks.ts
+++ b/Composer/packages/client/src/utils/pageLinks.ts
@@ -11,69 +11,66 @@ export const topLinks = (
   openedDialogId: string,
   pluginPages: ExtensionPageConfig[],
   showFormDialog: boolean,
-  schema: any,
-  rootProjectId?: string
+  schema: any
 ) => {
   const botLoaded = !!projectId;
-  const linkBase =
-    projectId === rootProjectId || rootProjectId == null
-      ? `/bot/${projectId}/`
-      : `/bot/${rootProjectId}/skill/${projectId}/`;
 
   let links = [
     {
       to: '/home',
       iconName: 'Home',
       labelName: formatMessage('Home'),
+      exact: true,
       disabled: false,
     },
     {
-      to: linkBase + `dialogs/${openedDialogId}`,
+      to: `/bot/${projectId}/dialogs/${openedDialogId}`,
       iconName: 'SplitObject',
       labelName: formatMessage('Design'),
+      exact: false,
       disabled: !botLoaded,
-      match: /(bot\/[0-9.]+)$|(bot\/[0-9.]+\/skill\/[0-9.]+)$/,
     },
     {
-      to: linkBase + `language-generation/${openedDialogId}`,
+      to: `/bot/${projectId}/language-generation`,
       iconName: 'Robot',
       labelName: formatMessage('Bot Responses'),
+      exact: false,
       disabled: !botLoaded,
-      match: /language-generation\/[a-zA-Z0-9_-]+$/,
     },
     {
-      to: linkBase + `language-understanding/${openedDialogId}`,
+      to: `/bot/${projectId}/language-understanding`,
       iconName: 'People',
       labelName: formatMessage('User Input'),
+      exact: false,
       disabled: !botLoaded,
-      match: /language-understanding\/[a-zA-Z0-9_-]+$/,
     },
     {
-      to: linkBase + `knowledge-base/${openedDialogId}`,
+      to: `/bot/${projectId}/knowledge-base`,
       iconName: 'QnAIcon',
       labelName: formatMessage('QnA'),
+      exact: true,
       disabled: !botLoaded,
-      match: /knowledge-base\/[a-zA-Z0-9_-]+$/,
     },
     {
-      to: `/bot/${rootProjectId || projectId}/diagnostics`,
+      to: `/bot/${projectId}/notifications`,
       iconName: 'Warning',
-      labelName: formatMessage('Diagnostics'),
+      labelName: formatMessage('Notifications'),
+      exact: true,
       disabled: !botLoaded,
-      match: /diagnostics/,
     },
     {
-      to: `/bot/${rootProjectId || projectId}/publish`,
+      to: `/bot/${projectId}/publish`,
       iconName: 'CloudUpload',
       labelName: formatMessage('Publish'),
+      exact: true,
       disabled: !botLoaded,
     },
     {
-      to: `/bot/${rootProjectId || projectId}/botProjectsSettings`,
-      iconName: 'BotProjectsSettings',
-      labelName: formatMessage('Project Settings'),
+      to: `/bot/${projectId}/skills`,
+      iconName: 'PlugDisconnected',
+      labelName: formatMessage('Skills'),
+      exact: true,
       disabled: !botLoaded,
-      match: /botProjectsSettings/,
     },
     ...(showFormDialog
       ? [
@@ -81,6 +78,7 @@ export const topLinks = (
             to: `/bot/${projectId}/forms`,
             iconName: 'Table',
             labelName: formatMessage('Forms (preview)'),
+            exact: false,
             disabled: !botLoaded,
           },
         ]
@@ -98,6 +96,7 @@ export const topLinks = (
         to: `/bot/${projectId}/plugin/${p.id}/${p.bundleId}`,
         iconName: p.icon ?? 'StatusCircleQuestionMark',
         labelName: p.label,
+        exact: true,
         disabled: !projectId,
       });
     });
@@ -110,7 +109,8 @@ export const bottomLinks = [
   {
     to: `/settings`,
     iconName: 'Settings',
-    labelName: formatMessage('Composer Settings'),
+    labelName: formatMessage('Settings'),
+    exact: false,
     disabled: false,
   },
 ];
diff --git a/Composer/packages/electron-server/babel.l10n.config.js b/Composer/packages/electron-server/babel.l10n.config.js
index a3793530d..0a05ddeaa 100644
--- a/Composer/packages/electron-server/babel.l10n.config.js
+++ b/Composer/packages/electron-server/babel.l10n.config.js
@@ -4,5 +4,5 @@
 module.exports = {
   presets: ['@babel/react', ['@babel/typescript', { allowNamespaces: true }]],
   plugins: ['@babel/plugin-proposal-class-properties'],
-  ignore: ['**/__tests__', 'node_modules/**', 'build/**/*.js', 'dist/**'],
+  ignore: ['**/__tests__', '**/node_modules', '**/build', '**/dist', '**/scripts'],
 };
diff --git a/Composer/packages/extension-client/src/hooks/__tests__/useMenuConfig.test.tsx b/Composer/packages/extension-client/src/hooks/__tests__/useMenuConfig.test.tsx
index 865f45a2b..bf78dbc36 100644
--- a/Composer/packages/extension-client/src/hooks/__tests__/useMenuConfig.test.tsx
+++ b/Composer/packages/extension-client/src/hooks/__tests__/useMenuConfig.test.tsx
@@ -42,7 +42,7 @@ describe('useMenuConfig', () => {
   it('returns a map of sdk kinds to their menu config', () => {
     const { result } = renderHook(() => useMenuConfig(), { wrapper });
 
-    expect(result.current.menuSchema).toEqual({
+    expect(result.current).toEqual({
       foo: 'foo menu config',
       bar: 'bar menu config',
     });
diff --git a/Composer/packages/extension-client/src/hooks/useMenuConfig.ts b/Composer/packages/extension-client/src/hooks/useMenuConfig.ts
index 5ceea30fa..f51c4909b 100644
--- a/Composer/packages/extension-client/src/hooks/useMenuConfig.ts
+++ b/Composer/packages/extension-client/src/hooks/useMenuConfig.ts
@@ -3,17 +3,15 @@
 
 import { useContext, useMemo } from 'react';
 import mapValues from 'lodash/mapValues';
-import { DisabledMenuActions } from '@botframework-composer/types';
 
 import { EditorExtensionContext } from '../EditorExtensionContext';
 import { MenuUISchema } from '../types';
 
-export function useMenuConfig(): { menuSchema: MenuUISchema; forceDisabledActions: DisabledMenuActions[] } {
+export function useMenuConfig(): MenuUISchema {
   const { plugins, shellData } = useContext(EditorExtensionContext);
   const uiSchema = plugins.uiSchema || {};
   const sdkSchema = shellData.schemas?.sdk;
   const sdkDefinitions = sdkSchema?.content?.definitions || {};
-  const forceDisabledActions = shellData.forceDisabledActions;
 
   return useMemo(() => {
     const menuSchema = mapValues(uiSchema, 'menu') as MenuUISchema;
@@ -26,6 +24,6 @@ export function useMenuConfig(): { menuSchema: MenuUISchema; forceDisabledAction
       }
     });
 
-    return { menuSchema: implementedMenuSchema, forceDisabledActions };
+    return implementedMenuSchema;
   }, [plugins.uiSchema, sdkSchema]);
 }
diff --git a/Composer/packages/lib/indexers/__tests__/botIndexer.test.ts b/Composer/packages/lib/indexers/__tests__/botIndexer.test.ts
index e0918c3e3..9f56f91ec 100644
--- a/Composer/packages/lib/indexers/__tests__/botIndexer.test.ts
+++ b/Composer/packages/lib/indexers/__tests__/botIndexer.test.ts
@@ -11,53 +11,43 @@ import {
   ILUFeaturesConfig,
   IQnAConfig,
   SkillSetting,
-  QnAFile,
 } from '@bfc/shared';
 
 import { BotIndexer } from '../src/botIndexer';
-const { checkManifest, checkSetting, checkSkillSetting, checkLUISLocales, filterLUISFilesToPublish } = BotIndexer;
+const { checkSkillSetting, checkLUISLocales, filterLUISFilesToPublish } = BotIndexer;
 
 const botAssets: BotAssets = {
   projectId: 'test',
   botProjectFile: {
     id: 'test',
     content: {
+      workspace: '',
       name: '',
-      skills: {
-        'Email-Skill': {
-          workspace: '',
-          remote: false,
-        },
-      },
+      skills: {},
     },
     lastModified: '',
   },
-  jsonSchemaFiles: [],
-  recognizers: [],
-  formDialogSchemas: [],
-  crossTrainConfig: {},
   dialogSchemas: [],
   qnaFiles: [],
   lgFiles: [],
+  qnaFiles: [],
+  dialogSchemas: [],
   luFiles: [
     {
       id: 'a.en-us',
-      empty: false,
     } as LuFile,
     {
       id: 'a.zh-cn',
-      empty: true,
     } as LuFile,
     {
       id: 'a.ar',
-      empty: true,
     } as LuFile,
   ],
   skillManifests: [],
   dialogs: [
     {
       luFile: 'a.lu',
-      skills: ['Email-Skill', 'Calendar-Skill'],
+      skills: [`=settings.skill['Email-Skill'].endpointUrl`, `=settings.skill['Calendar-Skill'].endpointUrl`],
     } as DialogInfo,
   ],
   setting: {
@@ -80,63 +70,6 @@ const botAssets: BotAssets = {
   } as DialogSetting,
 };
 
-describe('check manifest', () => {
-  it('manifest file should exist', () => {
-    const diagnostics = checkManifest(botAssets);
-    expect(diagnostics.length).toEqual(1);
-  });
-});
-
-describe('check LUIS & QnA key', () => {
-  it('LUIS authoringKey should exist in setting', () => {
-    const diagnostics = checkSetting(botAssets);
-    expect(diagnostics.length).toEqual(1);
-  });
-
-  it('LUIS authoringKey should exist in setting', () => {
-    const mergedSettings = {
-      ...botAssets.setting,
-      luis: { authoringKey: '4d210acc6d794d71a2a3450*****2fb7', endpointKey: '' } as ILuisConfig,
-    };
-    const diagnostics = checkSetting({ ...botAssets, setting: mergedSettings });
-    expect(diagnostics.length).toEqual(0);
-  });
-
-  it('QnA subscriptionKey should exist in setting, when qna file is not empty', () => {
-    const botAssets2 = {
-      ...botAssets,
-      dialogs: [
-        {
-          luFile: 'a.lu',
-          qnaFile: 'a.lu.qna',
-        } as DialogInfo,
-      ],
-      qnaFiles: [
-        {
-          id: 'a.en-us',
-          empty: false,
-        } as QnAFile,
-      ],
-    };
-    const diagnostics = checkSetting(botAssets2);
-    expect(diagnostics.length).toEqual(2);
-  });
-
-  it('QnA subscriptionKey should exist in setting, when qna file is empty', () => {
-    const botAssets2 = {
-      ...botAssets,
-      dialogs: [
-        {
-          luFile: 'a.lu',
-          qnaFile: 'a.lu.qna',
-        } as DialogInfo,
-      ],
-    };
-    const diagnostics = checkSetting(botAssets2);
-    expect(diagnostics.length).toEqual(1);
-  });
-});
-
 describe('checkLUISLocales', () => {
   it('should check luis not supported locales', () => {
     const diagnostics = checkLUISLocales(botAssets);
@@ -153,7 +86,7 @@ describe('checkSkillSetting', () => {
     const errors = diagnostics.filter((item) => item.severity === DiagnosticSeverity.Error);
     const warnings = diagnostics.filter((item) => item.severity === DiagnosticSeverity.Warning);
     expect(errors.length).toEqual(1);
-    expect(warnings.length).toEqual(0);
+    expect(warnings.length).toEqual(1);
   });
 });
 
diff --git a/Composer/packages/lib/indexers/src/botIndexer.ts b/Composer/packages/lib/indexers/src/botIndexer.ts
index 67d00fcec..61bf195ca 100644
--- a/Composer/packages/lib/indexers/src/botIndexer.ts
+++ b/Composer/packages/lib/indexers/src/botIndexer.ts
@@ -3,103 +3,24 @@
 /**
  * Verify bot settings, files meet LUIS/QnA requirments.
  */
-import get from 'lodash/get';
+
 import {
+  BotAssets,
+  BotInfo,
   LUISLocales,
   Diagnostic,
   DiagnosticSeverity,
   LuFile,
   getSkillNameFromSetting,
-  SkillManifestFile,
-  DialogInfo,
-  DialogSetting,
-  LgFile,
-  QnAFile,
-  BotProjectFile,
-  SDKKinds,
+  fetchFromSettings,
 } from '@bfc/shared';
 import difference from 'lodash/difference';
+import map from 'lodash/map';
 
-import { getBaseName, getLocale } from './utils/help';
-
-/**
- * Check skill manifest.json.
- * 1. Manifest should exist
- */
-const checkManifest = (assets: { skillManifests: SkillManifestFile[] }): Diagnostic[] => {
-  const { skillManifests } = assets;
-
-  const diagnostics: Diagnostic[] = [];
-  if (skillManifests.length === 0) {
-    diagnostics.push(new Diagnostic('Missing skill manifest', 'manifest.json', DiagnosticSeverity.Warning));
-  }
-  return diagnostics;
-};
-
-/**
- * Check skill appsettings.json.
- * 1. Missing LUIS key
- * 2. Missing QnA Maker subscription key.
- */
-const checkSetting = (assets: {
-  dialogs: DialogInfo[];
-  lgFiles: LgFile[];
-  luFiles: LuFile[];
-  qnaFiles: QnAFile[];
-  setting: DialogSetting;
-}): Diagnostic[] => {
-  const { dialogs, setting, luFiles, qnaFiles } = assets;
-  const diagnostics: Diagnostic[] = [];
-
-  let useLUIS = false;
-  let useQnA = false;
-  dialogs.forEach((dialogItem) => {
-    const luFileName = dialogItem.luFile;
-    if (luFileName) {
-      const luFileId = luFileName.replace(/\.lu$/, '');
-      luFiles
-        .filter(({ id }) => getBaseName(id) === luFileId)
-        .forEach((item) => {
-          if (!item.empty && (dialogItem.luProvider === undefined || dialogItem.luProvider === SDKKinds.LuisRecognizer))
-            useLUIS = true;
-        });
-    }
-
-    const qnaFileName = dialogItem.qnaFile;
-    if (qnaFileName) {
-      const qnaFileId = qnaFileName.replace(/\.qna$/, '').replace(/\.lu$/, '');
-      qnaFiles
-        .filter(({ id }) => getBaseName(id) === qnaFileId)
-        .forEach((item) => {
-          if (!item.empty) useQnA = true;
-        });
-    }
-  });
-
-  // if use LUIS, check LUIS authoringKey key
-  if (useLUIS) {
-    if (!get(setting, 'luis.authoringKey')) {
-      diagnostics.push(new Diagnostic('Missing LUIS key', 'appsettings.json', DiagnosticSeverity.Error, '#luisKey'));
-    }
-  }
+import { getLocale } from './utils/help';
 
-  // if use QnA, check QnA subscriptionKey
-  if (useQnA) {
-    if (!get(setting, 'qna.subscriptionKey')) {
-      diagnostics.push(
-        new Diagnostic('Missing QnA Maker subscription key', 'appsettings.json', DiagnosticSeverity.Error, '#qnaKey')
-      );
-    }
-  }
-
-  return diagnostics;
-};
-
-/**
- * Check bot settings & dialog
- * files meet LUIS/QnA requirments.
- */
-const checkLUISLocales = (assets: { dialogs: DialogInfo[]; setting: DialogSetting }): Diagnostic[] => {
+// Verify bot settings, files meet LUIS/QnA requirments.
+const checkLUISLocales = (assets: BotAssets): Diagnostic[] => {
   const {
     dialogs,
     setting: { languages },
@@ -115,18 +36,20 @@ const checkLUISLocales = (assets: { dialogs: DialogInfo[]; setting: DialogSettin
   });
 };
 
-/**
- * Check bot skill & setting
- * 1. used skill not existed in *.botproj
- */
-const checkSkillSetting = (assets: { dialogs: DialogInfo[]; botProjectFile: BotProjectFile }): Diagnostic[] => {
-  const { botProjectFile, dialogs } = assets;
+// Verify bot skill setting.
+const checkSkillSetting = (assets: BotAssets): Diagnostic[] => {
+  const {
+    setting: { skill = {}, botId, skillHostEndpoint },
+    dialogs,
+  } = assets;
   const diagnostics: Diagnostic[] = [];
-  const skillNames = Object.keys(botProjectFile.content?.skills || {});
+
+  let skillUsed = false;
   dialogs.forEach((dialog) => {
     // used skill not existed in setting
     dialog.skills.forEach((skillId) => {
-      if (!skillNames.includes(skillId)) {
+      const endpointUrlCollection = map(skill, ({ endpointUrl }) => endpointUrl);
+      if (!endpointUrlCollection.includes(fetchFromSettings(skillId, assets.setting))) {
         const skillName = getSkillNameFromSetting(skillId) || skillId;
         diagnostics.push(
           new Diagnostic(
@@ -137,26 +60,32 @@ const checkSkillSetting = (assets: { dialogs: DialogInfo[]; botProjectFile: BotP
         );
       }
     });
+    if (dialog.skills.length) skillUsed = true;
   });
 
+  // use skill require fill bot endpoint in skill page.
+  if (skillUsed && (!botId || !skillHostEndpoint)) {
+    diagnostics.push(
+      new Diagnostic(
+        'appsettings.json Microsoft App Id or Skill Host Endpoint are empty',
+        'appsettings.json',
+        DiagnosticSeverity.Warning
+      )
+    );
+  }
+
   return diagnostics;
 };
 
-const validate = (assets: {
-  dialogs: DialogInfo[];
-  lgFiles: LgFile[];
-  luFiles: LuFile[];
-  qnaFiles: QnAFile[];
-  setting: DialogSetting;
-  skillManifests: SkillManifestFile[];
-  botProjectFile: BotProjectFile;
-  isRemote?: boolean;
-  isRootBot?: boolean;
-}): Diagnostic[] => {
-  if (assets.isRemote) return [];
-  const settingDiagnostics = [...checkSetting(assets), ...checkLUISLocales(assets), ...checkSkillSetting(assets)];
-  if (assets.isRootBot) return settingDiagnostics;
-  return [...checkManifest(assets), ...settingDiagnostics];
+const index = (name: string, assets: BotAssets): BotInfo => {
+  const diagnostics: Diagnostic[] = [];
+  diagnostics.push(...checkLUISLocales(assets), ...checkSkillSetting(assets));
+
+  return {
+    name,
+    assets,
+    diagnostics,
+  };
 };
 
 const filterLUISFilesToPublish = (luFiles: LuFile[]): LuFile[] => {
@@ -167,9 +96,7 @@ const filterLUISFilesToPublish = (luFiles: LuFile[]): LuFile[] => {
 };
 
 export const BotIndexer = {
-  validate,
-  checkManifest,
-  checkSetting,
+  index,
   checkLUISLocales,
   checkSkillSetting,
   filterLUISFilesToPublish,
diff --git a/Composer/packages/lib/indexers/src/dialogIndexer.ts b/Composer/packages/lib/indexers/src/dialogIndexer.ts
index 80a0deec5..6c0ace12e 100644
--- a/Composer/packages/lib/indexers/src/dialogIndexer.ts
+++ b/Composer/packages/lib/indexers/src/dialogIndexer.ts
@@ -12,7 +12,6 @@ import {
   LgTemplateJsonPath,
   ReferredLuIntents,
   Diagnostic,
-  getSkillNameFromSetting,
 } from '@bfc/shared';
 import formatMessage from 'format-message';
 
@@ -158,12 +157,7 @@ function extractReferredDialogs(dialog): string[] {
   return uniq(dialogs);
 }
 
-//
-/**
- * find out all used skill from dialog
- *  skillEndpoint: "=settings.skill['oneNoteSync'].endpointUrl"
- */
-
+// find out all skill
 function extractReferredSkills(dialog): string[] {
   const skills: string[] = [];
   /**    *
@@ -174,8 +168,7 @@ function extractReferredSkills(dialog): string[] {
   const visitor: VisitorFunc = (path: string, value: any): boolean => {
     // it's a valid schema dialog node.
     if (has(value, '$kind') && value.$kind === SDKKinds.BeginSkill) {
-      const skillName = getSkillNameFromSetting(value.skillEndpoint);
-      if (skillName) skills.push(skillName);
+      skills.push(value.skillEndpoint);
     }
     return false;
   };
diff --git a/Composer/packages/lib/indexers/src/index.ts b/Composer/packages/lib/indexers/src/index.ts
index 029b87024..b10cda85c 100644
--- a/Composer/packages/lib/indexers/src/index.ts
+++ b/Composer/packages/lib/indexers/src/index.ts
@@ -9,13 +9,13 @@ import { jsonSchemaFileIndexer } from './jsonSchemaFileIndexer';
 import { lgIndexer } from './lgIndexer';
 import { luIndexer } from './luIndexer';
 import { qnaIndexer } from './qnaIndexer';
+import { skillIndexer } from './skillIndexer';
 import { skillManifestIndexer } from './skillManifestIndexer';
 import { botProjectSpaceIndexer } from './botProjectSpaceIndexer';
 import { FileExtensions } from './utils/fileExtensions';
 import { getExtension, getBaseName } from './utils/help';
 import { formDialogSchemaIndexer } from './formDialogSchemaIndexer';
 import { crossTrainConfigIndexer } from './crossTrainConfigIndexer';
-import { BotIndexer } from './botIndexer';
 
 class Indexer {
   private classifyFile(files: FileInfo[]) {
@@ -80,27 +80,25 @@ class Indexer {
     return lgImportResolverGenerator(lgFiles, '.lg', locale);
   };
 
-  public index(files: FileInfo[], botName: string, locale: string, settings: DialogSetting) {
+  public index(files: FileInfo[], botName: string, locale: string, skillContent: any, settings: DialogSetting) {
     const result = this.classifyFile(files);
     const luFeatures = settings.luFeatures;
     const { dialogs, recognizers } = this.separateDialogsAndRecognizers(result[FileExtensions.Dialog]);
     const { skillManifestFiles, crossTrainConfigs } = this.separateConfigAndManifests(result[FileExtensions.Manifest]);
-    const assets = {
+    return {
       dialogs: dialogIndexer.index(dialogs, botName),
       dialogSchemas: dialogSchemaIndexer.index(result[FileExtensions.DialogSchema]),
       lgFiles: lgIndexer.index(result[FileExtensions.lg], this.getLgImportResolver(result[FileExtensions.lg], locale)),
       luFiles: luIndexer.index(result[FileExtensions.Lu], luFeatures),
       qnaFiles: qnaIndexer.index(result[FileExtensions.QnA]),
-      skillManifests: skillManifestIndexer.index(skillManifestFiles),
+      skillManifestFiles: skillManifestIndexer.index(skillManifestFiles),
+      skills: skillIndexer.index(skillContent, settings.skill),
       botProjectSpaceFiles: botProjectSpaceIndexer.index(result[FileExtensions.BotProjectSpace]),
       jsonSchemaFiles: jsonSchemaFileIndexer.index(result[FileExtensions.Json]),
       formDialogSchemas: formDialogSchemaIndexer.index(result[FileExtensions.FormDialogSchema]),
       recognizers: recognizerIndexer.index(recognizers),
       crossTrainConfig: crossTrainConfigIndexer.index(crossTrainConfigs),
     };
-    const botProjectFile = assets.botProjectSpaceFiles[0];
-    const diagnostics = BotIndexer.validate({ ...assets, setting: settings, botProjectFile });
-    return { ...assets, diagnostics };
   }
 }
 
diff --git a/Composer/packages/lib/indexers/src/skillManifestIndexer.ts b/Composer/packages/lib/indexers/src/skillManifestIndexer.ts
index 5d6331ecf..c833ed355 100644
--- a/Composer/packages/lib/indexers/src/skillManifestIndexer.ts
+++ b/Composer/packages/lib/indexers/src/skillManifestIndexer.ts
@@ -1,13 +1,13 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { FileInfo, SkillManifestFile } from '@bfc/shared';
+import { FileInfo, SkillManifestInfo } from '@bfc/shared';
 import has from 'lodash/has';
 
 import { getBaseName } from './utils/help';
 
 const index = (skillManifestFiles: FileInfo[]) => {
-  return skillManifestFiles.reduce((manifests: SkillManifestFile[], { content, name, lastModified }) => {
+  return skillManifestFiles.reduce((manifests: SkillManifestInfo[], { content, name, lastModified }) => {
     try {
       const jsonContent = JSON.parse(content);
 
@@ -22,7 +22,7 @@ const index = (skillManifestFiles: FileInfo[]) => {
     } catch (error) {
       return manifests;
     }
-  }, [] as SkillManifestFile[]);
+  }, [] as SkillManifestInfo[]);
 };
 
 export const skillManifestIndexer = {
diff --git a/Composer/packages/lib/indexers/src/validations/expressionValidation/index.ts b/Composer/packages/lib/indexers/src/validations/expressionValidation/index.ts
index aee180ce7..af44a54ac 100644
--- a/Composer/packages/lib/indexers/src/validations/expressionValidation/index.ts
+++ b/Composer/packages/lib/indexers/src/validations/expressionValidation/index.ts
@@ -1,6 +1,6 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
-import { MicrosoftIDialog, Diagnostic, LgFile, LuFile } from '@bfc/shared';
+import { MicrosoftIDialog, Diagnostic, LgFile, DialogSetting } from '@bfc/shared';
 import { SchemaDefinitions } from '@bfc/shared/lib/schemaUtils/types';
 
 import { extractOptionByKey } from '../../utils/lgUtil';
@@ -36,11 +36,11 @@ export const validateExpressions: ValidateFunc = (
   value: MicrosoftIDialog,
   type: string,
   schema: SchemaDefinitions,
-  lgFiles: LgFile[],
-  luFiles: LuFile[]
+  settings: DialogSetting,
+  lgFiles: LgFile[]
 ) => {
   const expressions = searchExpressions(path, value, type, schema);
-  const customFunctions = searchLgCustomFunction(lgFiles);
+  const customFunctions = searchLgCustomFunction(lgFiles).concat(settings.customizedFunctions);
 
   const diagnostics = expressions.reduce((diagnostics: Diagnostic[], expression) => {
     const diagnostic = validate(expression, customFunctions);
diff --git a/Composer/packages/lib/indexers/src/validations/expressionValidation/types.ts b/Composer/packages/lib/indexers/src/validations/expressionValidation/types.ts
index 37bcaa395..8915244b6 100644
--- a/Composer/packages/lib/indexers/src/validations/expressionValidation/types.ts
+++ b/Composer/packages/lib/indexers/src/validations/expressionValidation/types.ts
@@ -1,7 +1,7 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { Diagnostic, LgFile, LuFile } from '@bfc/shared';
+import { Diagnostic, LgFile, LuFile, DialogSetting, SchemaDefinitions, MicrosoftIDialog } from '@bfc/shared';
 import { ReturnType } from 'adaptive-expressions';
 
 export const StringMapExpressionType = {
@@ -15,9 +15,10 @@ export const StringMapExpressionType = {
 
 export type ValidateFunc = (
   path: string,
-  value: any,
+  value: MicrosoftIDialog,
   type: string,
-  schema: any,
+  schema: SchemaDefinitions,
+  setting: DialogSetting,
   lgFiles: LgFile[],
   luFiles: LuFile[]
 ) => Diagnostic[] | null; // error msg
diff --git a/Composer/packages/lib/indexers/src/validations/expressionValidation/validation.ts b/Composer/packages/lib/indexers/src/validations/expressionValidation/validation.ts
index 2ddb16fba..2ee43207b 100644
--- a/Composer/packages/lib/indexers/src/validations/expressionValidation/validation.ts
+++ b/Composer/packages/lib/indexers/src/validations/expressionValidation/validation.ts
@@ -5,7 +5,6 @@
 import { Expression, ReturnType } from 'adaptive-expressions';
 import formatMessage from 'format-message';
 import { Diagnostic } from '@bfc/shared';
-import startsWith from 'lodash/startsWith';
 
 import { ExpressionProperty } from './types';
 
@@ -14,10 +13,9 @@ const RETURNTYPE_NOT_MATCH = formatMessage('the return type does not match');
 const BUILT_IN_FUNCTION_ERROR = formatMessage("it's not a built-in function or a custom function.");
 
 const expressionErrorMessage = (error: string) => formatMessage('must be an expression: {error}', { error });
-
-const customFunctionErrorMessage = (func: string) =>
-  formatMessage(`Error: {func} does not have an evaluator, it's not a built-in function or a custom function`, {
-    func,
+const builtInFunctionErrorMessage = (error: string) =>
+  formatMessage(`{error} Please add unknown functions to setting's customFunctions field.`, {
+    error,
   });
 
 //bitwise operation
@@ -78,21 +76,33 @@ const checkReturnType = (returnType: number, types: number[]): string => {
   return types.some((type) => type & returnType) ? '' : RETURNTYPE_NOT_MATCH;
 };
 
-const filterCustomFunctionError = (error: string, CustomFunctions: string[]): string => {
-  let errorMessage = expressionErrorMessage(error);
+//string match or * match
+const checkCustomFunctions = (currentFunction: string, customFunction: string) => {
+  //.* or * => #
+  let customReg = customFunction.replace(/\.\*|\*/g, '#');
+  //. => [.]
+  customReg = customReg.replace(/\./g, '[.]');
+  //# => .*
+  // a.b.* => a[.]b.*
+  customReg = customReg.replace(/#/g, '.*');
+  // eslint-disable-next-line security/detect-non-literal-regexp
+  const reg = new RegExp(`^${customReg}$`);
+  return reg.test(currentFunction);
+};
 
+const filterCustomFunctionError = (error: string, CustomFunctions: string[]): string => {
   //Now all customFunctions is from lg file content.
-  if (CustomFunctions.some((item) => startsWith(error, customFunctionErrorMessage(item)))) {
-    errorMessage = '';
-  }
-
-  //Todo: if the custom functions are defined in runtime, use the field from settings to filter
-  // settings.customFunctions.some();
+  //If the custom functions are defined in runtime, use the field from settings to filter
   if (error.endsWith(BUILT_IN_FUNCTION_ERROR)) {
-    errorMessage = '';
+    const currentFunction = error.split(' ')[0];
+    if (CustomFunctions.some((item) => checkCustomFunctions(currentFunction, item))) {
+      return '';
+    }
+
+    return builtInFunctionErrorMessage(error);
   }
 
-  return errorMessage;
+  return expressionErrorMessage(error);
 };
 
 export const validate = (expression: ExpressionProperty, customFunctions: string[]): Diagnostic | null => {
diff --git a/Composer/packages/lib/indexers/src/validations/index.ts b/Composer/packages/lib/indexers/src/validations/index.ts
index e2adcf1c0..4a8787ab6 100644
--- a/Composer/packages/lib/indexers/src/validations/index.ts
+++ b/Composer/packages/lib/indexers/src/validations/index.ts
@@ -1,7 +1,6 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
-import { Diagnostic, MicrosoftIDialog, DialogInfo, LgFile, LuFile } from '@bfc/shared';
-import { SchemaDefinitions } from '@bfc/shared/lib/schemaUtils/types';
+import { Diagnostic, DialogInfo, LgFile, LuFile, DialogSetting, SchemaDefinitions } from '@bfc/shared';
 import has from 'lodash/has';
 
 import { JsonWalk, VisitorFunc } from '..';
@@ -13,54 +12,44 @@ export const validateFuncs: { [type: string]: ValidateFunc[] } = {
   '.': [validateExpressions], //this will check all types
 };
 
-// check all fields
-function validateFields(
-  dialog: MicrosoftIDialog,
-  id: string,
-  schema: any,
-  lgFiles: LgFile[],
-  luFiles: LuFile[]
-): Diagnostic[] {
-  const diagnostics: Diagnostic[] = [];
-  /**
-   *
-   * @param path , jsonPath string
-   * @param value , current node value    *
-   * @return boolean, true to stop walk
-   * */
-  const visitor: VisitorFunc = (path: string, value: any): boolean => {
-    if (has(value, '$kind')) {
-      const allChecks = [...validateFuncs['.']];
-      const checkerFunc = validateFuncs[value.$kind];
-      if (checkerFunc) {
-        allChecks.splice(0, 0, ...checkerFunc);
-      }
-
-      allChecks.forEach((func) => {
-        const result = func(path, value, value.$kind, schema.definitions[value.$kind], lgFiles, luFiles);
-        if (result) {
-          diagnostics.splice(0, 0, ...result);
-        }
-      });
-    }
-    return false;
-  };
-  JsonWalk(id, dialog, visitor);
-  return diagnostics.map((e) => {
-    e.source = id;
-    return e;
-  });
-}
-
 export function validateDialog(
   dialog: DialogInfo,
   schema: SchemaDefinitions,
+  settings: DialogSetting,
   lgFiles: LgFile[],
   luFiles: LuFile[]
 ): Diagnostic[] {
   const { id, content } = dialog;
   try {
-    return validateFields(content, id, schema, lgFiles, luFiles);
+    const diagnostics: Diagnostic[] = [];
+    /**
+     *
+     * @param path , jsonPath string
+     * @param value , current node value    *
+     * @return boolean, true to stop walk
+     * */
+    const visitor: VisitorFunc = (path: string, value: any): boolean => {
+      if (has(value, '$kind')) {
+        const allChecks = [...validateFuncs['.']];
+        const checkerFunc = validateFuncs[value.$kind];
+        if (checkerFunc) {
+          allChecks.splice(0, 0, ...checkerFunc);
+        }
+
+        allChecks.forEach((func) => {
+          const result = func(path, value, value.$kind, schema.definitions[value.$kind], settings, lgFiles, luFiles);
+          if (result) {
+            diagnostics.push(...result);
+          }
+        });
+      }
+      return false;
+    };
+    JsonWalk(id, content, visitor);
+    return diagnostics.map((e) => {
+      e.source = id;
+      return e;
+    });
   } catch (error) {
     return [new Diagnostic(error.message, id)];
   }
@@ -68,13 +57,14 @@ export function validateDialog(
 
 export function validateDialogs(
   dialogs: DialogInfo[],
+  schema: SchemaDefinitions,
   lgFiles: LgFile[],
   luFiles: LuFile[],
-  schema: SchemaDefinitions
+  settings: DialogSetting
 ): { [id: string]: Diagnostic[] } {
   const diagnosticsMap = {};
   dialogs.forEach((dialog) => {
-    diagnosticsMap[dialog.id] = validateDialog(dialog, schema, lgFiles, luFiles);
+    diagnosticsMap[dialog.id] = validateDialog(dialog, schema, settings, lgFiles, luFiles);
   });
 
   return diagnosticsMap;
diff --git a/Composer/packages/lib/shared/__tests__/skillUtils/index.test.ts b/Composer/packages/lib/shared/__tests__/skillUtils/index.test.ts
index e29c44a4b..ae8097dd9 100644
--- a/Composer/packages/lib/shared/__tests__/skillUtils/index.test.ts
+++ b/Composer/packages/lib/shared/__tests__/skillUtils/index.test.ts
@@ -1,87 +1,16 @@
 // Copyright (c) Microsoft Corporation.
-// Licensed under the MIT License
+// Licensed under the MIT License.
 
-import { DialogSetting } from '../../src/';
-import {
-  fetchFromSettings,
-  getSkillNameFromSetting,
-  isLocalhostUrl,
-  isSkillHostUpdateRequired,
-  fetchEndpointNameForSkill,
-  convertSkillsToDictionary,
-} from '../../src/skillsUtils';
+import { Skill } from '../../src';
+import { convertSkillsToDictionary } from '../../src/skillsUtils';
 
 describe('skills utils', () => {
   it('migrate skills array in older bots to skills dictionary', () => {
-    const skills: any[] = [
-      { name: 'oneNoteSync', manifestUrl: 'http://test.onenotesync/manifests/one-note.json' },
-      { name: 'googleSync', manifestUrl: 'http://test.googlesync/manifests/google-sync.json' },
+    const skills: Skill[] = [
+      { name: 'oneNoteSync', manifestUrl: 'http://test.onenotesync/manifests/one-note.json' } as Skill,
+      { name: 'googleSync', manifestUrl: 'http://test.googlesync/manifests/google-sync.json' } as Skill,
     ];
     const result = convertSkillsToDictionary(skills);
     expect(result.oneNoteSync.manifestUrl).toBe('http://test.onenotesync/manifests/one-note.json');
   });
-  it('can fetch from settings given dialog settings', () => {
-    const result = fetchFromSettings('=settings.luis.authoringKey', {
-      luis: {
-        authoringKey: 'abcd',
-      },
-    } as DialogSetting);
-
-    expect(result).toBe('abcd');
-  });
-
-  it('should return empty string  given invalid expression', () => {
-    const result = fetchFromSettings('=settings.luis.author', {
-      luis: {
-        authoringKey: 'abcd',
-      },
-    } as DialogSetting);
-
-    expect(result).toBe('');
-  });
-
-  it('should return the skill name given an expression', () => {
-    const result = getSkillNameFromSetting(`=settings.skill['oneNoteSync'].endpointUrl`);
-    expect(result).toBe('oneNoteSync');
-  });
-
-  it('check if localhost', () => {
-    expect(isLocalhostUrl(`http://127.0.0.1/api/skills`)).toBeTruthy();
-    expect(isLocalhostUrl(`http://localhost:3000/api/skills`)).toBeTruthy();
-    expect(isLocalhostUrl(`http://ngrok-url/api/skills`)).toBeFalsy();
-  });
-
-  it('check if skill host endpoint setting needs to be updated', () => {
-    expect(isSkillHostUpdateRequired(`http://127.0.0.1/api/skills`)).toBeTruthy();
-    expect(isSkillHostUpdateRequired(``)).toBeTruthy();
-  });
-
-  it('should get matched endpoint name from the manifest', () => {
-    const setting: any = {
-      skill: {
-        oneNoteSync: {
-          endpointUrl: 'http://onenotesync/api/message',
-        },
-      },
-    };
-    let matchedEndpoint = fetchEndpointNameForSkill(setting, 'oneNoteSync', {
-      endpoints: [
-        {
-          name: 'localEndpoint',
-          endpointUrl: 'http://onenotesync/api/message',
-        },
-      ],
-    });
-    expect(matchedEndpoint).toBe('localEndpoint');
-
-    matchedEndpoint = fetchEndpointNameForSkill(setting, 'oneNoteSync-1', {
-      endpoints: [
-        {
-          name: 'localEndpoint',
-          endpointUrl: 'http://onenotesync/api/message',
-        },
-      ],
-    });
-    expect(matchedEndpoint).toBeUndefined();
-  });
 });
diff --git a/Composer/packages/lib/shared/src/constant.ts b/Composer/packages/lib/shared/src/constant.ts
index 345dbfa0b..ac883acaa 100644
--- a/Composer/packages/lib/shared/src/constant.ts
+++ b/Composer/packages/lib/shared/src/constant.ts
@@ -3,14 +3,11 @@
 
 export const SensitiveProperties = [
   'MicrosoftAppPassword',
-  'luis.endpointKey',
-  'qna.endpointKey',
   'luis.authoringKey',
+  'luis.endpointKey',
   'qna.subscriptionKey',
+  'qna.endpointKey',
 ];
-
-export const RootBotManagedProperties = ['luis.authoringKey', 'luis.authoringRegion', 'qna.subscriptionKey'];
-
 export const FieldNames = {
   Events: 'triggers',
   Actions: 'actions',
diff --git a/Composer/packages/lib/shared/src/diagnostic.ts b/Composer/packages/lib/shared/src/diagnostic.ts
index 1836478a8..c0e380d51 100644
--- a/Composer/packages/lib/shared/src/diagnostic.ts
+++ b/Composer/packages/lib/shared/src/diagnostic.ts
@@ -58,10 +58,9 @@ export class Diagnostic implements IDiagnostic {
    */
   code?: string;
 
-  constructor(message: string, source: string, severity?: DiagnosticSeverity, path?: string) {
+  constructor(message: string, source: string, severity?: DiagnosticSeverity) {
     this.message = message;
     this.source = source;
     this.severity = severity ? severity : DiagnosticSeverity.Error;
-    this.path = path;
   }
 }
diff --git a/Composer/packages/lib/shared/src/skillsUtils/index.ts b/Composer/packages/lib/shared/src/skillsUtils/index.ts
index e14c4d62b..958a3ae7a 100644
--- a/Composer/packages/lib/shared/src/skillsUtils/index.ts
+++ b/Composer/packages/lib/shared/src/skillsUtils/index.ts
@@ -3,17 +3,7 @@
 
 import get from 'lodash/get';
 import keyBy from 'lodash/keyBy';
-import { BotProjectSpace, DialogSetting, SkillSetting } from '@botframework-composer/types';
-import formatMessage from 'format-message';
-import camelCase from 'lodash/camelCase';
-
-// eslint-disable-next-line security/detect-unsafe-regex
-const localhostRegex = /^https?:\/\/(localhost|127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1)/;
-
-export const VIRTUAL_LOCAL_ENDPOINT = {
-  key: -1,
-  name: formatMessage('Local Composer'),
-};
+import { DialogSetting, Skill } from '@botframework-composer/types';
 
 export function fetchFromSettings(path: string, settings: DialogSetting): string {
   if (path) {
@@ -23,8 +13,8 @@ export function fetchFromSettings(path: string, settings: DialogSetting): string
   return '';
 }
 
-export const convertSkillsToDictionary = (skills: any[]) => {
-  const mappedSkills = skills.map(({ msAppId, endpointUrl, manifestUrl, name }) => {
+export const convertSkillsToDictionary = (skills: Skill[]) => {
+  const mappedSkills = skills.map(({ msAppId, endpointUrl, manifestUrl, name }: Skill) => {
     return {
       name,
       msAppId,
@@ -33,7 +23,7 @@ export const convertSkillsToDictionary = (skills: any[]) => {
     };
   });
 
-  return keyBy(mappedSkills, (item) => camelCase(item.name));
+  return keyBy(mappedSkills, 'name');
 };
 
 export const getSkillNameFromSetting = (value?: string) => {
@@ -50,53 +40,3 @@ export const getEndpointNameGivenUrl = (manifestData: any, urlToMatch: string) =
   const matchedEndpoint = manifestData?.endpoints.find(({ endpointUrl }) => endpointUrl === urlToMatch);
   return matchedEndpoint ? matchedEndpoint.name : '';
 };
-
-export const getManifestNameFromUrl = (manifestUrl: string) => {
-  const manifestNameIndex = manifestUrl.lastIndexOf('/') + 1;
-  if (!manifestNameIndex) {
-    return manifestUrl;
-  }
-  return manifestUrl.substring(manifestNameIndex);
-};
-
-export const migrateSkillsForExistingBots = (botProjectFile: BotProjectSpace, rootBotSkill: any) => {
-  const updatedSkillSetting: Record<string, SkillSetting> = {};
-  if (Object.keys(botProjectFile.skills).length === 0 && Object.keys(rootBotSkill).length > 0) {
-    for (const skillName in rootBotSkill) {
-      const currentSkill = rootBotSkill[skillName];
-      const skillNameIdentifier = camelCase(skillName);
-      updatedSkillSetting[skillNameIdentifier] = {
-        endpointUrl: currentSkill.endpointUrl,
-        msAppId: currentSkill.msAppId,
-      };
-      botProjectFile.skills[skillNameIdentifier] = {
-        manifest: currentSkill?.manifestUrl || '',
-        remote: true,
-      };
-    }
-  }
-  return {
-    skillSettings: updatedSkillSetting,
-    botProjectFile,
-  };
-};
-
-export const fetchEndpointNameForSkill = (
-  rootBotSettings: DialogSetting,
-  skillNameIdentifier: string,
-  manifestData
-) => {
-  const endpointUrl = get(rootBotSettings, `skill[${skillNameIdentifier}].endpointUrl`);
-  if (endpointUrl) {
-    const matchedEndpoint = getEndpointNameGivenUrl(manifestData, endpointUrl);
-    return matchedEndpoint;
-  }
-};
-
-export const isLocalhostUrl = (matchUrl: string) => {
-  return localhostRegex.test(matchUrl);
-};
-
-export const isSkillHostUpdateRequired = (skillHostEndpoint?: string) => {
-  return !skillHostEndpoint || isLocalhostUrl(skillHostEndpoint);
-};
diff --git a/Composer/packages/lib/ui-shared/src/components/DialogWrapper.tsx b/Composer/packages/lib/ui-shared/src/components/DialogWrapper.tsx
index ee60a9f52..32bc7de3d 100644
--- a/Composer/packages/lib/ui-shared/src/components/DialogWrapper.tsx
+++ b/Composer/packages/lib/ui-shared/src/components/DialogWrapper.tsx
@@ -11,7 +11,6 @@ import { IModalStyles } from 'office-ui-fabric-react/lib/Modal';
 export enum DialogTypes {
   CreateFlow,
   DesignFlow,
-  Customer,
 }
 
 // -------------------- Styles -------------------- //
@@ -62,33 +61,14 @@ const styles: {
 
 interface DialogWrapperProps extends Pick<IDialogProps, 'onDismiss'> {
   isOpen: boolean;
-  title?: string;
-  subText?: string;
+  title: string;
+  subText: string;
   dialogType: DialogTypes;
-  customerStyle?: {
-    dialog?: Record<string, any>;
-    modal?: Record<string, any>;
-  };
-  minWidth?: number;
 }
 
 export const DialogWrapper: React.FC<DialogWrapperProps> = (props) => {
-  const {
-    isOpen,
-    onDismiss,
-    title = '',
-    subText = '',
-    children,
-    dialogType,
-    customerStyle = { dialog: {}, modal: {} },
-    minWidth,
-  } = props;
+  const { isOpen, onDismiss, title, subText, children, dialogType } = props;
   const [currentStyle, setStyle] = useState(styles[dialogType]);
-
-  if (dialogType === DialogTypes.Customer) {
-    styles[DialogTypes.Customer] = customerStyle;
-  }
-
   useEffect(() => {
     if (dialogType) {
       setStyle(styles[dialogType]);
@@ -108,7 +88,6 @@ export const DialogWrapper: React.FC<DialogWrapperProps> = (props) => {
         styles: currentStyle.dialog,
       }}
       hidden={false}
-      minWidth={minWidth}
       modalProps={{
         isBlocking: false,
         styles: currentStyle.modal,
diff --git a/Composer/packages/server/package.json b/Composer/packages/server/package.json
index c5514d58c..2f5a52009 100644
--- a/Composer/packages/server/package.json
+++ b/Composer/packages/server/package.json
@@ -83,7 +83,6 @@
     "extract-zip": "2.0.1",
     "form-data": "^2.3.3",
     "format-message": "^6.2.3",
-    "get-port": "^5.1.1",
     "globby": "^11.0.1",
     "http-errors": "^1.7.2",
     "immer": "^5.2.0",
@@ -96,6 +95,7 @@
     "node-fetch": "2.6.1",
     "passport": "^0.4.1",
     "path-to-regexp": "^6.1.0",
+    "portfinder": "1.0.25",
     "rimraf": "^3.0.2",
     "tar": "^6.0.5",
     "ts-md5": "^1.2.7",
diff --git a/Composer/packages/server/src/__mocks__/samplebots/bot1/settings/appsettings.json b/Composer/packages/server/src/__mocks__/samplebots/bot1/settings/appsettings.json
index 640496cb6..e468dd174 100644
--- a/Composer/packages/server/src/__mocks__/samplebots/bot1/settings/appsettings.json
+++ b/Composer/packages/server/src/__mocks__/samplebots/bot1/settings/appsettings.json
@@ -24,11 +24,5 @@
   "languages": [
     "en-us"
   ],
-  "MicrosoftAppPassword": "",
-  "skillConfiguration": {
-    "isSkill": false,
-    "allowedCallers": [
-      "*"
-    ]
-  }
+  "MicrosoftAppPassword": ""
 }
\ No newline at end of file
diff --git a/Composer/packages/server/src/controllers/__tests__/settings.test.ts b/Composer/packages/server/src/controllers/__tests__/settings.test.ts
index 44de58b96..bb289a923 100644
--- a/Composer/packages/server/src/controllers/__tests__/settings.test.ts
+++ b/Composer/packages/server/src/controllers/__tests__/settings.test.ts
@@ -34,7 +34,6 @@ describe('server settings', () => {
   });
 
   it('should get user settings', async () => {
-    Store.get = jest.fn().mockReturnValue({ telemetry: {} });
     const mockReq = {
       params: {},
       query: {},
diff --git a/Composer/packages/server/src/locales/en-US.json b/Composer/packages/server/src/locales/en-US.json
index 488c3d95b..3bccffbb0 100644
--- a/Composer/packages/server/src/locales/en-US.json
+++ b/Composer/packages/server/src/locales/en-US.json
@@ -35,18 +35,12 @@
   "a_property_is_a_piece_of_information_that_your_bot_eccd34bf": {
     "message": "A property is a piece of information that your bot will collect. The property name is the name used in Composer; it is not necessarily the same text that will appear in your bot''s messages."
   },
-  "a_skill_bot_that_can_be_called_from_a_host_bot_a833d0": {
-    "message": "A skill bot that can be called from a host bot."
-  },
   "a_subscription_key_is_created_when_you_create_a_qn_37a6926f": {
     "message": "A subscription key is created when you create a QnA Maker resource."
   },
   "a_valid_url_should_start_with_http_or_https_327b1a30": {
     "message": "A valid URL should start with http:// or https://"
   },
-  "a_valid_url_should_start_with_http_or_https_d24b3591": {
-    "message": "A valid url should start with http:// or https://"
-  },
   "about_70c18bba": {
     "message": "About"
   },
@@ -98,9 +92,6 @@
   "actions_moved_d7777b29": {
     "message": "Actions moved"
   },
-  "active_language_6d001457": {
-    "message": "Active language"
-  },
   "activities_125193f7": {
     "message": "Activities"
   },
@@ -116,12 +107,12 @@
   "add_8523c19b": {
     "message": "Add"
   },
-  "add_a_dialog_e378aa3a": {
-    "message": "Add a dialog"
-  },
   "add_a_new_key_5c208c29": {
     "message": "Add a new key"
   },
+  "add_a_new_skill_dialog_aaaafa9c": {
+    "message": "Add a new Skill Dialog"
+  },
   "add_a_new_trigger_a82d3db8": {
     "message": "Add a new trigger"
   },
@@ -134,15 +125,9 @@
   "add_a_skill_46d2b71c": {
     "message": "Add a skill"
   },
-  "add_a_trigger_c6861401": {
-    "message": "Add a trigger"
-  },
   "add_a_welcome_message_9e1480b2": {
     "message": "Add a welcome message"
   },
-  "add_additional_url_bdfac25d": {
-    "message": "Add additional URL"
-  },
   "add_alternative_phrasing_17e0304c": {
     "message": "+ Add alternative phrasing"
   },
@@ -161,21 +146,27 @@
   "add_new_answer_9de3808e": {
     "message": "Add new answer"
   },
+  "add_new_dialog_25f12c9": {
+    "message": "Add new dialog"
+  },
   "add_new_extension_19b82b77": {
     "message": "Add new extension"
   },
-  "add_new_knowledge_base_1a3afed3": {
-    "message": "Add new knowledge base"
+  "add_new_knowledge_base_on_displayname_7f44609c": {
+    "message": " Add new knowledge base on { displayName }"
+  },
+  "add_new_profile_47b225e6": {
+    "message": "Add new profile"
   },
   "add_new_propertyname_bedf7dc6": {
     "message": "Add new { propertyName }"
   },
-  "add_new_publish_profile_93345a07": {
-    "message": "Add new publish profile"
-  },
   "add_new_question_85612b7f": {
     "message": "Add new question"
   },
+  "add_new_trigger_on_displayname_2aaf6e4c": {
+    "message": "Add new trigger on { displayName }"
+  },
   "add_new_validation_rule_here_eb675ccf": {
     "message": "Add new validation rule here"
   },
@@ -200,12 +191,21 @@
   "advanced_options_4dcc8385": {
     "message": "Advanced options"
   },
-  "advanced_settings_view_json_b83638b4": {
-    "message": "Advanced Settings View (json)"
-  },
   "all_4321c3a1": {
     "message": "All"
   },
+  "all_language_generation_files_ef778f24": {
+    "message": "all language generation files"
+  },
+  "all_language_understanding_files_714b33eb": {
+    "message": "all language understanding files"
+  },
+  "all_profiles_8321b1aa": {
+    "message": "All profiles"
+  },
+  "all_qna_files_349d7fe1": {
+    "message": "all qna files"
+  },
   "an_authoring_key_is_created_automatically_when_you_21cf77aa": {
     "message": "An authoring key is created automatically when you create a LUIS account."
   },
@@ -227,18 +227,12 @@
   "any_string_f22dc2e1": {
     "message": "any string"
   },
-  "app_id_password_424f613a": {
-    "message": "App Id / Password"
-  },
   "application_language_87691b6": {
     "message": "Application Language"
   },
   "application_language_f100f3e0": {
     "message": "Application language"
   },
-  "application_language_settings_26f82dfc": {
-    "message": "Application Language settings"
-  },
   "application_settings_39e840c6": {
     "message": "Application Settings"
   },
@@ -374,9 +368,6 @@
   "boolean_value_98d39ea1": {
     "message": "Boolean value."
   },
-  "bot_416bf08d": {
-    "message": "bot"
-  },
   "bot_7926b66d": {
     "message": "Bot"
   },
@@ -392,9 +383,6 @@
   "bot_content_was_successfully_imported_5a07ae64": {
     "message": "Bot content was successfully imported."
   },
-  "bot_controller_319b408d": {
-    "message": "Bot Controller"
-  },
   "bot_framework_composer_enables_developers_and_mult_ce0e42a9": {
     "message": "Bot Framework Composer enables developers and multi-disciplinary teams to build all kinds of conversational experiences, using the latest components from the Bot Framework: SDK, LG, LU, and declarative file formats, all without writing code."
   },
@@ -419,9 +407,6 @@
   "bot_language_active_7cf9dc78": {
     "message": "Bot language (active)"
   },
-  "bot_management_and_configurations_b7dadd69": {
-    "message": "Bot management and configurations"
-  },
   "bot_name_bbd0779d": {
     "message": "Bot Name"
   },
@@ -431,12 +416,6 @@
   "bot_project_file_does_not_exist_a0864a2c": {
     "message": "Bot project file does not exist."
   },
-  "bot_projects_settings_list_view_ab58e5d": {
-    "message": "Bot projects settings list View"
-  },
-  "bot_projects_settings_navigation_pane_c2074a5f": {
-    "message": "Bot Projects Settings Navigation Pane"
-  },
   "bot_responses_4617b4a2": {
     "message": "Bot responses"
   },
@@ -542,27 +521,18 @@
   "comment_7ef1428e": {
     "message": "Comment"
   },
-  "comments_e07bcbe3": {
-    "message": "Comments"
-  },
   "component_stacktrace_e24b1983": {
     "message": "Component Stacktrace:"
   },
   "composer_cannot_yet_translate_your_bot_automatical_2d54081b": {
     "message": "Composer cannot yet translate your bot automatically.\nTo create a translation manually, Composer will create a copy of your bot’s content with the name of the additional language. This content can then be translated without affecting the original bot logic or flow and you can switch between languages to ensure the responses are correctly and appropriately translated."
   },
-  "composer_includes_a_telemetry_feature_that_collect_8fd7bfbf": {
-    "message": "Composer includes a telemetry feature that collects usage information. It is important that the Composer team understands how the tool is being used so that it can be improved."
-  },
   "composer_introduction_98a93701": {
     "message": "Composer introduction"
   },
   "composer_is_up_to_date_9118257d": {
     "message": "Composer is up to date."
   },
-  "composer_language_is_the_language_of_composer_ui_c23a57b6": {
-    "message": "Composer language is the language of Composer UI"
-  },
   "composer_logo_ba2048a0": {
     "message": "Composer Logo"
   },
@@ -614,9 +584,6 @@
   "congratulations_your_model_is_successfully_publish_52ebc297": {
     "message": "Congratulations! Your model is successfully published."
   },
-  "connect_a_remote_skill_10cf0724": {
-    "message": "Connect a remote skill"
-  },
   "connect_to_a_new_skill_34d582ab": {
     "message": "Connect to a new skill"
   },
@@ -659,9 +626,6 @@
   "could_not_connect_to_storage_50411de0": {
     "message": "Could not connect to storage."
   },
-  "could_not_init_plugin_1f1c29cd": {
-    "message": "Could not init plugin"
-  },
   "couldn_t_complete_the_update_a337a359": {
     "message": "Couldn''t complete the update:"
   },
@@ -692,9 +656,6 @@
   "create_a_new_form_dialog_schema_by_clicking_above_34b80531": {
     "message": "Create a new form dialog schema by clicking + above."
   },
-  "create_a_new_skill_e961ff28": {
-    "message": "Create a new skill"
-  },
   "create_a_new_skill_manifest_or_select_which_one_yo_a97e9616": {
     "message": "Create a new skill manifest or select which one you want to edit"
   },
@@ -731,8 +692,11 @@
   "create_kb_e78571ba": {
     "message": "Create KB"
   },
-  "create_knowledge_base_db6d66c4": {
-    "message": "Create knowledge base"
+  "create_kb_from_scratch_eddd037a": {
+    "message": "Create KB from scratch"
+  },
+  "create_kb_from_url_or_file_49ad6671": {
+    "message": "Create KB from URL or file"
   },
   "create_knowledge_base_from_scratch_afe4d2a2": {
     "message": "Create knowledge base from scratch"
@@ -770,24 +734,18 @@
   "custom_events_d6f0e45b": {
     "message": "Custom events"
   },
+  "custom_name_optional_60ee6a1a": {
+    "message": "Custom name (optional)"
+  },
   "custom_recognizer_951bab90": {
     "message": "Custom recognizer"
   },
-  "custom_runtime_426aa34f": {
-    "message": "Custom runtime"
-  },
   "customize_your_assistant_e4038b74": {
     "message": "Customize your assistant"
   },
   "cut_c8c92681": {
     "message": "Cut"
   },
-  "data_collection_32efe1e7": {
-    "message": "Data collection"
-  },
-  "data_collection_7db2e237": {
-    "message": "Data Collection"
-  },
   "data_loading_4c9bb9f6": {
     "message": "Data loading..."
   },
@@ -821,9 +779,6 @@
   "default_language_486a558d": {
     "message": "Default language"
   },
-  "default_language_a976938d": {
-    "message": "DEFAULT LANGUAGE"
-  },
   "default_language_b11c37db": {
     "message": "Default Language"
   },
@@ -872,9 +827,6 @@
   "delete_property_b3786fa0": {
     "message": "Delete Property"
   },
-  "delete_this_bot_fb78e519": {
-    "message": "Delete this bot"
-  },
   "deleting_dialogid_failed_1d7cc05a": {
     "message": "Deleting \"{ dialogId }\" failed."
   },
@@ -887,24 +839,6 @@
   "design_51b2812a": {
     "message": "Design"
   },
-  "diagnostic_list_29813310": {
-    "message": "Diagnostic list"
-  },
-  "diagnostic_list_89b39c2e": {
-    "message": "Diagnostic List"
-  },
-  "diagnostic_message_msg_5387e951": {
-    "message": "Diagnostic Message { msg }"
-  },
-  "diagnostic_type_e1979c21": {
-    "message": "Diagnostic type"
-  },
-  "diagnostics_a11880f6": {
-    "message": "Diagnostics"
-  },
-  "diagnostics_pane_2d77c390": {
-    "message": "Diagnostics Pane"
-  },
   "dialog_68ba69ba": {
     "message": "(Dialog)"
   },
@@ -986,6 +920,12 @@
   "duplicate_name_d295a09d": {
     "message": "Duplicate name"
   },
+  "duplicate_skill_manifest_url_74d85839": {
+    "message": "Duplicate skill manifest Url"
+  },
+  "duplicate_skill_name_d9f6eb8d": {
+    "message": "Duplicate skill name"
+  },
   "duplicated_intents_recognized_d3908424": {
     "message": "Duplicated intents recognized"
   },
@@ -1073,9 +1013,6 @@
   "endofconversation_activity_4aa21306": {
     "message": "EndOfConversation activity"
   },
-  "endpoints_ff946539": {
-    "message": "Endpoints"
-  },
   "enter_a_manifest_url_to_add_a_new_skill_to_your_bo_57e9d660": {
     "message": "Enter a manifest url to add a new skill to your bot."
   },
@@ -1088,9 +1025,6 @@
   "enter_a_url_or_browse_to_upload_a_file_88a783fa": {
     "message": "Enter a URL or browse to upload a file "
   },
-  "enter_skill_host_endpoint_url_e22eeab5": {
-    "message": "Enter Skill host endpoint url"
-  },
   "enterprise_assistant_434df551": {
     "message": "Enterprise Assistant"
   },
@@ -1160,8 +1094,14 @@
   "expected_responses_intent_intentname_44b051c": {
     "message": "Expected responses (intent: #{ intentName })"
   },
-  "export_this_bot_as_zip_c4bfddf2": {
-    "message": "Export this bot as .zip"
+  "export_as_skill_764cf284": {
+    "message": "Export as skill"
+  },
+  "export_assets_to_zip_d2d798ab": {
+    "message": "Export assets to .zip"
+  },
+  "export_de71cd8e": {
+    "message": "Export"
   },
   "expression_7f906a13": {
     "message": "Expression"
@@ -1178,17 +1118,14 @@
   "external_resources_will_not_be_changed_c08b0009": {
     "message": "External resources will not be changed."
   },
-  "external_services_da7820ce": {
-    "message": "External services"
-  },
   "extract_question_and_answer_pairs_from_an_online_f_7316548e": {
     "message": "Extract question-and-answer pairs from an online FAQ, product manuals, or other files. Supported formats are .tsv, .pdf, .doc, .docx, .xlsx, containing questions and answers in sequence. Learn more about knowledge base sources. Skip this step to add questions and answers manually after creation. The number of sources and file size you can add depends on the QnA service SKU you choose. Learn more about QnA Maker SKUs."
   },
   "extract_question_and_answer_pairs_from_an_online_f_c1e12724": {
     "message": "Extract question-and-answer pairs from an online FAQ, product manuals, or other files. Supported formats are .tsv, .pdf, .doc, .docx, .xlsx, containing questions and answers in sequence. "
   },
-  "extracting_qna_pairs_from_urls_eaed1b1c": {
-    "message": "Extracting QNA pairs from { urls }"
+  "extracting_qna_pairs_from_url_b0331bba": {
+    "message": "Extracting QNA pairs from { url }"
   },
   "fallback_text_e5ff1cb7": {
     "message": "Fallback Text"
@@ -1202,6 +1139,9 @@
   "field_set_6e7d7f67": {
     "message": "Field Set"
   },
+  "fields_must_be_either_all_strings_or_all_fieldset__d3df28c": {
+    "message": "fields must be either all strings or all fieldset objects"
+  },
   "file_name_8fd421ff": {
     "message": "File name"
   },
@@ -1244,6 +1184,9 @@
   "form_wide_operations_1c1a73eb": {
     "message": "form-wide operations"
   },
+  "forms_380ab2ae": {
+    "message": "Forms"
+  },
   "fromtemplatename_does_not_exist_d429483c": {
     "message": "fromTemplateName does not exist"
   },
@@ -1298,9 +1241,6 @@
   "handover_to_human_1a619574": {
     "message": "Handover to human"
   },
-  "help_us_improve_468828c5": {
-    "message": "Help us improve?"
-  },
   "here_s_what_we_know_4e9c1731": {
     "message": "Here’s what we know…"
   },
@@ -1472,9 +1412,15 @@
   "language_generation_1876f6d6": {
     "message": "Language Generation"
   },
+  "language_generation_file_80c08efe": {
+    "message": "language generation file"
+  },
   "language_understanding_9ae3f1f6": {
     "message": "Language Understanding"
   },
+  "language_understanding_file_a65abc2c": {
+    "message": "language understanding file"
+  },
   "languagepolicy_e754ad28": {
     "message": "LanguagePolicy"
   },
@@ -1484,24 +1430,9 @@
   "learn_more_a79a7918": {
     "message": "Learn more"
   },
-  "learn_more_about_activities_134f453d": {
-    "message": "Learn more about activities"
-  },
-  "learn_more_about_endpoints_df156708": {
-    "message": "Learn more about endpoints"
-  },
   "learn_more_about_knowledge_base_sources_24369b09": {
     "message": "Learn more about knowledge base sources. "
   },
-  "learn_more_about_manifests_6e7c364b": {
-    "message": "Learn more about manifests"
-  },
-  "learn_more_about_qna_maker_skus_998c567": {
-    "message": "Learn more about QnA Maker SKUs."
-  },
-  "learn_more_about_skill_manifests_7708ce2c": {
-    "message": "Learn more about skill manifests"
-  },
   "learn_more_about_title_d1d3edbe": {
     "message": "Learn more about { title }"
   },
@@ -1544,9 +1475,6 @@
   "list_count_values_33ea7088": {
     "message": "list - { count } values"
   },
-  "list_of_languages_that_bot_will_be_able_to_underst_e4851dc5": {
-    "message": "List of languages that bot will be able to understand (User input) and respond to (Bot responses). To make this bot available in other languages, click ‘Manage bot languages’ to create a copy of the default language, and translate the content into the new language."
-  },
   "list_view_e33843f0": {
     "message": "List view"
   },
@@ -1559,15 +1487,6 @@
   "loading_bde52856": {
     "message": "Loading"
   },
-  "local_bot_runtime_manager_812cbd0c": {
-    "message": "Local bot runtime manager"
-  },
-  "local_skill_6ce0d311": {
-    "message": "Local Skill."
-  },
-  "locate_the_bot_file_and_repair_the_link_202045b1": {
-    "message": "Locate the bot file and repair the link"
-  },
   "location_e17bd402": {
     "message": "Location"
   },
@@ -1598,6 +1517,9 @@
   "lu_editor_d09fb2b0": {
     "message": "LU editor"
   },
+  "lu_file_already_exist_7f118089": {
+    "message": "lu file already exist"
+  },
   "lu_file_id_not_found_8732d33e": {
     "message": "LU file { id } not found"
   },
@@ -1616,39 +1538,15 @@
   "luis_authoring_region_b142f97b": {
     "message": "Luis Authoring Region"
   },
-  "luis_key_ae69c27e": {
-    "message": "LUIS key"
-  },
-  "luis_key_is_required_with_the_current_recognizer_s_6a0e8798": {
-    "message": "LUIS Key is required with the current recognizer setting to start your bot locally, and publish"
-  },
-  "luis_region_9879d8de": {
-    "message": "LUIS region"
-  },
-  "luis_region_is_required_163ca19f": {
-    "message": "LUIS Region is required"
-  },
   "main_dialog_eed5c847": {
     "message": "Main dialog"
   },
   "make_a_copy_77d1233": {
     "message": "Make a copy"
   },
-  "manage_bot_languages_9ec36fd7": {
-    "message": "Manage bot languages"
-  },
-  "manage_profiles_715c2092": {
-    "message": "Manage profiles"
-  },
   "manage_properties_c9fa4456": {
     "message": "Manage properties"
   },
-  "manifest_could_not_be_loaded_1c011a6a": {
-    "message": "Manifest could not be loaded"
-  },
-  "manifest_editor_1426637": {
-    "message": "manifest editor"
-  },
   "manifest_url_30824e88": {
     "message": "Manifest url"
   },
@@ -1742,6 +1640,9 @@
   "msft_ignite_ai_show_e131edef": {
     "message": "MSFT Ignite AI Show"
   },
+  "msg_bf173fef": {
+    "message": "{ msg }"
+  },
   "multi_choice_839b54bb": {
     "message": "Multi-choice"
   },
@@ -1763,6 +1664,9 @@
   "name_and_save_your_skill_manifest_cfd672b7": {
     "message": "Name and save your skill manifest."
   },
+  "name_cannot_include_special_characters_or_spaces_59a1950b": {
+    "message": "Name cannot include special characters or spaces"
+  },
   "name_copy_55d27c1a": {
     "message": "{ name }_Copy"
   },
@@ -1784,6 +1688,9 @@
   "navigation_pane_e587b73c": {
     "message": "Navigation pane"
   },
+  "navigation_panel_530ae4ac": {
+    "message": "Navigation panel"
+  },
   "navigation_path_8b299e64": {
     "message": "Navigation Path"
   },
@@ -1844,9 +1751,6 @@
   "not_a_single_template_e37f894": {
     "message": "Not a single template"
   },
-  "not_now_97efd947": {
-    "message": "Not now"
-  },
   "not_yet_published_669e37b3": {
     "message": "Not yet published"
   },
@@ -1919,9 +1823,6 @@
   "ondialogevents_types_3dc569b5": {
     "message": "OnDialogEvents Types"
   },
-  "open_a_new_skill_6828c95c": {
-    "message": "Open a new skill"
-  },
   "open_e0beb7b9": {
     "message": "Open"
   },
@@ -1931,8 +1832,8 @@
   "open_notification_panel_5796edb3": {
     "message": "Open notification panel"
   },
-  "open_start_bots_panel_f7f87200": {
-    "message": "Open start bots panel"
+  "open_skills_page_for_configuration_details_a2a484ea": {
+    "message": "Open Skills page for configuration details"
   },
   "optional_221bcc9d": {
     "message": "Optional"
@@ -2024,8 +1925,8 @@
   "please_select_an_activity_type_92f4a8a1": {
     "message": "Please select an activity type"
   },
-  "populate_your_knowledge_base_bb2d3605": {
-    "message": "Populate your Knowledge Base"
+  "powervirtualagents_logo_11858924": {
+    "message": "PowerVirtualAgents Logo"
   },
   "powervirtualagents_logo_11858924": {
     "message": "PowerVirtualAgents Logo"
@@ -2054,9 +1955,6 @@
   "privacy_button_b58e437": {
     "message": "Privacy button"
   },
-  "privacy_statement_da69ebc6": {
-    "message": "Privacy statement"
-  },
   "progress_of_total_87de8616": {
     "message": "{ progress }% of { total }"
   },
@@ -2114,6 +2012,12 @@
   "property_type_e38cf7e4": {
     "message": "Property Type"
   },
+  "provide_a_brief_description_it_will_appear_on_the__f962eb38": {
+    "message": "Provide a brief description. It will appear on the publish history list."
+  },
+  "provisioning_1330aede": {
+    "message": "Provisioning ..."
+  },
   "provisioning_summary_2be9422f": {
     "message": "Provisioning Summary"
   },
@@ -2132,30 +2036,18 @@
   "publish_models_9a36752a": {
     "message": "Publish models"
   },
-  "publish_selected_bots_825bc03a": {
-    "message": "Publish selected bots"
+  "publish_profiles_cf8d307b": {
+    "message": "Publish Profiles"
   },
-  "publish_target_388f6adf": {
-    "message": "Publish target"
-  },
-  "publish_targets_8afc4467": {
-    "message": "Publish targets"
-  },
-  "publish_your_bots_6e1ba7c2": {
-    "message": "Publish your bots"
+  "publish_to_selected_profile_c0998a2": {
+    "message": "Publish to selected profile"
   },
   "published_4bb5209e": {
     "message": "Published"
   },
-  "publishing_count_bots_b2a7f564": {
-    "message": "Publishing { count } bots"
-  },
   "publishing_d63a8f2d": {
     "message": "Publishing"
   },
-  "publishing_name_to_publishtarget_failed_8677b68d": {
-    "message": "Publishing { name } to { publishTarget } failed."
-  },
   "pull_from_selected_profile_b5c635ec": {
     "message": "Pull from selected profile"
   },
@@ -2165,6 +2057,9 @@
   "qna_editor_9eb94b02": {
     "message": "QnA editor"
   },
+  "qna_file_37705cb7": {
+    "message": "qna file"
+  },
   "qna_intent_recognized_49c3d797": {
     "message": "QnA Intent recognized"
   },
@@ -2174,12 +2069,6 @@
   "qna_maker_c313ed6e": {
     "message": "QnA Maker"
   },
-  "qna_maker_subscription_key_e009c9d9": {
-    "message": "QnA Maker Subscription key"
-  },
-  "qna_maker_subscription_key_is_required_to_start_yo_9c0bc65a": {
-    "message": "QnA Maker subscription Key is required to start your bot locally, and publish"
-  },
   "qna_maker_web_app_3da183bd": {
     "message": "QnA Maker Web App"
   },
@@ -2231,8 +2120,8 @@
   "regex_intent_is_already_defined_df095c1f": {
     "message": "RegEx { intent } is already defined"
   },
-  "regular_expression_855557bf": {
-    "message": "Regular Expression"
+  "regular_expression_recognizer_44664557": {
+    "message": "Regular expression recognizer"
   },
   "release_1af20f26": {
     "message": "Release: "
@@ -2240,12 +2129,6 @@
   "reloading_49d2f661": {
     "message": "Reloading"
   },
-  "remote_skill_ed36a7e6": {
-    "message": "Remote skill"
-  },
-  "remote_skill_f9074d76": {
-    "message": "Remote Skill."
-  },
   "remote_templates_a23c242d": {
     "message": "Remote templates"
   },
@@ -2255,12 +2138,6 @@
   "remove_this_dialog_6146716c": {
     "message": "Remove this dialog"
   },
-  "remove_this_skill_from_project_4c1900a9": {
-    "message": "Remove this skill from project"
-  },
-  "remove_this_skill_from_your_project_3c9d4b0f": {
-    "message": "Remove this skill from your project"
-  },
   "remove_this_trigger_622d866d": {
     "message": "Remove this trigger"
   },
@@ -2306,24 +2183,6 @@
   "rollback_26326307": {
     "message": "Rollback"
   },
-  "root_bot_7bb35314": {
-    "message": "Root bot."
-  },
-  "root_bot_da9de71c": {
-    "message": "Root Bot"
-  },
-  "root_bot_luis_key_is_empty_852d8c33": {
-    "message": "Root Bot LUIS key is empty"
-  },
-  "root_bot_luis_region_is_empty_67932308": {
-    "message": "Root Bot LUIS region is empty"
-  },
-  "root_bot_of_your_project_that_greets_users_and_can_94570f36": {
-    "message": "Root bot of your project that greets users, and can call skills."
-  },
-  "root_bot_qna_maker_subscription_key_is_empty_7b7c8c4a": {
-    "message": "Root Bot QnA Maker Subscription key is empty"
-  },
   "runtime_already_exists_f181f5ec": {
     "message": "Runtime already exists"
   },
@@ -2372,15 +2231,12 @@
   "search_index_for_your_qna_maker_knowledgebases_22700ca7": {
     "message": "Search index for your QnA Maker knowledgebases."
   },
-  "see_details_da74090e": {
-    "message": "See Details"
+  "see_log_4b833bf7": {
+    "message": "See Log"
   },
   "select_a_bot_e1c4dc2b": {
     "message": "Select a Bot"
   },
-  "select_a_publish_target_d4530c94": {
-    "message": "Select a publish target"
-  },
   "select_a_trigger_on_the_left_a4b41558": {
     "message": "Select a trigger on the left"
   },
@@ -2453,9 +2309,6 @@
   "set_destination_folder_f76e0259": {
     "message": "Set destination folder"
   },
-  "set_it_as_default_language_212f0a00": {
-    "message": "Set it as default language"
-  },
   "set_properties_7415af3c": {
     "message": "Set properties"
   },
@@ -2477,9 +2330,6 @@
   "settings_menu_c99ecc6d": {
     "message": "Settings menu"
   },
-  "show_all_diagnostics_c11f4e09": {
-    "message": "Show All Diagnostics"
-  },
   "show_all_notifications_55bf7858": {
     "message": "Show All Notifications"
   },
@@ -2492,9 +2342,6 @@
   "show_form_dialog_editor_in_the_canvas_140492b2": {
     "message": "Show form dialog editor in the canvas"
   },
-  "show_item_diagnostics_f6e902c7": {
-    "message": "Show { item } Diagnostics"
-  },
   "show_keys_3072a5b8": {
     "message": "Show keys"
   },
@@ -2504,9 +2351,6 @@
   "sign_out_user_6845d640": {
     "message": "Sign out user"
   },
-  "skill_9b084d2e": {
-    "message": "Skill"
-  },
   "skill_dialog_name_1bbf0eff": {
     "message": "Skill Dialog Name"
   },
@@ -2516,29 +2360,23 @@
   "skill_endpoints_e4e3d8c1": {
     "message": "Skill endpoints"
   },
-  "skill_host_endpoint_4118a173": {
-    "message": "Skill host endpoint"
-  },
   "skill_host_endpoint_b1088d0": {
     "message": "Skill Host Endpoint"
   },
-  "skill_host_endpoint_url_e68b65f6": {
-    "message": "Skill host endpoint url"
-  },
   "skill_manifest_endpoint_is_configured_improperly_e083731d": {
     "message": "Skill manifest endpoint is configured improperly"
   },
-  "skillhostendpoint_2e8f00ff": {
-    "message": "SkillHostEndPoint"
-  },
   "skillname_manifest_ef3d9fed": {
     "message": "{ skillName } Manifest"
   },
   "skills_49cccd6a": {
     "message": "Skills"
   },
-  "skip_this_step_to_add_questions_and_answers_manual_ed1b9f80": {
-    "message": "Skip this step to add questions and answers manually after creation. The number of sources and file size you can add depends on the QnA service SKU you choose. "
+  "something_happened_while_attempting_to_pull_e_952c7afe": {
+    "message": "Something happened while attempting to pull: { e }"
+  },
+  "something_went_wrong_d238c551": {
+    "message": "Something went wrong"
   },
   "something_happened_while_attempting_to_pull_e_952c7afe": {
     "message": "Something happened while attempting to pull: { e }"
@@ -2576,15 +2414,6 @@
   "speech_16063aed": {
     "message": "Speech"
   },
-  "start_all_bots_eac99ea": {
-    "message": "Start all bots"
-  },
-  "start_and_stop_local_bot_runtimes_individually_901c8d7d": {
-    "message": "Start and stop local bot runtimes individually."
-  },
-  "start_bot_1da1ebf4": {
-    "message": "Start bot"
-  },
   "start_bot_25ecad14": {
     "message": "Start Bot"
   },
@@ -2606,15 +2435,6 @@
   "step_of_setlength_43c73821": {
     "message": "{ step } of { setLength }"
   },
-  "stop_all_bots_running_total_running_df36cb0a": {
-    "message": "Stop all bots ({ running }/{ total } running)"
-  },
-  "stop_bot_866e8976": {
-    "message": "Stop Bot"
-  },
-  "stop_bot_be23cf96": {
-    "message": "Stop bot"
-  },
   "string_24369b3": {
     "message": "String"
   },
@@ -2735,48 +2555,51 @@
   "these_tasks_will_be_used_to_generate_the_manifest__2791be0e": {
     "message": "These tasks will be used to generate the manifest and describe the capabilities of this skill to those who may want to use it."
   },
+  "this_bot_has_errors_72fb40d5": {
+    "message": "This bot has errors"
+  },
+  "this_bot_has_warnings_b6735e2e": {
+    "message": "This bot has warnings"
+  },
   "this_configures_a_data_driven_dialog_via_a_collect_c7fa4389": {
     "message": "This configures a data driven dialog via a collection of events and actions."
   },
   "this_dialog_has_no_trigger_yet_d1f1d173": {
     "message": "This dialog has no trigger yet."
   },
+  "this_is_a_botname_notification_c8a391c7": {
+    "message": "This is a { botName } notification"
+  },
   "this_is_a_required_field_acb9837e": {
     "message": "This is a required field."
   },
-  "this_is_a_severity_diagnostic_58312674": {
-    "message": "This is a { severity } diagnostic"
-  },
   "this_is_a_severity_notification_9beabb58": {
     "message": "This is a { severity } notification"
   },
-  "this_is_the_bot_language_you_are_currently_authori_4a26541": {
-    "message": "This is the bot language you are currently authoring. Change the active language in the dropdown below."
-  },
   "this_is_the_language_used_for_composer_s_user_inte_ab7fa82e": {
     "message": "This is the language used for Composer’s user interface."
   },
   "this_language_will_be_copied_and_used_as_the_basis_573515e4": {
     "message": "This language will be copied and used as the basis (and fallback language) for the translation."
   },
+  "this_operation_cannot_be_completed_the_skill_is_al_4886d311": {
+    "message": "This operation cannot be completed. The skill is already part of the Bot Project"
+  },
   "this_option_allows_your_users_to_give_multiple_val_d2dd0d58": {
     "message": "This option allows your users to give multiple values for this property."
   },
-  "this_page_contains_detailed_information_about_your_b2b3413b": {
-    "message": "This Page contains detailed information about your bot. For security reasons, they are hidden by default. To test your bot or publish to Azure, you may need to provide these settings"
-  },
   "this_trigger_type_is_not_supported_by_the_regex_re_dc3eefa2": {
     "message": "This trigger type is not supported by the RegEx recognizer. To ensure this trigger is fired, change the recognizer type."
   },
-  "this_url_is_duplicated_a0768f44": {
-    "message": "This url is duplicated"
-  },
   "this_version_of_the_content_is_out_of_date_and_you_5e878f29": {
     "message": "This version of the content is out of date, and your last change was rejected. The content will be automatically refreshed."
   },
   "this_will_delete_the_dialog_and_its_contents_do_yo_9b48fa3c": {
     "message": "This will delete the Dialog and its contents. Do you wish to continue?"
   },
+  "this_will_delete_the_profile_do_you_wish_to_contin_61b54894": {
+    "message": "This will delete the profile. Do you wish to continue?"
+  },
   "this_will_open_your_emulator_application_if_you_do_ba277151": {
     "message": "This will open your Emulator application. If you don''t yet have the Bot Framework Emulator installed, you can download it <a>here</a>."
   },
@@ -2939,24 +2762,12 @@
   "updating_scripts_e17a5722": {
     "message": "Updating scripts... "
   },
-  "url_22a5f3b8": {
-    "message": "URL"
-  },
   "url_8c4ff7d2": {
     "message": "Url"
   },
   "url_should_start_with_http_s_9ca55d94": {
     "message": "Url should start with http[s]://"
   },
-  "use_custom_luis_key_73f92d45": {
-    "message": "Use custom LUIS key"
-  },
-  "use_custom_luis_region_49d31dbf": {
-    "message": "Use custom LUIS region"
-  },
-  "use_custom_qna_maker_subscription_key_126e79df": {
-    "message": "Use custom QnA Maker Subscription key"
-  },
   "use_custom_runtime_d7d323fd": {
     "message": "Use custom runtime"
   },
@@ -3023,9 +2834,6 @@
   "view_kb_c382e495": {
     "message": "View KB"
   },
-  "view_log_6d51af5e": {
-    "message": "View log"
-  },
   "view_on_npm_2051324d": {
     "message": "View on npm"
   },
@@ -3113,12 +2921,6 @@
   "write_an_expression_8773ea5c": {
     "message": "Write an expression"
   },
-  "write_your_message_5d0f151b": {
-    "message": "Write your message"
-  },
-  "yes_collect_data_b79b7844": {
-    "message": "Yes, collect data"
-  },
   "yes_dde87d5": {
     "message": "Yes"
   },
@@ -3137,15 +2939,9 @@
   "you_can_manage_all_bot_responses_here_make_good_us_5e6e1953": {
     "message": "You can manage all bot responses here. Make good use of the templates to create sophisticated response logic based on your own needs."
   },
-  "you_can_turn_data_collection_on_or_off_at_any_time_50ed326f": {
-    "message": "You can turn data collection on or off at any time in the Application Settings."
-  },
   "you_do_not_have_permission_to_save_bots_here_56cc10c7": {
     "message": "You do not have permission to save bots here"
   },
-  "you_have_successfully_published_name_to_publishtar_bc81d3c1": {
-    "message": "You have successfully published { name } to { publishTarget }"
-  },
   "your_bot_creation_journey_on_composer_131c1a8b": {
     "message": "Your bot creation journey on Composer"
   },
@@ -3154,8 +2950,5 @@
   },
   "your_knowledge_base_is_ready_6ecc1871": {
     "message": "Your knowledge base is ready!"
-  },
-  "your_project_2a42631c": {
-    "message": "your project"
   }
-}
\ No newline at end of file
+}
diff --git a/Composer/packages/server/src/models/bot/botProject.ts b/Composer/packages/server/src/models/bot/botProject.ts
index cfdc42d47..b7141f24c 100644
--- a/Composer/packages/server/src/models/bot/botProject.ts
+++ b/Composer/packages/server/src/models/bot/botProject.ts
@@ -14,6 +14,7 @@ import {
   IBotProject,
   DialogSetting,
   FileExtensions,
+  Skill,
   DialogUtils,
   checkForPVASchema,
 } from '@bfc/shared';
@@ -36,6 +37,7 @@ import { isCrossTrainConfig } from './botStructure';
 import { Builder } from './builder';
 import { IFileStorage } from './../storage/interface';
 import { LocationRef, IBuildConfig } from './interface';
+import { retrieveSkillManifests } from './skillManager';
 import { defaultFilePath, serializeFiles, parseFileName, isRecognizer } from './botStructure';
 
 const debug = log.extend('bot-project');
@@ -64,6 +66,7 @@ export class BotProject implements IBotProject {
   public defaultUISchema: {
     [key: string]: string;
   };
+  public skills: Skill[] = [];
   public diagnostics: Diagnostic[] = [];
   public settingManager: ISettingManager;
   public settings: DialogSetting | null = null;
@@ -180,6 +183,9 @@ export class BotProject implements IBotProject {
   public init = async () => {
     this.diagnostics = [];
     this.settings = await this.getEnvSettings(false);
+    const { skillManifests, diagnostics } = await retrieveSkillManifests(this.settings?.skill);
+    this.skills = skillManifests;
+    this.diagnostics.push(...diagnostics);
     this.files = await this._getFiles();
   };
 
@@ -189,6 +195,7 @@ export class BotProject implements IBotProject {
       files: Array.from(this.files.values()),
       location: this.dir,
       schemas: this.getSchemas(),
+      skills: this.skills,
       diagnostics: this.diagnostics,
       settings: this.settings,
       filesWithoutRecognizers: Array.from(this.files.values()).filter(({ name }) => !isRecognizer(name)),
@@ -474,7 +481,7 @@ export class BotProject implements IBotProject {
       luResource.forEach(({ id, isEmpty }) => {
         const fileName = `${id}.lu`;
         const f = this.files.get(fileName);
-        if (f && !isEmpty) {
+        if (f) {
           luFiles.push(f);
         }
       });
diff --git a/Composer/packages/server/src/models/bot/skillManager.ts b/Composer/packages/server/src/models/bot/skillManager.ts
index e09d08a84..88a5576af 100644
--- a/Composer/packages/server/src/models/bot/skillManager.ts
+++ b/Composer/packages/server/src/models/bot/skillManager.ts
@@ -2,6 +2,8 @@
 // Licensed under the MIT License.
 
 import * as msRest from '@azure/ms-rest-js';
+import { SkillSetting, Diagnostic, DiagnosticSeverity } from '@bfc/shared';
+import toPairs from 'lodash/toPairs';
 
 import logger from './../../logger';
 
@@ -23,3 +25,28 @@ export const getSkillManifest = async (url: string): Promise<any> => {
 
   return typeof content === 'string' ? JSON.parse(content) : {};
 };
+
+export const retrieveSkillManifests = async (skillSettings?: { [name: string]: SkillSetting } | SkillSetting[]) => {
+  const skills = toPairs(skillSettings);
+
+  const diagnostics: Diagnostic[] = [];
+  const skillManifests: any = [];
+
+  for (const [id, { manifestUrl }] of skills) {
+    try {
+      const content = await getSkillManifest(manifestUrl);
+
+      skillManifests.push({ content, id, manifestUrl });
+    } catch (error) {
+      const notify = new Diagnostic(
+        `Accessing skill manifest url error, ${manifestUrl}`,
+        'appsettings.json',
+        DiagnosticSeverity.Warning
+      );
+      diagnostics.push(notify);
+      skillManifests.push({ id, manifestUrl });
+    }
+  }
+
+  return { diagnostics, skillManifests };
+};
diff --git a/Composer/packages/server/src/models/settings/defaultSettingManager.ts b/Composer/packages/server/src/models/settings/defaultSettingManager.ts
index 2c729b399..661912648 100644
--- a/Composer/packages/server/src/models/settings/defaultSettingManager.ts
+++ b/Composer/packages/server/src/models/settings/defaultSettingManager.ts
@@ -13,7 +13,13 @@ import log from '../../logger';
 import { FileSettingManager } from './fileSettingManager';
 const debug = log.extend('default-settings-manager');
 
-const newSettingsValuePath = ['downsampling', 'luis.endpoint', 'luis.authoringEndpoint', 'skillConfiguration'];
+const newSettingsValuePath = [
+  'downsampling',
+  'luis.endpoint',
+  'luis.authoringEndpoint',
+  'skillConfiguration',
+  'customizedFunctions',
+];
 
 export class DefaultSettingManager extends FileSettingManager {
   constructor(basePath: string, user?: UserIdentity) {
@@ -84,13 +90,13 @@ export class DefaultSettingManager extends FileSettingManager {
         maxUtteranceAllowed: 15000,
       },
       skillConfiguration: {
-        // TODO: Setting isSkill property to true for now. A runtime change is required to remove dependancy on isSkill prop #4501
-        isSkill: true,
+        isSkill: false,
         allowedCallers: ['*'],
       },
       skill: {},
       defaultLanguage: 'en-us',
       languages: ['en-us'],
+      customizedFunctions: [],
       importedLibraries: [],
     };
   };
@@ -109,7 +115,6 @@ export class DefaultSettingManager extends FileSettingManager {
     if (updateFile) {
       this.set(result);
     }
-
     return result;
   }
 
diff --git a/Composer/packages/server/src/server.ts b/Composer/packages/server/src/server.ts
index e62d84f0b..a187c6836 100644
--- a/Composer/packages/server/src/server.ts
+++ b/Composer/packages/server/src/server.ts
@@ -5,8 +5,7 @@ import 'dotenv/config';
 import path from 'path';
 import crypto from 'crypto';
 
-import toNumber from 'lodash/toNumber';
-import getPort from 'get-port';
+import { getPortPromise } from 'portfinder';
 import express, { Express, Request, Response, NextFunction } from 'express';
 import bodyParser from 'body-parser';
 import morgan from 'morgan';
@@ -139,13 +138,13 @@ export async function start(electronContext?: ElectronContext): Promise<number |
     });
   });
 
-  const preferredPort = toNumber(process.env.PORT) || 5000;
+  const preferredPort = process.env.PORT || 5000;
   let port = preferredPort;
   if (process.env.NODE_ENV === 'production') {
     // Dynamically search for an open PORT starting with PORT or 5000, so that
     // the app doesn't crash if the port is already being used.
     // (disabled in dev in order to avoid breaking the webpack dev server proxy)
-    port = await getPort({ port: preferredPort });
+    port = await getPortPromise({ port: preferredPort as number });
   }
   let server;
   await new Promise((resolve) => {
diff --git a/Composer/packages/types/src/indexers.ts b/Composer/packages/types/src/indexers.ts
index 589794697..646127e85 100644
--- a/Composer/packages/types/src/indexers.ts
+++ b/Composer/packages/types/src/indexers.ts
@@ -170,30 +170,15 @@ export type LgFile = {
   parseResult?: any;
 };
 
-export type Manifest = {
-  name: string;
-  version: string;
-  description: string;
-  endpoints: ManifestEndpoint[];
-  // Other props of manifest are not used in Composer.
-  [prop: string]: any;
-};
-
-export type ManifestEndpoint = {
-  name: string;
-  endpointUrl: string;
-  msAppId: string;
-  description: string;
-  // Other skill endpoint fields in the schema that Composer is not using presently
-  [prop: string]: any;
-};
-
 export type Skill = {
   id: string;
-  manifest?: Manifest;
+  content: any;
   description?: string;
+  endpoints: any[];
+  endpointUrl: string;
+  manifestUrl: string;
+  msAppId: string;
   name: string;
-  remote: boolean;
 };
 
 export type JsonSchemaFile = {
@@ -209,7 +194,13 @@ export type FileResolver = (id: string) => FileInfo | undefined;
 
 export type MemoryResolver = (id: string) => string[] | undefined;
 
-export type SkillManifestFile = {
+export type SkillManifestInfo = {
+  content: { [key: string]: any };
+  lastModified: string;
+  id: string;
+};
+
+export type SkillManifest = {
   content: any;
   id: string;
   path?: string;
@@ -222,7 +213,7 @@ export type BotAssets = {
   luFiles: LuFile[];
   lgFiles: LgFile[];
   qnaFiles: QnAFile[];
-  skillManifests: SkillManifestFile[];
+  skillManifests: SkillManifest[];
   setting: DialogSetting;
   dialogSchemas: DialogSchemaFile[];
   formDialogSchemas: FormDialogSchema[];
diff --git a/Composer/packages/types/src/server.ts b/Composer/packages/types/src/server.ts
index fcae4db32..679a32992 100644
--- a/Composer/packages/types/src/server.ts
+++ b/Composer/packages/types/src/server.ts
@@ -1,6 +1,6 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
-import { FileInfo } from './indexers';
+import { Skill, FileInfo } from './indexers';
 import { IDiagnostic } from './diagnostic';
 import { DialogSetting } from './settings';
 
@@ -18,6 +18,7 @@ export type IBotProject = {
   defaultUISchema: {
     [key: string]: string;
   };
+  skills: Skill[];
   diagnostics: IDiagnostic[];
   settingManager: ISettingManager;
   settings: DialogSetting | null;
@@ -26,6 +27,7 @@ export type IBotProject = {
     files: FileInfo[];
     location: string;
     schemas: any;
+    skills: Skill[];
     diagnostics: IDiagnostic[];
     settings: DialogSetting | null;
   };
diff --git a/Composer/packages/types/src/settings.ts b/Composer/packages/types/src/settings.ts
index caa07e01a..c8234db15 100644
--- a/Composer/packages/types/src/settings.ts
+++ b/Composer/packages/types/src/settings.ts
@@ -29,6 +29,8 @@ export type AppUpdaterSettings = {
 };
 
 export type SkillSetting = {
+  name: string;
+  manifestUrl: string;
   msAppId: string;
   endpointUrl: string;
 };
@@ -54,6 +56,7 @@ export type DialogSetting = {
   };
   botId?: string;
   skillHostEndpoint?: string;
+  customizedFunctions: string[];
   [key: string]: any;
 };
 
diff --git a/Composer/packages/types/src/shell.ts b/Composer/packages/types/src/shell.ts
index 375573604..ae52b2a4f 100644
--- a/Composer/packages/types/src/shell.ts
+++ b/Composer/packages/types/src/shell.ts
@@ -14,9 +14,8 @@ import type {
   DialogSchemaFile,
   LuProviderType,
 } from './indexers';
-import type { JSONSchema7, SDKKinds } from './schema';
-import { Skill } from './indexers';
 import type { ILUFeaturesConfig, SkillSetting, UserSettings, DialogSetting } from './settings';
+import type { JSONSchema7 } from './schema';
 import { MicrosoftIDialog } from './sdk';
 import { FeatureFlagKey } from './featureFlags';
 
@@ -57,11 +56,6 @@ export type BotSchemas = {
   diagnostics?: any[];
 };
 
-export type DisabledMenuActions = {
-  kind: SDKKinds;
-  reason: string;
-};
-
 export type ApplicationContextApi = {
   navigateTo: (to: string, opts?: { state?: any; replace?: boolean }) => void;
   updateUserSettings: (settings: AllPartial<UserSettings>) => void;
@@ -76,10 +70,6 @@ export type ApplicationContext = {
   locale: string;
   hosted: boolean;
   userSettings: UserSettings;
-  skills: Record<string, Skill>;
-  skillsSettings: Record<string, SkillSetting>;
-  // TODO: remove
-  schemas: BotSchemas;
   flowZoomRate: ZoomInfo;
 
   httpClient: HttpClient;
@@ -119,12 +109,13 @@ export type ProjectContextApi = {
   updateIntentTrigger: (id: string, intentName: string, newIntentName: string) => void;
   createDialog: (actions: any) => Promise<string | null>;
   commitChanges: () => void;
+  addSkillDialog: () => Promise<{ manifestUrl: string; name: string } | null>;
   displayManifestModal: (manifestId: string) => void;
   updateDialogSchema: (_: DialogSchemaFile) => Promise<void>;
   createTrigger: (id: string, formData, autoSelected?: boolean) => void;
   createQnATrigger: (id: string) => void;
+  updateSkillSetting: (skillId: string, skillsData: SkillSetting) => Promise<void>;
   updateFlowZoomRate: (currentRate: number) => void;
-  updateSkill: (skillId: string, skillsData: { skill: Skill; selectedEndpointIndex: number }) => Promise<void>;
   updateRecognizer: (projectId: string, dialogId: string, kind: LuProviderType) => void;
 };
 
@@ -137,10 +128,9 @@ export type ProjectContext = {
   luFiles: LuFile[];
   luFeatures: ILUFeaturesConfig;
   qnaFiles: QnAFile[];
-  skills: Record<string, Skill>;
+  skills: any[];
   skillsSettings: Record<string, SkillSetting>;
   schemas: BotSchemas;
-  forceDisabledActions: DisabledMenuActions[];
   settings: DialogSetting;
 };
 
@@ -156,6 +146,7 @@ export type ActionContextApi = {
 
 export type DialogEditingContextApi = {
   saveData: <T = any>(newData: T, updatePath?: string, callback?: () => void | Promise<void>) => Promise<void>;
+  onOpenDialog: (dialogId: string) => Promise<void>;
   onFocusSteps: (stepIds: string[], focusedTab?: string) => Promise<void>;
   onFocusEvent: (eventId: string) => Promise<void>;
   onSelect: (ids: string[]) => void;
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/ComboBoxField.tsx b/Composer/packages/ui-plugins/select-skill-dialog/src/ComboBoxField.tsx
index b386b6c78..ee526c4da 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/ComboBoxField.tsx
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/ComboBoxField.tsx
@@ -11,7 +11,7 @@ import { IRenderFunction } from 'office-ui-fabric-react/lib/Utilities';
 export const ADD_DIALOG = 'ADD_DIALOG';
 
 interface ComboBoxFieldProps {
-  comboboxTitle?: string;
+  comboboxTitle: string | null;
   options: IComboBoxOption[];
   onChange: any;
   required?: boolean;
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/SelectSkillDialogField.tsx b/Composer/packages/ui-plugins/select-skill-dialog/src/SelectSkillDialogField.tsx
index 41fece063..b553df332 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/SelectSkillDialogField.tsx
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/SelectSkillDialogField.tsx
@@ -1,13 +1,16 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import React, { FormEvent } from 'react';
+import React, { useState } from 'react';
+import { IComboBoxOption, SelectableOptionMenuItemType } from 'office-ui-fabric-react/lib/ComboBox';
 import { FieldProps, useShellApi } from '@bfc/extension-client';
 import formatMessage from 'format-message';
 import { getSkillNameFromSetting, Skill } from '@bfc/shared';
 import { Link } from 'office-ui-fabric-react/lib/components/Link/Link';
-import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
-import { FieldLabel } from '@bfc/adaptive-form';
+
+import { ComboBoxField } from './ComboBoxField';
+
+const ADD_DIALOG = 'ADD_DIALOG';
 
 const referBySettings = (skillName: string, property: string) => {
   return `=settings.skill['${skillName}'].${property}`;
@@ -20,50 +23,64 @@ export const settingReferences = (skillName: string) => ({
 
 export const SelectSkillDialogField: React.FC<FieldProps> = (props) => {
   const { value, onChange } = props;
+  const { shellApi, skills = [] } = useShellApi();
+  const { addSkillDialog, displayManifestModal } = shellApi;
+  const [comboboxTitle, setComboboxTitle] = useState<string | null>(null);
 
-  const { shellApi, skills } = useShellApi();
-  const { displayManifestModal } = shellApi;
+  const skillId = getSkillNameFromSetting(value?.skillEndpoint);
+  const { content, manifestUrl, name } = skills.find(({ id }) => id === skillId) || ({} as Skill);
 
-  const skillNameIdentifier = getSkillNameFromSetting(value?.skillEndpoint);
-  const { manifest, name }: Skill = skills[skillNameIdentifier] || {};
+  const options: IComboBoxOption[] = skills.map(({ id, name }) => ({
+    key: name,
+    text: name,
+    data: settingReferences(id),
+    isSelected: id === skillId,
+  }));
+
+  options.push(
+    {
+      key: 'separator',
+      itemType: SelectableOptionMenuItemType.Divider,
+      text: '',
+    },
+    { key: ADD_DIALOG, text: formatMessage('Add a new Skill Dialog') }
+  );
 
-  const options: IDropdownOption[] = [];
-  for (const key in skills) {
-    const skill = skills[key];
-    const option = {
-      key: key,
-      text: skill.name,
-      data: settingReferences(key),
-      isSelected: key === skillNameIdentifier,
-    };
-    options.push(option);
+  if (comboboxTitle) {
+    options.push({ key: 'customTitle', text: comboboxTitle });
   }
 
-  const handleChange = (event: FormEvent<HTMLDivElement>, option?: IDropdownOption | undefined) => {
+  const handleChange = (_, option: IComboBoxOption) => {
     if (option) {
-      onChange({ ...value, ...option.data });
+      if (option.key === ADD_DIALOG) {
+        setComboboxTitle(formatMessage('Add a new Skill Dialog'));
+        addSkillDialog().then((skill) => {
+          if (skill?.manifestUrl && skill?.name) {
+            onChange({ ...value, ...settingReferences(skill.name) });
+          }
+          setComboboxTitle(null);
+        });
+      } else {
+        onChange({ ...value, ...option.data });
+      }
     }
   };
 
   return (
     <React.Fragment>
-      <FieldLabel
-        required
+      <ComboBoxField
+        comboboxTitle={comboboxTitle}
         description={formatMessage('Name of skill dialog to call')}
-        id={'SkillDialogNameField'}
-        label={formatMessage('Skill Dialog Name')}
-      />
-      <Dropdown
-        disabled={Object.keys(skills).length === 0}
         id={'SkillDialogName'}
+        label={formatMessage('Skill Dialog Name')}
         options={options}
-        selectedKey={skillNameIdentifier}
+        value={skillId}
         onChange={handleChange}
       />
       <Link
-        disabled={!skillNameIdentifier || !manifest || !name}
+        disabled={!content || !name}
         styles={{ root: { fontSize: '12px', paddingTop: '4px' } }}
-        onClick={() => manifest && displayManifestModal(skillNameIdentifier)}
+        onClick={() => manifestUrl && displayManifestModal(manifestUrl)}
       >
         {formatMessage('Show skill manifest')}
       </Link>
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/SkillEndpointField.tsx b/Composer/packages/ui-plugins/select-skill-dialog/src/SkillEndpointField.tsx
index 9c77437a1..6f3cc2d6a 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/SkillEndpointField.tsx
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/SkillEndpointField.tsx
@@ -5,79 +5,44 @@ import React, { useMemo } from 'react';
 import { Dropdown, IDropdownOption } from 'office-ui-fabric-react/lib/Dropdown';
 import { FieldProps, useShellApi } from '@bfc/extension-client';
 import { FieldLabel } from '@bfc/adaptive-form';
-import { getSkillNameFromSetting, Skill, VIRTUAL_LOCAL_ENDPOINT } from '@bfc/shared';
-import { SelectableOptionMenuItemType } from 'office-ui-fabric-react/lib/ComboBox';
+import { getSkillNameFromSetting, Skill } from '@bfc/shared';
 
 export const SkillEndpointField: React.FC<FieldProps> = (props) => {
   const { description, label, required, uiOptions, value } = props;
-  const { shellApi, skillsSettings, skills } = useShellApi();
-  const { updateSkill } = shellApi;
+  const { shellApi, skillsSettings, skills = [] } = useShellApi();
+  const { updateSkillSetting } = shellApi;
 
   const id = getSkillNameFromSetting(value?.skillEndpoint);
-  const skill: Skill = skills[id] || {};
-
-  const { endpointUrl: endpointUrlInSettings, msAppId: msAppIdInSettings } = skillsSettings[id] || {};
-
-  const endpoints = skill?.manifest?.endpoints || [];
-
-  const options = useMemo(() => {
-    const endpointsInManifest: any[] = endpoints.map(({ name, endpointUrl, msAppId }, key) => ({
-      key,
-      text: name,
-      data: {
-        endpointUrl,
-        msAppId,
-        name,
-      },
-      isManifestEndpoint: true,
-    }));
-
-    let localEndpoint: any[] = [];
-    if (Object.keys(skills).length > 0) {
-      if (!skill.remote) {
-        localEndpoint = [
-          {
-            key: 'localEndpointHeader',
-            itemType: SelectableOptionMenuItemType.Header,
-            text: 'Local Endpoints',
-          },
-          {
-            key: -1,
-            text: VIRTUAL_LOCAL_ENDPOINT.name,
-            data: {
-              endpointUrl: endpointUrlInSettings,
-              msAppId: msAppIdInSettings,
-              name: VIRTUAL_LOCAL_ENDPOINT.name,
-            },
-          },
-        ];
-      }
-      if (endpointsInManifest.length > 0) {
-        endpointsInManifest.unshift({
-          key: 'remoteEndpointHeader',
-          itemType: SelectableOptionMenuItemType.Header,
-          text: 'Manifest Endpoints',
-        });
-      }
-    }
-
-    return [...localEndpoint, ...endpointsInManifest];
-  }, [endpoints]);
+  const skill = skills.find(({ id: skillId }) => skillId === id) || ({} as Skill);
+  const { endpointUrl, msAppId } = skillsSettings[id] || {};
+
+  const { endpoints = [] } = skill;
+
+  const options = useMemo(
+    () =>
+      endpoints.map(({ name, endpointUrl, msAppId }, key) => ({
+        key,
+        text: name,
+        data: {
+          endpointUrl,
+          msAppId,
+        },
+      })),
+    [endpoints]
+  );
 
-  const { key } = options.find(({ data, isManifestEndpoint }) => {
-    return isManifestEndpoint && data?.endpointUrl === endpointUrlInSettings && data?.msAppId === msAppIdInSettings;
-  }) || { key: -1 };
+  const { key } = options.find(({ data }) => data.endpointUrl === endpointUrl && data.msAppId === msAppId) || {};
 
   const handleChange = (_: React.FormEvent<HTMLDivElement>, option?: IDropdownOption) => {
     if (option) {
-      updateSkill(id, { skill: { ...skill }, selectedEndpointIndex: Number(option.key) });
+      updateSkillSetting(skill.id, { ...skill, ...option.data });
     }
   };
 
   return (
     <React.Fragment>
       <FieldLabel description={description} helpLink={uiOptions?.helpLink} id={id} label={label} required={required} />
-      <Dropdown disabled={!skill.id} options={options} selectedKey={key} onChange={handleChange} />
+      <Dropdown options={options} selectedKey={key} onChange={handleChange} />
     </React.Fragment>
   );
 };
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SelectSkillDialog.test.tsx b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SelectSkillDialog.test.tsx
index 2ce1574d1..345331298 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SelectSkillDialog.test.tsx
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SelectSkillDialog.test.tsx
@@ -2,55 +2,67 @@
 // Licensed under the MIT License.
 
 import React from 'react';
-import { render, fireEvent, getAllByRole } from '@botframework-composer/test-utils';
+import { act, fireEvent, getAllByRole, render } from '@botframework-composer/test-utils';
 import { EditorExtension } from '@bfc/extension-client';
-import { ShellData } from '@bfc/shared';
-import { act } from '@botframework-composer/test-utils/lib/hooks';
 
 import { SelectSkillDialogField, settingReferences } from '../SelectSkillDialogField';
 
 import { skills } from './constants';
 
-const renderSelectSkillDialog = ({ onChange = jest.fn() } = {}) => {
+const renderSelectSkillDialog = ({ addSkillDialog = jest.fn(), onChange = jest.fn() } = {}) => {
   const props = {
     value: {},
     onChange,
   } as any;
 
-  const shell: any = {};
+  const shell = {
+    addSkillDialog,
+  };
 
-  const shellData: ShellData = {
+  const shellData = {
     skills,
-  } as ShellData;
+  };
 
   return render(
-    <EditorExtension plugins={{}} projectId="12a.32" shell={{ api: shell, data: shellData }}>
+    <EditorExtension shell={{ api: shell, data: shellData }}>
       <SelectSkillDialogField {...props} />
     </EditorExtension>
   );
 };
 
 describe('Select Skill Dialog', () => {
-  it('should display label', async () => {
-    const { findByText } = renderSelectSkillDialog();
-    await findByText('Skill Dialog Name');
-  });
-
-  it('should update the dialog file with the selected skill', async () => {
+  it('should add a new skill', async () => {
+    const addSkillDialog = jest.fn().mockImplementation(() => {
+      return {
+        then: (cb) => {
+          cb({
+            manifestUrl: 'https://skill',
+            name: 'test-skill',
+            msAppId: '0000-0000',
+            endpointUrl: 'https://skill/api/messafes',
+          });
+        },
+      };
+    });
     const onChange = jest.fn();
-    const keys = Object.keys(skills);
 
-    const { baseElement, findByRole } = renderSelectSkillDialog({ onChange });
-    const combobox = await findByRole('listbox');
+    const { baseElement, findByRole } = renderSelectSkillDialog({ addSkillDialog, onChange });
+    const combobox = await findByRole('combobox');
     act(() => {
       fireEvent.click(combobox);
     });
 
-    const options = getAllByRole(baseElement, 'option');
+    const dialogs = getAllByRole(baseElement, 'option');
     act(() => {
-      fireEvent.click(options[options.length - 1]);
+      fireEvent.click(dialogs[dialogs.length - 1]);
     });
 
-    expect(onChange).toHaveBeenCalledWith({ ...settingReferences(keys[1]) });
+    expect(addSkillDialog).toHaveBeenCalled();
+    expect(onChange).toHaveBeenCalledWith({ ...settingReferences('test-skill') });
+  });
+
+  it('should display label', async () => {
+    const { findByText } = renderSelectSkillDialog();
+    await findByText('Skill Dialog Name');
   });
 });
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SkillEndpointField.test.tsx b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SkillEndpointField.test.tsx
index f77a6a20c..56ca59c14 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SkillEndpointField.test.tsx
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/SkillEndpointField.test.tsx
@@ -5,6 +5,7 @@
 import React from 'react';
 import { fireEvent, getAllByRole, render } from '@botframework-composer/test-utils';
 import { EditorExtension } from '@bfc/extension-client';
+import { convertSkillsToDictionary, Skill } from '@bfc/shared';
 import { act } from '@botframework-composer/test-utils/lib/hooks';
 
 import { SkillEndpointField } from '../SkillEndpointField';
@@ -13,18 +14,18 @@ import { skills } from './constants';
 
 const projectId = '123.abc';
 
-const renderSkillEndpointField = ({ value = {}, updateSkill = jest.fn() } = {}) => {
+const renderSkillEndpointField = ({ value = {}, updateSkillSetting = jest.fn() } = {}) => {
   const props = {
     value,
   } as any;
 
   const shellData: any = {
-    skillsSettings: {},
+    skillsSettings: convertSkillsToDictionary(skills as Skill[]),
     skills,
   };
 
   const shell: any = {
-    updateSkill,
+    updateSkillSetting,
   };
 
   return render(
@@ -35,14 +36,11 @@ const renderSkillEndpointField = ({ value = {}, updateSkill = jest.fn() } = {})
 };
 
 describe('Begin Skill Dialog', () => {
-  it('should call update skill with the correct parameters', async () => {
-    const updateSkill = jest.fn();
-    const keys = Object.keys(skills);
-    const selectedKeyIndex = 1;
-    const selectedSkill = skills[keys[selectedKeyIndex]];
+  it('should update the skill settings', async () => {
+    const updateSkillSetting = jest.fn();
     const { baseElement, findByRole } = renderSkillEndpointField({
-      updateSkill,
-      value: { skillEndpoint: `=settings.skill['${keys[selectedKeyIndex]}'].endpointUrl` },
+      updateSkillSetting,
+      value: { skillEndpoint: `=settings.skill['${skills[0].id}'].endpointUrl` },
     });
 
     const listbox = await findByRole('listbox');
@@ -51,70 +49,16 @@ describe('Begin Skill Dialog', () => {
     });
 
     const endpoints = getAllByRole(baseElement, 'option');
-
     act(() => {
       fireEvent.click(endpoints[endpoints.length - 1]);
     });
 
-    expect(updateSkill).toHaveBeenCalledWith(
-      keys[selectedKeyIndex],
+    expect(updateSkillSetting).toHaveBeenCalledWith(
+      skills[0].id,
       expect.objectContaining({
-        selectedEndpointIndex: 1,
-        skill: selectedSkill,
+        endpointUrl: skills[0].endpoints[0].endpointUrl,
+        msAppId: skills[0].endpoints[0].msAppId,
       })
     );
   });
-
-  it('should choose composer local endpoint', async () => {
-    const updateSkill = jest.fn();
-    const keys = Object.keys(skills);
-    const selectedKeyIndex = 1;
-    const selectedSkill = skills[keys[selectedKeyIndex]];
-    const { baseElement, findByRole } = renderSkillEndpointField({
-      updateSkill,
-      value: { skillEndpoint: `=settings.skill['${keys[selectedKeyIndex]}'].endpointUrl` },
-    });
-
-    const listbox = await findByRole('listbox');
-    act(() => {
-      fireEvent.click(listbox);
-    });
-
-    const endpoints = getAllByRole(baseElement, 'option');
-
-    act(() => {
-      fireEvent.click(endpoints[1]);
-    });
-
-    expect(updateSkill).toHaveBeenCalledWith(
-      keys[selectedKeyIndex],
-      expect.objectContaining({
-        selectedEndpointIndex: -1,
-        skill: selectedSkill,
-      })
-    );
-  });
-
-  it('should not fail if skill has no manifest', async () => {
-    const updateSkill = jest.fn();
-    const keys = Object.keys(skills);
-    const selectedKeyIndex = 1;
-    const selectedSkill = skills[keys[selectedKeyIndex]];
-    delete selectedSkill.manifest;
-    const { baseElement, findByRole } = renderSkillEndpointField({
-      updateSkill,
-      value: { skillEndpoint: `=settings.skill['${keys[selectedKeyIndex]}'].endpointUrl` },
-    });
-
-    const listbox = await findByRole('listbox');
-    act(() => {
-      fireEvent.click(listbox);
-    });
-
-    const endpoints = getAllByRole(baseElement, 'option').filter((endpoint) => {
-      return !!endpoint.title;
-    });
-
-    expect(endpoints.length).toBe(1);
-  });
 });
diff --git a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/constants.ts b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/constants.ts
index cc303977c..7b8d4f479 100644
--- a/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/constants.ts
+++ b/Composer/packages/ui-plugins/select-skill-dialog/src/__tests__/constants.ts
@@ -1,54 +1,37 @@
 // Copyright (c) Microsoft Corporation.
 // Licensed under the MIT License.
 
-import { Skill } from '@bfc/extension-client';
-
-export const skills: Record<string, Skill> = {
-  yuesuemailskill0207: {
-    id: '123-abc',
-    remote: false,
+export const skills = [
+  {
+    id: 'yuesuemailskill0207',
+    manifestUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/manifest/manifest-1.0.json',
+    endpoints: [
+      {
+        name: 'production',
+        protocol: 'BotFrameworkV3',
+        description: 'Production endpoint for the Email Skill',
+        endpointUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/api/messages',
+        msAppId: '79432da8-0f7e-4a16-8c23-ddbba30ae85d',
+      },
+    ],
+    name: 'Email Skill',
     description: 'Production endpoint for the Email Skill',
-    name: 'yuesuemailskill0207',
-    manifest: {
-      version: '1.0',
-      name: 'yuesuemail-2.0.1-manifest',
-      description: 'Production endpoint for the Email Skill',
-      endpoints: [
-        {
-          name: 'production',
-          protocol: 'BotFrameworkV3',
-          description: 'Production endpoint for the Email Skill',
-          endpointUrl: 'https://yuesuemailskill0207-gjvga67.azurewebsites.net/api/messages',
-          msAppId: '79432da8-0f7e-4a16-8c23-ddbba30ae85d',
-        },
-      ],
-    },
+    content: {},
   },
-  sandwichskill: {
-    id: '234-abc',
-    remote: false,
-    description: 'Production endpoint for the Email Skill',
-    name: 'sandwichskill0207',
-    manifest: {
-      version: '1.0',
-      name: 'sandwich-manifest',
-      description: 'Production endpoint for the Email Skill',
-      endpoints: [
-        {
-          name: 'YourSandwichBotName',
-          protocol: 'BotFrameworkV3',
-          description: 'Default endpoint for the skill',
-          endpointUrl: 'https://ericv3skillssimplesandwichbot.azurewebsites.net/api/messages',
-          msAppId: '94e29d0f-3f0d-46f0-aa78-00aed83698cf',
-        },
-        {
-          name: 'YourSandwichBotName2',
-          protocol: 'BotFrameworkV3',
-          description: 'Backup endpoint for the skill',
-          endpointUrl: 'https://ericv3skills2simplesandwichbot.azurewebsites.net/api/messages',
-          msAppId: '94e29d0f-3f0d-46f0-aa78-00aed83698cfd',
-        },
-      ],
-    },
+  {
+    id: 'sandwich',
+    manifestUrl: 'https://ericv3skillssimplesandwichbot.azurewebsites.net/wwwroot/sandwich-bot-manifest.json',
+    name: 'Sandwich Skill Bot',
+    endpoints: [
+      {
+        name: 'YourSandwichBotName',
+        protocol: 'BotFrameworkV3',
+        description: 'Default endpoint for the skill',
+        endpointUrl: 'https://ericv3skillssimplesandwichbot.azurewebsites.net/api/messages',
+        msAppId: '94e29d0f-3f0d-46f0-aa78-00aed83698cf',
+      },
+    ],
+    description: 'Default endpoint for the skill',
+    content: {},
   },
-};
+];
diff --git a/Composer/scripts/e2e.js b/Composer/scripts/e2e.js
index 2dfa80ad0..bf4fc413b 100644
--- a/Composer/scripts/e2e.js
+++ b/Composer/scripts/e2e.js
@@ -54,7 +54,7 @@ Wait for the server to come up and then start cypress.
   console.log(msg);
 
   // wait for a second so that users can see value of ENV variables.
-  await new Promise((resolve) => {
+  await new Promise(resolve => {
     setTimeout(resolve, 2000);
   });
 }
@@ -69,7 +69,7 @@ async function setup() {
 }
 
 async function run() {
-  return new Promise((resolve) => {
+  return new Promise(resolve => {
     const startCommand = isDev ? 'start:dev' : 'start';
     const server = spawn('yarn', [startCommand], { cwd: path.resolve(rootDir), stdio: 'inherit' });
 
@@ -77,9 +77,9 @@ async function run() {
       resolve();
     });
 
-    const cleanupServer = (code) => server.kill(code);
+    const cleanupServer = code => server.kill(code);
 
-    ['beforeExit', 'SIGINT'].forEach((evt) => {
+    ['beforeExit', 'SIGINT'].forEach(evt => {
       process.on(evt, cleanupServer);
     });
   });
@@ -91,6 +91,9 @@ function cleanup() {
 
 console.clear();
 
-processArgs().then(setup).then(run).then(cleanup);
+processArgs()
+  .then(setup)
+  .then(run)
+  .then(cleanup);
 
 process.on('SIGINT', cleanup);
diff --git a/Composer/yarn.lock b/Composer/yarn.lock
index 3de05215e..a6d0299c2 100644
--- a/Composer/yarn.lock
+++ b/Composer/yarn.lock
@@ -15877,6 +15877,15 @@ pnp-webpack-plugin@1.5.0:
   dependencies:
     ts-pnp "^1.1.2"
 
+portfinder@1.0.25:
+  version "1.0.25"
+  resolved "https://registry.yarnpkg.com/portfinder/-/portfinder-1.0.25.tgz#254fd337ffba869f4b9d37edc298059cb4d35eca"
+  integrity sha512-6ElJnHBbxVA1XSLgBp7G1FiCkQdlqGzuF7DswL5tcea+E8UpuvPU7beVAjjRwCioTS9ZluNbu+ZyRvgTsmqEBg==
+  dependencies:
+    async "^2.6.2"
+    debug "^3.1.1"
+    mkdirp "^0.5.1"
+
 portfinder@^1.0.26:
   version "1.0.26"
   resolved "https://registry.yarnpkg.com/portfinder/-/portfinder-1.0.26.tgz#475658d56ca30bed72ac7f1378ed350bd1b64e70"
diff --git a/extensions/azurePublish/yarn.lock b/extensions/azurePublish/yarn.lock
index ccb13833b..53405bd92 100644
--- a/extensions/azurePublish/yarn.lock
+++ b/extensions/azurePublish/yarn.lock
@@ -1146,9 +1146,9 @@ balanced-match@^1.0.0:
   integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=
 
 base64-js@^1.0.2:
-  version "1.5.1"
-  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a"
-  integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.3.1.tgz#58ece8cb75dd07e71ed08c736abc5fac4dbf8df1"
+  integrity sha512-mLQ4i2QO1ytvGWFWmcngKO//JXAQueZvwEKtjgQFM4jIK0kU+ytMfplL8j+n5mspOfjHwoAg+9yhb7BwAHm36g==
 
 bcrypt-pbkdf@^1.0.0:
   version "1.0.2"
@@ -2115,9 +2115,9 @@ hyperlinker@^1.0.0:
   integrity sha512-Ty8UblRWFEcfSuIaajM34LdPXIhbs1ajEX/BBPv24J+enSVaEVY63xQ6lTO9VRYS5LAoghIG0IDJ+p+IPzKUQQ==
 
 ieee754@^1.1.4:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352"
-  integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==
+  version "1.1.13"
+  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.1.13.tgz#ec168558e95aa181fd87d37f55c32bbcb6708b84"
+  integrity sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==
 
 ignore@^5.1.1, ignore@^5.1.4:
   version "5.1.8"
diff --git a/extensions/localPublish/package.json b/extensions/localPublish/package.json
index 9e3819bd8..555f81830 100644
--- a/extensions/localPublish/package.json
+++ b/extensions/localPublish/package.json
@@ -13,12 +13,11 @@
     "@botframework-composer/types": "file:../../Composer/packages/types",
     "adm-zip": "^0.4.14",
     "archiver": "^5.0.2",
-    "get-port": "^5.1.1",
     "globby": "^11.0.0",
-    "kill-port": "^1.6.1",
-    "lodash": "^4.17.20",
     "path": "^0.12.7",
+    "portfinder": "^1.0.26",
     "rimraf": "^3.0.2",
+    "tcp-port-used": "^1.0.1",
     "uuid": "^7.0.1"
   },
   "resolutions": {
@@ -26,9 +25,9 @@
   },
   "devDependencies": {
     "@types/node": "^14.11.8",
+    "@types/tcp-port-used": "1.0.0",
     "ts-loader": "^8.0.9",
     "typescript": "^4.0.5",
-    "@types/lodash": "^4.14.162",
     "webpack": "^5.4.0",
     "webpack-cli": "^4.2.0"
   }
diff --git a/extensions/localPublish/src/index.ts b/extensions/localPublish/src/index.ts
index 55d7111f1..5c70938e9 100644
--- a/extensions/localPublish/src/index.ts
+++ b/extensions/localPublish/src/index.ts
@@ -10,13 +10,9 @@ import rimraf from 'rimraf';
 import archiver from 'archiver';
 import { v4 as uuid } from 'uuid';
 import AdmZip from 'adm-zip';
-import { DialogSetting, PublishPlugin, IExtensionRegistration } from '@botframework-composer/types';
-
-import killPort from 'kill-port';
-import map from 'lodash/map';
-import range from 'lodash/range';
-import getPort from 'get-port';
-
+import portfinder from 'portfinder';
+import * as tcpPortUsed from 'tcp-port-used';
+import { PublishPlugin, IExtensionRegistration } from '@botframework-composer/types';
 
 const stat = promisify(fs.stat);
 const readDir = promisify(fs.readdir);
@@ -42,16 +38,6 @@ interface PublishConfig {
 
 const isWin = process.platform === 'win32';
 
-const localhostRegex = /^https?:\/\/(localhost|127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}|::1)/;
-
-
-const isLocalhostUrl = (matchUrl: string) => {
-  return localhostRegex.test(matchUrl);
-};
-
-const isSkillHostUpdateRequired = (skillHostEndpoint?: string) => {
-  return !skillHostEndpoint || isLocalhostUrl(skillHostEndpoint);
-};
 class LocalPublisher implements PublishPlugin<PublishConfig> {
   public name = 'localpublish';
   public description = 'Publish bot to local runtime';
@@ -108,7 +94,7 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
       }
       await this.setBot(botId, version, fullSettings, project);
     } catch (error) {
-      await this.stopBot(botId);
+      this.stopBot(botId);
       this.setBotStatus(botId, {
         status: 500,
         result: {
@@ -170,13 +156,17 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
           status: LocalPublisher.runningBots[botId].status,
           result: LocalPublisher.runningBots[botId].result,
         };
+        if (LocalPublisher.runningBots[botId].status === 500) {
+          // after we return the 500 status once, delete it out of the running bots list.
+          delete LocalPublisher.runningBots[botId];
+        }
         return status;
       }
     } else {
       return {
-        status: 404,
+        status: 200,
         result: {
-          message: 'Status cannot be obtained for this bot.',
+          message: 'Ready',
         },
       };
     }
@@ -233,7 +223,6 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
     const botId = project.id;
     const isExist = await this.botExist(botId);
     // get runtime template
-
     const runtime = this.composer.getRuntimeByProject(project);
     try {
       if (!isExist) {
@@ -253,7 +242,7 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
         await runtime.build(runtimeDir, project);
       } else {
         // stop bot
-        await this.stopBot(botId);
+        this.stopBot(botId);
         // get previous settings
         // when changing type of runtime
         const settings = JSON.parse(
@@ -282,13 +271,6 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
     await this.zipBot(dstPath, srcDir);
   };
 
-  private getAvailablePorts = (): number[] => {
-    const excludePorts = map(LocalPublisher.runningBots, 'port');
-    const portRanges = range(3979, 5000);
-    const filtered = portRanges.filter((current) => !excludePorts.includes(current));
-    return filtered;
-  };
-
   // start bot in current version
   private setBot = async (botId: string, version: string, settings: any, project: any) => {
     // get port, and stop previous bot if exist
@@ -298,10 +280,10 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
         this.composer.log('Bot already running. Stopping bot...');
         // this may or may not be set based on the status of the bot
         port = LocalPublisher.runningBots[botId].port;
-        await this.stopBot(botId);
+        this.stopBot(botId);
       }
       if (!port) {
-        port = await getPort({ port: this.getAvailablePorts() });
+        port = await portfinder.getPortPromise({ port: 3979, stopPort: 5000 });
       }
 
       // if not using custom runtime, update assets in tmp older
@@ -323,7 +305,7 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
       await this.startBot(botId, port, settings, project);
     } catch (error) {
       console.error('Error in startbot: ', error);
-      await this.stopBot(botId);
+      this.stopBot(botId);
       this.setBotStatus(botId, {
         status: 500,
         result: {
@@ -354,20 +336,11 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
       // take the 0th item off the array, leaving just the args
       this.composer.log('Starting bot on port %d. (%s)', port, commandAndArgs.join(' '));
       const startCommand = commandAndArgs.shift();
-
-      let config: any[] = [];
-      let skillHostEndpoint;
-      if (isSkillHostUpdateRequired(settings?.skillHostEndpoint)) {
-        // Update skillhost endpoint only if ngrok url not set meaning empty or localhost url
-        skillHostEndpoint = `http://127.0.0.1:${port}/api/skills`;
-
-      }
-      config = this.getConfig(settings, skillHostEndpoint)
       let spawnProcess;
       try {
         spawnProcess = spawn(
           startCommand,
-          [...commandAndArgs, '--port', port, `--urls`, `http://0.0.0.0:${port}`, ...config],
+          [...commandAndArgs, '--port', port, `--urls`, `http://0.0.0.0:${port}`, ...this.getConfig(settings)],
           {
             cwd: botDir,
             stdio: ['ignore', 'pipe', 'pipe'],
@@ -375,23 +348,31 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
           }
         );
         this.composer.log('Started process %d', spawnProcess.pid);
+      } catch (err) {
+        return reject(err);
+      }
+
+      // check if the port if ready for connecting, issue: https://github.com/microsoft/BotFramework-Composer/issues/3728
+      // retry every 500ms, timeout 10min
+      const retryTime = 500;
+      const timeOutTime = 600000;
+      tcpPortUsed.waitUntilUsedOnHost(port, '0.0.0.0', retryTime, timeOutTime).then(() => {
         this.setBotStatus(botId, {
           process: spawnProcess,
           port: port,
-          status: 202,
-          result: { message: 'Runtime process started. Waiting for communication from runtime' },
+          status: 200,
+          result: { message: 'Runtime started' },
         });
         const processLog = this.composer.log.extend(spawnProcess.pid);
         this.addListeners(spawnProcess, botId, processLog);
         resolve();
-      } catch (err) {
-        reject(err);
-        throw err;
-      }
+      }, (err) => {
+        reject(`Bot on localhost:${port} not working, error message: ${err.message}`)
+      })
     });
   };
 
-  private getConfig = (config: DialogSetting, skillHostEndpointUrl?: string): string[] => {
+  private getConfig = (config: any) => {
     const configList: string[] = [];
     if (config.MicrosoftAppPassword) {
       configList.push('--MicrosoftAppPassword');
@@ -405,12 +386,8 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
       configList.push('--qna:endpointKey');
       configList.push(config.qna.endpointKey);
     }
-
-    if(skillHostEndpointUrl) {
-      configList.push('--SkillHostEndpoint');
-      configList.push(skillHostEndpointUrl);
-    }
-
+    // console.log(config.qna);
+    // console.log(configList);
     return configList;
   };
 
@@ -432,13 +409,7 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
     let erroutput = '';
     child.stdout &&
       child.stdout.on('data', (data: any) => {
-        if(!erroutput && LocalPublisher.runningBots[botId].status === 202) {
-          this.setBotStatus(botId, {
-            status: 200,
-            result: { message: 'Runtime has started'},
-          });
-        }
-        logger('%s', data.toString());
+        logger('%s', data);
       });
 
     child.stderr &&
@@ -457,6 +428,7 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
     });
 
     child.on('error', (err) => {
+      logger('error: %s', err.message);
       this.setBotStatus(botId, {
         status: 500,
         result: { message: err.message },
@@ -511,27 +483,24 @@ class LocalPublisher implements PublishPlugin<PublishConfig> {
   };
 
   // make it public, so that able to stop runtime before switch ejected runtime.
-  public stopBot = async (botId: string) => {
+  public stopBot = (botId: string) => {
     const proc = LocalPublisher.runningBots[botId]?.process;
-    const port = LocalPublisher.runningBots[botId]?.port;
-
-    if (port) {
-      this.composer.log('Killing process at port %d', port);
-
-      await new Promise((resolve, reject) => {
-        setTimeout(async () => {
-          killPort(port)
-            .then(() => {
-              this.removeListener(proc);
-              delete LocalPublisher.runningBots[botId];
-              resolve();
-            })
-            .catch((err) => {
-              reject(err);
-            });
-        }, 1000);
-      });
+
+    if (proc) {
+      this.composer.log('Killing process %d', -proc.pid);
+      // Kill the bot process AND all child processes
+      try {
+        this.removeListener(proc);
+        process.kill(isWin ? proc.pid : -proc.pid);
+      } catch (err) {
+        // ESRCH means pid not found
+        // this throws an error but doesn't indicate failure for us
+        if (err.code !== 'ESRCH') {
+          throw err;
+        }
+      }
     }
+    delete LocalPublisher.runningBots[botId];
   };
 
   private copyDir = async (srcDir: string, dstDir: string) => {
diff --git a/extensions/localPublish/yarn.lock b/extensions/localPublish/yarn.lock
index 1de1064f6..309335f24 100644
--- a/extensions/localPublish/yarn.lock
+++ b/extensions/localPublish/yarn.lock
@@ -84,11 +84,6 @@
     "@types/qs" "*"
     "@types/serve-static" "*"
 
-"@types/lodash@^4.14.162":
-  version "4.14.165"
-  resolved "https://registry.yarnpkg.com/@types/lodash/-/lodash-4.14.165.tgz#74d55d947452e2de0742bad65270433b63a8c30f"
-  integrity sha512-tjSSOTHhI5mCHTy/OOXYIhi2Wt1qcbHmuXD1Ha7q70CgI/I71afO4XtLb/cVexki1oVYchpul/TOuu3Arcdxrg==
-
 "@types/mime@*":
   version "2.0.3"
   resolved "https://registry.yarnpkg.com/@types/mime/-/mime-2.0.3.tgz#c893b73721db73699943bfc3653b1deb7faa4a3a"
@@ -129,6 +124,11 @@
     "@types/mime" "*"
     "@types/node" "*"
 
+"@types/tcp-port-used@1.0.0":
+  version "1.0.0"
+  resolved "https://botbuilder.myget.org/F/botframework-cli/npm/@types/tcp-port-used/-/@types/tcp-port-used-1.0.0.tgz#2a7b674fe81580d7c205297e26594ee12d07100f"
+  integrity sha1-KntnT+gVgNfCBSl+JllO4S0HEA8=
+
 adm-zip@^0.4.14:
   version "0.4.16"
   resolved "https://registry.yarnpkg.com/adm-zip/-/adm-zip-0.4.16.tgz#cf4c508fdffab02c269cbc7f471a875f05570365"
@@ -175,6 +175,13 @@ array-union@^2.1.0:
   resolved "https://registry.yarnpkg.com/array-union/-/array-union-2.1.0.tgz#b798420adbeb1de828d84acd8a2e23d3efe85e8d"
   integrity sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==
 
+async@^2.6.2:
+  version "2.6.3"
+  resolved "https://registry.yarnpkg.com/async/-/async-2.6.3.tgz#d72625e2344a3656e3a3ad4fa749fa83299d82ff"
+  integrity sha512-zflvls11DCy+dQWzTW2dzuilv8Z5X/pjfmZOWba6TNIVDm+2UDaJmXSOXlasHKfNBs8oo3M0aT50fDEWfKZjXg==
+  dependencies:
+    lodash "^4.17.14"
+
 async@^3.2.0:
   version "3.2.0"
   resolved "https://registry.yarnpkg.com/async/-/async-3.2.0.tgz#b3a2685c5ebb641d3de02d161002c60fc9f85720"
@@ -191,10 +198,10 @@ balanced-match@^1.0.0:
   integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=
 
 base64-js@^1.0.2:
-  version "1.5.1"
-  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a"
-  integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
-
+  version "1.3.1"
+  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.3.1.tgz#58ece8cb75dd07e71ed08c736abc5fac4dbf8df1"
+  integrity sha512-mLQ4i2QO1ytvGWFWmcngKO//JXAQueZvwEKtjgQFM4jIK0kU+ytMfplL8j+n5mspOfjHwoAg+9yhb7BwAHm36g==
+  
 big.js@^5.2.2:
   version "5.2.2"
   resolved "https://registry.yarnpkg.com/big.js/-/big.js-5.2.2.tgz#65f0af382f578bcdc742bd9c281e9cb2d7768328"
@@ -298,6 +305,20 @@ crc@^3.4.4:
   dependencies:
     buffer "^5.1.0"
 
+debug@4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-4.1.0.tgz#373687bffa678b38b1cd91f861b63850035ddc87"
+  integrity sha512-heNPJUJIqC+xB6ayLAMHaIrmN9HKa7aQO8MGqKpvCA+uJYVcvR6l5kgdrhRuwPFHU7P5/A1w0BjByPHwpfTDKg==
+  dependencies:
+    ms "^2.1.1"
+
+debug@^3.1.1:
+  version "3.2.6"
+  resolved "https://registry.yarnpkg.com/debug/-/debug-3.2.6.tgz#e83d17de16d8a7efb7717edbe5fb10135eee629b"
+  integrity sha512-mel+jf7nrtEl5Pn1Qx46zARXKDpBbvzezse7p7LqINmdoIk8PYP5SySaxEmYv6TZ0JyEKA1hsCId6DIhgITtWQ==
+  dependencies:
+    ms "^2.1.1"
+
 debug@^4.1.1:
   version "4.2.0"
   resolved "https://registry.yarnpkg.com/debug/-/debug-4.2.0.tgz#7f150f93920e94c58f5574c2fd01a3110effe7f1"
@@ -305,6 +326,11 @@ debug@^4.1.1:
   dependencies:
     ms "2.1.2"
 
+deep-is@^0.1.3:
+  version "0.1.3"
+  resolved "https://registry.yarnpkg.com/deep-is/-/deep-is-0.1.3.tgz#b369d6fb5dbc13eecf524f91b070feedc357cf34"
+  integrity sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=
+
 dir-glob@^3.0.1:
   version "3.0.1"
   resolved "https://registry.yarnpkg.com/dir-glob/-/dir-glob-3.0.1.tgz#56dbf73d992a4a93ba1584f4534063fd2e41717f"
@@ -398,16 +424,6 @@ fs.realpath@^1.0.0:
   resolved "https://registry.yarnpkg.com/fs.realpath/-/fs.realpath-1.0.0.tgz#1504ad2523158caa40db4a2787cb01411994ea4f"
   integrity sha1-FQStJSMVjKpA20onh8sBQRmU6k8=
 
-get-port@^5.1.1:
-  version "5.1.1"
-  resolved "https://registry.yarnpkg.com/get-port/-/get-port-5.1.1.tgz#0469ed07563479de6efb986baf053dcd7d4e3193"
-  integrity sha512-g/Q1aTSDOxFpchXC4i8ZWvxA1lnPqx/JHqcpIw0/LX9T8x/GBbi6YnlN5nhaKIFkT8oFsscUKgDJYxfwfS6QsQ==
-
-get-them-args@1.3.2:
-  version "1.3.2"
-  resolved "https://registry.yarnpkg.com/get-them-args/-/get-them-args-1.3.2.tgz#74a20ba8a4abece5ae199ad03f2bcc68fdfc9ba5"
-  integrity sha1-dKILqKSr7OWuGZrQPyvMaP38m6U=
-
 glob-parent@^5.1.0:
   version "5.1.1"
   resolved "https://registry.yarnpkg.com/glob-parent/-/glob-parent-5.1.1.tgz#b6c1ef417c4e5663ea498f1c45afac6916bbc229"
@@ -444,16 +460,16 @@ graceful-fs@^4.1.2, graceful-fs@^4.1.6, graceful-fs@^4.2.0:
   resolved "https://registry.yarnpkg.com/graceful-fs/-/graceful-fs-4.2.4.tgz#2256bde14d3632958c465ebc96dc467ca07a29fb"
   integrity sha512-WjKPNJF79dtJAVniUlGGWHYGz2jWxT6VhN/4m1NdkbZ2nOsEF+cI1Edgql5zCRhs/VsQYRvrXctxktVXZUkixw==
 
+ieee754@^1.1.4:
+  version "1.1.13"
+  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.1.13.tgz#ec168558e95aa181fd87d37f55c32bbcb6708b84"
+  integrity sha512-4vf7I2LYV/HaWerSo3XmlMkp5eZ83i+/CDluXi/IGTs/O1sejBNhTtnxzmRZfvOUqj7lZjqHkeTvpgSFDlWZTg==
+  
 has-flag@^3.0.0:
   version "3.0.0"
   resolved "https://registry.yarnpkg.com/has-flag/-/has-flag-3.0.0.tgz#b5d454dc2199ae225699f3467e5a07f3b955bafd"
   integrity sha1-tdRU3CGZriJWmfNGfloH87lVuv0=
 
-ieee754@^1.1.4:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352"
-  integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==
-
 ignore@^5.1.4:
   version "5.1.8"
   resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.1.8.tgz#f150a8b50a34289b33e22f5889abd4d8016f0e57"
@@ -477,6 +493,11 @@ inherits@2.0.3:
   resolved "https://registry.yarnpkg.com/inherits/-/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"
   integrity sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=
 
+ip-regex@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/ip-regex/-/ip-regex-2.1.0.tgz#fa78bf5d2e6913c911ce9f819ee5146bb6d844e9"
+  integrity sha1-+ni/XS5pE8kRzp+BnuUUa7bYROk=
+
 is-extglob@^2.1.1:
   version "2.1.1"
   resolved "https://registry.yarnpkg.com/is-extglob/-/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
@@ -494,6 +515,20 @@ is-number@^7.0.0:
   resolved "https://registry.yarnpkg.com/is-number/-/is-number-7.0.0.tgz#7535345b896734d5f80c4d06c50955527a14f12b"
   integrity sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==
 
+is-url@^1.2.2:
+  version "1.2.4"
+  resolved "https://registry.yarnpkg.com/is-url/-/is-url-1.2.4.tgz#04a4df46d28c4cff3d73d01ff06abeb318a1aa52"
+  integrity sha512-ITvGim8FhRiYe4IQ5uHSkj7pVaPDrCTkNd3yq3cV7iZAcJdHTUMPMEHcqSOy9xZ9qFenQCvi+2wjH9a1nXqHww==
+
+is2@2.0.1:
+  version "2.0.1"
+  resolved "https://registry.yarnpkg.com/is2/-/is2-2.0.1.tgz#8ac355644840921ce435d94f05d3a94634d3481a"
+  integrity sha512-+WaJvnaA7aJySz2q/8sLjMb2Mw14KTplHmSwcSpZ/fWJPkUmqw3YTzSWbPJ7OAwRvdYTWF2Wg+yYJ1AdP5Z8CA==
+  dependencies:
+    deep-is "^0.1.3"
+    ip-regex "^2.1.0"
+    is-url "^1.2.2"
+
 isarray@~1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/isarray/-/isarray-1.0.0.tgz#bb935d48582cba168c06834957a54a3e07124f11"
@@ -520,14 +555,6 @@ jsonfile@^6.0.1:
   optionalDependencies:
     graceful-fs "^4.1.6"
 
-kill-port@^1.6.1:
-  version "1.6.1"
-  resolved "https://registry.yarnpkg.com/kill-port/-/kill-port-1.6.1.tgz#560fe79484583bdf3a5e908557dae614447618aa"
-  integrity sha512-un0Y55cOM7JKGaLnGja28T38tDDop0AQ8N0KlAdyh+B1nmMoX8AnNmqPNZbS3mUMgiST51DCVqmbFT1gNJpVNw==
-  dependencies:
-    get-them-args "1.3.2"
-    shell-exec "1.0.2"
-
 lazystream@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/lazystream/-/lazystream-1.0.0.tgz#f6995fe0f820392f61396be89462407bb77168e4"
@@ -569,7 +596,7 @@ lodash.union@^4.6.0:
   resolved "https://registry.yarnpkg.com/lodash.union/-/lodash.union-4.6.0.tgz#48bb5088409f16f1821666641c44dd1aaae3cd88"
   integrity sha1-SLtQiECfFvGCFmZkHETdGqrjzYg=
 
-lodash@^4.17.20:
+lodash@^4.17.14:
   version "4.17.20"
   resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.17.20.tgz#b44a9b6297bcb698f1c51a3545a2b3b368d59c52"
   integrity sha512-PlhdFcillOINfeV7Ni6oF1TAEayyZBoZ8bcshTHqOYJYlrqzRK5hagpagky5o4HfCzzd1TRkXPMFq6cKk9rGmA==
@@ -602,7 +629,7 @@ minimatch@^3.0.4:
   dependencies:
     brace-expansion "^1.1.7"
 
-minimist@^1.2.0:
+minimist@^1.2.0, minimist@^1.2.5:
   version "1.2.5"
   resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.5.tgz#67d66014b66a6a8aaa0c083c5fd58df4e4e97602"
   integrity sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw==
@@ -622,12 +649,19 @@ minizlib@^2.1.1:
     minipass "^3.0.0"
     yallist "^4.0.0"
 
+mkdirp@^0.5.1:
+  version "0.5.5"
+  resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-0.5.5.tgz#d91cefd62d1436ca0f41620e251288d420099def"
+  integrity sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==
+  dependencies:
+    minimist "^1.2.5"
+
 mkdirp@^1.0.3:
   version "1.0.4"
   resolved "https://registry.yarnpkg.com/mkdirp/-/mkdirp-1.0.4.tgz#3eb5ed62622756d79a5f0e2a221dfebad75c2f7e"
   integrity sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==
 
-ms@2.1.2:
+ms@2.1.2, ms@^2.1.1:
   version "2.1.2"
   resolved "https://registry.yarnpkg.com/ms/-/ms-2.1.2.tgz#d09d1f357b443f493382a8eb3ccd183872ae6009"
   integrity sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==
@@ -695,6 +729,15 @@ picomatch@^2.0.5, picomatch@^2.2.1:
   resolved "https://registry.yarnpkg.com/picomatch/-/picomatch-2.2.2.tgz#21f333e9b6b8eaff02468f5146ea406d345f4dad"
   integrity sha512-q0M/9eZHzmr0AulXyPwNfZjtwZ/RBZlbN3K3CErVrk50T2ASYI7Bye0EvekFY3IP1Nt2DHu0re+V2ZHIpMkuWg==
 
+portfinder@^1.0.26:
+  version "1.0.26"
+  resolved "https://registry.yarnpkg.com/portfinder/-/portfinder-1.0.26.tgz#475658d56ca30bed72ac7f1378ed350bd1b64e70"
+  integrity sha512-Xi7mKxJHHMI3rIUrnm/jjUgwhbYMkp/XKEcZX3aG4BrumLpq3nmoQMX+ClYnDZnZ/New7IatC1no5RX0zo1vXQ==
+  dependencies:
+    async "^2.6.2"
+    debug "^3.1.1"
+    mkdirp "^0.5.1"
+
 process-nextick-args@~2.0.0:
   version "2.0.1"
   resolved "https://registry.yarnpkg.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz#7820d9b16120cc55ca9ae7792680ae7dba6d7fe2"
@@ -771,11 +814,6 @@ semver@^6.0.0:
   resolved "https://registry.yarnpkg.com/semver/-/semver-6.3.0.tgz#ee0a64c8af5e8ceea67687b133761e1becbd1d3d"
   integrity sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==
 
-shell-exec@1.0.2:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/shell-exec/-/shell-exec-1.0.2.tgz#2e9361b0fde1d73f476c4b6671fa17785f696756"
-  integrity sha512-jyVd+kU2X+mWKMmGhx4fpWbPsjvD53k9ivqetutVW/BQ+WIZoDoP4d8vUMGezV6saZsiNoW2f9GIhg9Dondohg==
-
 slash@^3.0.0:
   version "3.0.0"
   resolved "https://registry.yarnpkg.com/slash/-/slash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
@@ -830,6 +868,14 @@ tar@^6.0.5:
     mkdirp "^1.0.3"
     yallist "^4.0.0"
 
+tcp-port-used@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/tcp-port-used/-/tcp-port-used-1.0.1.tgz#46061078e2d38c73979a2c2c12b5a674e6689d70"
+  integrity sha512-rwi5xJeU6utXoEIiMvVBMc9eJ2/ofzB+7nLOdnZuFTmNCLqRiQh2sMG9MqCxHU/69VC/Fwp5dV9306Qd54ll1Q==
+  dependencies:
+    debug "4.1.0"
+    is2 "2.0.1"
+
 to-regex-range@^5.0.1:
   version "5.0.1"
   resolved "https://registry.yarnpkg.com/to-regex-range/-/to-regex-range-5.0.1.tgz#1648c44aae7c8d988a326018ed72f5b4dd0392e4"
diff --git a/extensions/packageManager/src/node/index.ts b/extensions/packageManager/src/node/index.ts
index 4ebcb1acd..b723e2e42 100644
--- a/extensions/packageManager/src/node/index.ts
+++ b/extensions/packageManager/src/node/index.ts
@@ -107,6 +107,7 @@ export default async (composer: IExtensionRegistration): Promise<void> => {
         });
       }
     },
+
     import: async function (req, res) {
       const user = await composer.context.getUserFromRequest(req);
       const projectId = req.params.projectId;
diff --git a/extensions/vacore/yarn.lock b/extensions/vacore/yarn.lock
index 618ac02d3..68a9697fb 100644
--- a/extensions/vacore/yarn.lock
+++ b/extensions/vacore/yarn.lock
@@ -319,11 +319,6 @@ balanced-match@^1.0.0:
   resolved "https://registry.yarnpkg.com/balanced-match/-/balanced-match-1.0.0.tgz#89b4d199ab2bee49de164ea02b89ce462d71b767"
   integrity sha1-ibTRmasr7kneFk6gK4nORi1xt2c=
 
-base64-js@^1.0.2:
-  version "1.5.1"
-  resolved "https://registry.yarnpkg.com/base64-js/-/base64-js-1.5.1.tgz#1b1b440160a5bf7ad40b650f095963481903930a"
-  integrity sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==
-
 big.js@^5.2.2:
   version "5.2.2"
   resolved "https://registry.yarnpkg.com/big.js/-/big.js-5.2.2.tgz#65f0af382f578bcdc742bd9c281e9cb2d7768328"
@@ -767,11 +762,6 @@ human-signals@^1.1.1:
   resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-1.1.1.tgz#c5b1cd14f50aeae09ab6c59fe63ba3395fe4dfa3"
   integrity sha512-SEQu7vl8KjNL2eoGBLF3+wAjpsNfA9XMlXAYj/3EdaNfAlxKthD1xjEQfGOUhllCGGJVNY34bRr6lPINhNjyZw==
 
-ieee754@^1.1.4:
-  version "1.2.1"
-  resolved "https://registry.yarnpkg.com/ieee754/-/ieee754-1.2.1.tgz#8eb7a10a63fff25d15a57b001586d177d1b0d352"
-  integrity sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==
-
 ignore@^5.1.4:
   version "5.1.8"
   resolved "https://registry.yarnpkg.com/ignore/-/ignore-5.1.8.tgz#f150a8b50a34289b33e22f5889abd4d8016f0e57"
diff --git a/runtime/dotnet/azurewebapp/Properties/launchSettings.json b/runtime/dotnet/azurewebapp/Properties/launchSettings.json
index 940ce7518..bc05ba698 100644
--- a/runtime/dotnet/azurewebapp/Properties/launchSettings.json
+++ b/runtime/dotnet/azurewebapp/Properties/launchSettings.json
@@ -24,4 +24,4 @@
       }
     }
   }
-}
+}
\ No newline at end of file
